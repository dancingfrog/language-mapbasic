'.source.mapbasic':
  'AbortFTPFile (#Ftp) - Abort the current asyncrhonous file operation.':
    'prefix': 'AbortFTPFile'
    'body': 'AbortFTPFile(${1:#Ftp})$2'
  'AbortHTTP (HttpConnection) - Abort the download of the specified HTTP connection.':
    'prefix': 'AbortHTTP'
    'body': 'AbortHTTP(${1:HttpConnection})$2'
  'Abs (Value) - Returns the absolute value (no sign) of the given float value.':
    'prefix': 'Abs'
    'body': 'Abs(${1:Value})$2'
  'ACos (Number) - Returns the arc cosine of the specified number, in radian.':
    'prefix': 'ACos'
    'body': 'ACos(${1:Number})$2'
  'ACosH (Number) - Returns the area hyperbolic cosine of the specified number.':
    'prefix': 'ACosH'
    'body': 'ACosH(${1:Number})$2'
  'Add3DArchive (Name$, Type) - Add a new archive as path to search.':
    'prefix': 'Add3DArchive'
    'body': 'Add3DArchive(${1:Name.s})$2'
  'AddBillboard (#BillboardGroup, x, y, z) - Add a billboard to the #BillboardGroup.':
    'prefix': 'AddBillboard'
    'body': 'AddBillboard(${1:#BillboardGroup}, ${2:x}, ${3:y})$4'
  'AddCipherBuffer (#Cipher, *Input, *Output, Size) - Add a new buffer to the #Cipher.':
    'prefix': 'AddCipherBuffer'
    'body': 'AddCipherBuffer(${1:#Cipher}, ${2:*Input}, ${3:*Output})$4'
  'AddDate (Date, Type, Value) - Returns a new date.':
    'prefix': 'AddDate'
    'body': 'AddDate(${1:Date}, ${2:Type})$3'
  'AddElement (List()) - Adds a new empty element after the current element.':
    'prefix': 'AddElement'
    'body': 'AddElement(${1:List()})$2'
  'AddEntityAnimationTime (#Entity, Animation$, Time) - Add time to the specified #Entity animation.':
    'prefix': 'AddEntityAnimationTime'
    'body': 'AddEntityAnimationTime(${1:#Entity}, ${2:Animation.s})$3'
  'AddFingerprintBuffer (#Fingerprint, *Buffer, Size) - Add a new buffer to the fingerprint calculation.':
    'prefix': 'AddFingerprintBuffer'
    'body': 'AddFingerprintBuffer(${1:#Fingerprint}, ${2:*Buffer})$3'
  'AddGadgetColumn (#Gadget, Position, Title$, Width) - Add a column to the specified #Gadget.':
    'prefix': 'AddGadgetColumn'
    'body': 'AddGadgetColumn(${1:#Gadget}, ${2:Position}, ${3:Title.s})$4'
  'AddGadgetItem (#Gadget, Position, Text$ [, ImageID [, Flags]]) - Add an item to a gadget (ListView, ComboBox etc...)':
    'prefix': 'AddGadgetItem'
    'body': 'AddGadgetItem(${1:#Gadget}, ${2:Position}, ${3:Text.s})$4'
  'AddGadgetItem3D (#Gadget3D, Position, Text$) - Add an item to a gadget (ListView, ComboBox etc...)':
    'prefix': 'AddGadgetItem3D'
    'body': 'AddGadgetItem3D(${1:#Gadget3D}, ${2:Position})$3'
  'AddJSONElement (*JSONValue [, Index]) - Add an element to a JSON array':
    'prefix': 'AddJSONElement'
    'body': 'AddJSONElement(${1:*JSONValue})$2'
  'AddJSONMember (*JSONValue, Key$) - Add a member to a JSON object':
    'prefix': 'AddJSONMember'
    'body': 'AddJSONMember(${1:*JSONValue})$2'
  'AddKeyboardShortcut (#Window, Key, Event) - Add a keyboard shortcut to the specified #Window.':
    'prefix': 'AddKeyboardShortcut'
    'body': 'AddKeyboardShortcut(${1:#Window}, ${2:Key})$3'
  'AddMailAttachment (#Mail, Description$, Filename$ [, MimeType$]) - Add a file attachement.':
    'prefix': 'AddMailAttachment'
    'body': 'AddMailAttachment(${1:#Mail}, ${2:Description.s})$3'
  'AddMailAttachmentData (#Mail, Description$, *Buffer, Size [, MimeType$]) - Add a file attachement from a memory area.':
    'prefix': 'AddMailAttachmentData'
    'body': 'AddMailAttachmentData(${1:#Mail}, ${2:Description.s}, ${3:*Buffer})$4'
  'AddMailRecipient (#Mail, Address$, Flags) - Add a recipient to the specified #Mail.':
    'prefix': 'AddMailRecipient'
    'body': 'AddMailRecipient(${1:#Mail}, ${2:Address.s})$3'
  'AddMapElement (Map(), Key$ [, Flags]) - Adds a new empty element in the map.':
    'prefix': 'AddMapElement'
    'body': 'AddMapElement(${1:Map()})$2'
  'AddMaterialLayer (#Material, TextureID [, Mode [, TextureCoordinateIndex]) - Add a new texture layer to the #Material.':
    'prefix': 'AddMaterialLayer'
    'body': 'AddMaterialLayer(${1:#Material})$2'
  'AddNodeAnimationTime (#NodeAnimation, Time) - Add time to the specified #NodeAnimation.':
    'prefix': 'AddNodeAnimationTime'
    'body': 'AddNodeAnimationTime(${1:#NodeAnimation})$2'
  'AddPackFile (#Pack, Filename$, PackedFilename$) - Add and compress the file to pack file.':
    'prefix': 'AddPackFile'
    'body': 'AddPackFile(${1:#Pack}, ${2:Filename.s})$3'
  'AddPackMemory (#Pack, *Buffer, Size, PackedFilename$) - Add and compress the memory area to pack file.':
    'prefix': 'AddPackMemory'
    'body': 'AddPackMemory(${1:#Pack}, ${2:*Buffer}, ${3:Size})$4'
  'AddPathArc (x1.d, y1.d, x2.d, y2.d, Radius.d, [, Flags]) - Add an arc to the vector drawing path':
    'prefix': 'AddPathArc'
    'body': 'AddPathArc(${1:x1.d}, ${2:y1.d}, ${3:x2.d}, ${4:y2.d}, ${5:Radius.d})$6'
  'AddPathBox (x.d, y.d, Width.d, Height.d [, Flags]) - Add a box to the vector drawing path':
    'prefix': 'AddPathBox'
    'body': 'AddPathBox(${1:x.d}, ${2:y.d}, ${3:Width.d})$4'
  'AddPathCircle (x.d, y.d, Radius.d [, StartAngle.d, EndAngle.d [, Flags]]) - Add a circle (or part of it) to the vector drawing path':
    'prefix': 'AddPathCircle'
    'body': 'AddPathCircle(${1:x.d}, ${2:y.d})$3'
  'AddPathCurve (x1.d, y1.d, x2.d, y2.d, x3.d, y3.d [, Flags]) - Add a curve to the vector drawing path':
    'prefix': 'AddPathCurve'
    'body': 'AddPathCurve(${1:x1.d}, ${2:y1.d}, ${3:x2.d}, ${4:y2.d}, ${5:x3.d})$6'
  'AddPathEllipse (x.d, y.d, RadiusX.d, RadiusY.d [, StartAngle.d, EndAngle.d [, Flags]]) - Add an ellipse (or part of it) to the vector drawing path':
    'prefix': 'AddPathEllipse'
    'body': 'AddPathEllipse(${1:x.d}, ${2:y.d}, ${3:RadiusX.d})$4'
  'AddPathLine (x.d, y.d [, Flags]) - Add a straight line to the vector drawing path':
    'prefix': 'AddPathLine'
    'body': 'AddPathLine(${1:x.d})$2'
  'AddPathText (Text$) - Add text to the vector drawing path':
    'prefix': 'AddPathText'
    'body': 'AddPathText(${1:Text.s})$2'
  'AddSplinePoint (#Spline, x, y, z)':
    'prefix': 'AddSplinePoint'
    'body': 'AddSplinePoint(${1:#Spline}, ${2:x}, ${3:y})$4'
  'AddStaticGeometryEntity (#StaticGeometry, EntityID, x, y, z [, ScaleX, ScaleY, ScaleZ [, RotateX, RotateY, RotateZ]])':
    'prefix': 'AddStaticGeometryEntity'
    'body': 'AddStaticGeometryEntity(${1:#StaticGeometry}, ${2:EntityID}, ${3:x}, ${4:y})$5'
  'AddStatusBarField (Width) - Add a field to the current Status Bar previously created with CreateStatusBar().':
    'prefix': 'AddStatusBarField'
    'body': 'AddStatusBarField(${1:Width})$2'
  'AddSubMesh ([Type])':
    'prefix': 'AddSubMesh'
    'body': 'AddSubMesh()$1'
  'AddSysTrayIcon (#SysTrayIcon, WindowID, ImageID) - Add an icon in the SysTray area.':
    'prefix': 'AddSysTrayIcon'
    'body': 'AddSysTrayIcon(${1:#SysTrayIcon}, ${2:WindowID})$3'
  'AddTerrainTexture (#Terrain, Layer, WorldSize, DiffuseSpecular$, NormalHeight$) - Add a texture to the #Terrain.':
    'prefix': 'AddTerrainTexture'
    'body': 'AddTerrainTexture(${1:#Terrain}, ${2:Layer}, ${3:WorldSize}, ${4:DiffuseSpecular.s})$5'
  'AddVertexPoseReference (#Mesh, Animation$, Track, Index, PoseIndex, Influence) - Add a new vertex pose reference to the #Mesh track.':
    'prefix': 'AddVertexPoseReference'
    'body': 'AddVertexPoseReference(${1:#Mesh}, ${2:Animation.s}, ${3:Track}, ${4:Index}, ${5:PoseIndex})$6'
  'AddWindowTimer (#Window, Timer, Timeout) - Add a timer event to the window.':
    'prefix': 'AddWindowTimer'
    'body': 'AddWindowTimer(${1:#Window}, ${2:Timer})$3'
  'AESDecoder (*Input, *Output, Size, *Key, Bits, *InitializationVector [, Mode]) - Decodes the specified buffer using the AES algorithm.':
    'prefix': 'AESDecoder'
    'body': 'AESDecoder(${1:*Input}, ${2:*Output}, ${3:Size}, ${4:*Key}, ${5:Bits})$6'
  'AESEncoder (*Input, *Output, Size, *Key, Bits, *InitializationVector [, Mode]) - Encodes the specified buffer using the AES algorithm.':
    'prefix': 'AESEncoder'
    'body': 'AESEncoder(${1:*Input}, ${2:*Output}, ${3:Size}, ${4:*Key}, ${5:Bits})$6'
  'AffectedDatabaseRows (#Database) - Get number of rows affected by a database update.':
    'prefix': 'AffectedDatabaseRows'
    'body': 'AffectedDatabaseRows(${1:#Database})$2'
  'AllocateMemory (Size [, Flags]) - Allocates a contiguous memory area according to the specified size and returns the buffer start.':
    'prefix': 'AllocateMemory'
    'body': 'AllocateMemory(${1:Size})$2'
  'AllocateStructure (StructureName)':
    'prefix': 'AllocateStructure'
    'body': 'AllocateStructure(${1:StructureName})$2'
  'Alpha (Color) - Returns the alpha component of the given color':
    'prefix': 'Alpha'
    'body': 'Alpha(${1:Color})$2'
  'AlphaBlend (Color1, Color2) - Returns the result of blending Color1 on Color2 with alphachannel.':
    'prefix': 'AlphaBlend'
    'body': 'AlphaBlend(${1:Color1})$2'
  'AmbientColor (Color) - Changes the ambient color of the world':
    'prefix': 'AmbientColor'
    'body': 'AmbientColor(${1:Color})$2'
  'AntialiasingMode (Mode) - Set the fullscreen antialising mode for the 3D world.':
    'prefix': 'AntialiasingMode'
    'body': 'AntialiasingMode(${1:Mode})$2'
  'ApplyEntityForce (#Entity, x, y, z [, PositionX, PositionY, PositionZ]) - Apply a force to the #Entity.':
    'prefix': 'ApplyEntityForce'
    'body': 'ApplyEntityForce(${1:#Entity}, ${2:x}, ${3:y})$4'
  'ApplyEntityImpulse (#Entity, x, y, z [, PositionX, PositionY, PositionZ]) - Apply a force to the  #Entity.':
    'prefix': 'ApplyEntityImpulse'
    'body': 'ApplyEntityImpulse(${1:#Entity}, ${2:x}, ${3:y})$4'
  'ApplyEntityTorque (#Entity, x, y, z) - Apply a rotation force to the  #Entity.':
    'prefix': 'ApplyEntityTorque'
    'body': 'ApplyEntityTorque(${1:#Entity}, ${2:x}, ${3:y})$4'
  'ApplyEntityTorqueImpulse (#Entity, x, y, z) - Apply a rotation force to the #Entity.':
    'prefix': 'ApplyEntityTorqueImpulse'
    'body': 'ApplyEntityTorqueImpulse(${1:#Entity}, ${2:x}, ${3:y})$4'
  'ArraySize (Array() [, Dimension]) - Returns the array size.':
    'prefix': 'ArraySize'
    'body': 'ArraySize(${1:Array()})$2'
  'Asc (String) - Returns the ASCII value of the first character in the string.':
    'prefix': 'Asc'
    'body': 'Asc(${1:String})$2'
  'ASin (Number) - Returns the arc sine of the specified number, in radian.':
    'prefix': 'ASin'
    'body': 'ASin(${1:Number})$2'
  'ASinH (Number) - Returns the area hyperbolic sine of the specified number.':
    'prefix': 'ASinH'
    'body': 'ASinH(${1:Number})$2'
  'ATan (Number) - Returns the arc tangent of the specified number, in radian.':
    'prefix': 'ATan'
    'body': 'ATan(${1:Number})$2'
  'ATan2 (x, y) - Returns the Arc-Tangent of x/y, in radian.':
    'prefix': 'ATan2'
    'body': 'ATan2(${1:x})$2'
  'ATanH (Number) - Returns the area hyperbolic tangent of the specified number.':
    'prefix': 'ATanH'
    'body': 'ATanH(${1:Number})$2'
  'AttachEntityObject (#Entity, Bone$, ObjectID [, x, y, z, Pitch, Yaw, Roll]) - Attach an object to the #Entity.':
    'prefix': 'AttachEntityObject'
    'body': 'AttachEntityObject(${1:#Entity}, ${2:Bone.s})$3'
  'AttachNodeObject (#Node, ObjectID) - Attach an object to the #Node.':
    'prefix': 'AttachNodeObject'
    'body': 'AttachNodeObject(${1:#Node})$2'
  'AttachRibbonEffect (#Effect, NodeID) - Attach the ribbon #Effect to the node.':
    'prefix': 'AttachRibbonEffect'
    'body': 'AttachRibbonEffect(${1:#Effect})$2'
  'AudioCDLength () - Returns the full length of an CD-Audio in seconds.':
    'prefix': 'AudioCDLength'
    'body': 'AudioCDLength()$1'
  'AudioCDName () - Returns the name, system dependent, attached to the current CD-Audio drive.':
    'prefix': 'AudioCDName'
    'body': 'AudioCDName()$1'
  'AudioCDStatus () - Possible values: -1 Ready; 0 Stopped; >0 Audio track which is currently playing.':
    'prefix': 'AudioCDStatus'
    'body': 'AudioCDStatus()$1'
  'AudioCDTrackLength (TrackNumber) - Returns the length of the specified track, in seconds.':
    'prefix': 'AudioCDTrackLength'
    'body': 'AudioCDTrackLength(${1:TrackNumber})$2'
  'AudioCDTracks () - Return the total numbers of tracks on the CD available for playing.':
    'prefix': 'AudioCDTracks'
    'body': 'AudioCDTracks()$1'
  'AudioCDTrackSeconds () - Return the number of seconds elapsed since the current track has being start to play.':
    'prefix': 'AudioCDTrackSeconds'
    'body': 'AudioCDTrackSeconds()$1'
  'AvailableProgramOutput (Program) - returns the number of bytes available for reading':
    'prefix': 'AvailableProgramOutput'
    'body': 'AvailableProgramOutput(${1:Program})$2'
  'AvailableSerialPortInput (#SerialPort) - Return the number of remaining bytes in the input buffer.':
    'prefix': 'AvailableSerialPortInput'
    'body': 'AvailableSerialPortInput(${1:#SerialPort})$2'
  'AvailableSerialPortOutput (#SerialPort) - Return the number of remaining bytes in the output buffer.':
    'prefix': 'AvailableSerialPortOutput'
    'body': 'AvailableSerialPortOutput(${1:#SerialPort})$2'
  'BackColor (Color) - Set the default background color for graphic functions and text display.':
    'prefix': 'BackColor'
    'body': 'BackColor(${1:Color})$2'
  'Base64Decoder (*Input, InputSize, *Output, OutputSize) - Decodes the specified buffer using the Base64 algorithm.':
    'prefix': 'Base64Decoder'
    'body': 'Base64Decoder(${1:*Input}, ${2:InputSize}, ${3:*Output})$4'
  'Base64Encoder (*Input, InputSize, *Output, OutputSize [, Flags]) - Encodes the specified buffer using the Base64 algorithm.':
    'prefix': 'Base64Encoder'
    'body': 'Base64Encoder(${1:*Input}, ${2:InputSize}, ${3:*Output})$4'
  'BeginVectorLayer ([Alpha]) - Begin a new transparent layer for vector drawing':
    'prefix': 'BeginVectorLayer'
    'body': 'BeginVectorLayer()$1'
  'BillboardGroupCommonDirection (#BillboardGroup, x, y, z) - Set the billboardgroup common direction.':
    'prefix': 'BillboardGroupCommonDirection'
    'body': 'BillboardGroupCommonDirection(${1:#BillboardGroup}, ${2:x}, ${3:y})$4'
  'BillboardGroupCommonUpVector (#BillboardGroup, x, y, z) - Set the billboardgroup common up vector.':
    'prefix': 'BillboardGroupCommonUpVector'
    'body': 'BillboardGroupCommonUpVector(${1:#BillboardGroup}, ${2:x}, ${3:y})$4'
  'BillboardGroupID (#BillboardGroup) - Returns the unique ID which identifies the billboard group in the operating system.':
    'prefix': 'BillboardGroupID'
    'body': 'BillboardGroupID(${1:#BillboardGroup})$2'
  'BillboardGroupMaterial (#BillboardGroup, MaterialID) - Change the #BillboardGroup material used by all the billboards.':
    'prefix': 'BillboardGroupMaterial'
    'body': 'BillboardGroupMaterial(${1:#BillboardGroup})$2'
  'BillboardGroupX (#BillboardGroup [, Mode]) - Returns the #BillboardGroup X absolute position.':
    'prefix': 'BillboardGroupX'
    'body': 'BillboardGroupX(${1:#BillboardGroup})$2'
  'BillboardGroupY (#BillboardGroup [, Mode]) - Returns the #BillboardGroup Y absolute position.':
    'prefix': 'BillboardGroupY'
    'body': 'BillboardGroupY(${1:#BillboardGroup})$2'
  'BillboardGroupZ (#BillboardGroup [, Mode]) - Returns the #BillboardGroup Z absolute position.':
    'prefix': 'BillboardGroupZ'
    'body': 'BillboardGroupZ(${1:#BillboardGroup})$2'
  'BillboardHeight (#Billboard, #BillboardGroup) - Returns the #Billboard height, in world metric.':
    'prefix': 'BillboardHeight'
    'body': 'BillboardHeight(${1:#Billboard})$2'
  'BillboardLocate (#Billboard, #BillboardGroup, x, y, z) - Change the #Billboard absolute location, relative to the #BillboardGroup.':
    'prefix': 'BillboardLocate'
    'body': 'BillboardLocate(${1:#Billboard}, ${2:#BillboardGroup}, ${3:x}, ${4:y})$5'
  'BillboardWidth (#Billboard, #BillboardGroup) - Returns the #Billboard width, in world metric.':
    'prefix': 'BillboardWidth'
    'body': 'BillboardWidth(${1:#Billboard})$2'
  'BillboardX (#Billboard, #BillboardGroup) - Returns the #Billboard X absolute position in the #BillboardGroup.':
    'prefix': 'BillboardX'
    'body': 'BillboardX(${1:#Billboard})$2'
  'BillboardY (#Billboard, #BillboardGroup) - Returns the #Billboard Y absolute position in the #BillboardGroup.':
    'prefix': 'BillboardY'
    'body': 'BillboardY(${1:#Billboard})$2'
  'BillboardZ (#Billboard, #BillboardGroup) - Returns the #Billboard Z absolute position in the #BillboardGroup.':
    'prefix': 'BillboardZ'
    'body': 'BillboardZ(${1:#Billboard})$2'
  'Bin (Number.q [, Type]) - Converts a number in binary string form.':
    'prefix': 'Bin'
    'body': 'Bin(${1:Number.q})$2'
  'BindEvent (Event, @Callback() [, Window [, Object [, EventType]]]) - Bind an event to a callback.':
    'prefix': 'BindEvent'
    'body': 'BindEvent(${1:Event})$2'
  'BindGadgetEvent (#Gadget, @Callback() [, EventType]) - Bind a gadget event to a callback.':
    'prefix': 'BindGadgetEvent'
    'body': 'BindGadgetEvent(${1:#Gadget})$2'
  'BindMenuEvent (#Menu, MenuItem, @Callback()) - Bind a menu item event to a callback.':
    'prefix': 'BindMenuEvent'
    'body': 'BindMenuEvent(${1:#Menu}, ${2:MenuItem})$3'
  'Blue (Color) - Returns the blue component of the given color':
    'prefix': 'Blue'
    'body': 'Blue(${1:Color})$2'
  'Box (x, y, Width, Height [, Color]) - Draw a filled box of given dimensions on the current output.':
    'prefix': 'Box'
    'body': 'Box(${1:x}, ${2:y}, ${3:Width})$4'
  'BoxedGradient (x, y, Width, Height) - Use a box shaped gradient when gradint drawing is enabled.':
    'prefix': 'BoxedGradient'
    'body': 'BoxedGradient(${1:x}, ${2:y}, ${3:Width})$4'
  'BuildMeshShadowVolume (#Mesh)':
    'prefix': 'BuildMeshShadowVolume'
    'body': 'BuildMeshShadowVolume(${1:#Mesh})$2'
  'BuildMeshTangents (#Mesh)':
    'prefix': 'BuildMeshTangents'
    'body': 'BuildMeshTangents(${1:#Mesh})$2'
  'BuildStaticGeometry (#StaticGeometry)':
    'prefix': 'BuildStaticGeometry'
    'body': 'BuildStaticGeometry(${1:#StaticGeometry})$2'
  'BuildTerrain (#Terrain) - Construct the #Terrain.':
    'prefix': 'BuildTerrain'
    'body': 'BuildTerrain(${1:#Terrain})$2'
  'ButtonGadget (#Gadget, x, y, Width, Height, Text$ [, Flags]) - Create a button gadget in the current GadgetList.':
    'prefix': 'ButtonGadget'
    'body': 'ButtonGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'ButtonGadget3D (#Gadget3D, x, y, Width, Height, Text$) - Create a button gadget in the current GadgetList':
    'prefix': 'ButtonGadget3D'
    'body': 'ButtonGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'ButtonImageGadget (#Gadget, x, y, Width, Height, ImageID [, Flags]) - Create a button gadget in the current GadgetList.':
    'prefix': 'ButtonImageGadget'
    'body': 'ButtonImageGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'CalendarGadget (#Gadget, x, y, Width, Height [, Date [, Flags]]) - Create Date selection Calendar':
    'prefix': 'CalendarGadget'
    'body': 'CalendarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'CallCFunction (#Library, FunctionName$, [Arg1, [Arg2, ...]]) - Call a C function using its name.':
    'prefix': 'CallCFunction'
    'body': 'CallCFunction(${1:#Library}, ${2:FunctionName.s})$3'
  'CallCFunctionFast (*Function, [Arg1, [Arg2, ...]]) - Call a C function quickly, using its pointer.':
    'prefix': 'CallCFunctionFast'
    'body': 'CallCFunctionFast(${1:*Function})$2'
  'CallFunction (#Library, FunctionName$, [Arg1, [Arg2, ...]]) - Call a function using its name.':
    'prefix': 'CallFunction'
    'body': 'CallFunction(${1:#Library}, ${2:FunctionName.s})$3'
  'CallFunctionFast (*Function, [Arg1, [Arg2, ...]]) - Call a function quickly, using its pointer.':
    'prefix': 'CallFunctionFast'
    'body': 'CallFunctionFast(${1:*Function})$2'
  'CameraBackColor (#Camera, Color) - Changes the #Camera background color.':
    'prefix': 'CameraBackColor'
    'body': 'CameraBackColor(${1:#Camera})$2'
  'CameraCustomParameter (#Camera, ParameterIndex, Value1, Value2, Value3, Value4) - Set a custom parameter to the #Entity shader script.':
    'prefix': 'CameraCustomParameter'
    'body': 'CameraCustomParameter(${1:#Camera}, ${2:ParameterIndex}, ${3:Value1}, ${4:Value2}, ${5:Value3})$6'
  'CameraDirection (#Camera, x, y, z) - Change the #Camera direction.':
    'prefix': 'CameraDirection'
    'body': 'CameraDirection(${1:#Camera}, ${2:x}, ${3:y})$4'
  'CameraDirectionX (#Camera [, Mode]) - Retrieve the x direction of the #Camera.':
    'prefix': 'CameraDirectionX'
    'body': 'CameraDirectionX(${1:#Camera})$2'
  'CameraDirectionY (#Camera [, Mode]) - Retrieve the y direction of the #Camera.':
    'prefix': 'CameraDirectionY'
    'body': 'CameraDirectionY(${1:#Camera})$2'
  'CameraDirectionZ (#Camera [, Mode]) - Retrieve the z direction of the #Camera.':
    'prefix': 'CameraDirectionZ'
    'body': 'CameraDirectionZ(${1:#Camera})$2'
  'CameraFixedYawAxis (#Camera, Mode [, VectorX, VectorY, VectorZ]) - Change the way the yaw axis is managed.':
    'prefix': 'CameraFixedYawAxis'
    'body': 'CameraFixedYawAxis(${1:#Camera})$2'
  'CameraFollow (#Camera, ObjectID, Angle, Height, Distance, RotationPercent, PositionPercent [, Mode])':
    'prefix': 'CameraFollow'
    'body': 'CameraFollow(${1:#Camera}, ${2:ObjectID}, ${3:Angle}, ${4:Height}, ${5:Distance}, ${6:RotationPercent})$7'
  'CameraFOV (#Camera, FOV) - Changes the #Camera Field Of View (FOV).':
    'prefix': 'CameraFOV'
    'body': 'CameraFOV(${1:#Camera})$2'
  'CameraID (#Camera) - Returns the unique ID which identifies the camera in the operating system.':
    'prefix': 'CameraID'
    'body': 'CameraID(${1:#Camera})$2'
  'CameraLookAt (#Camera, x, y, z) - Makes the camera to look at the x,y,z point.':
    'prefix': 'CameraLookAt'
    'body': 'CameraLookAt(${1:#Camera}, ${2:x}, ${3:y})$4'
  'CameraPitch (#Camera [, Mode]) - Retrieve the pitch of the #Camera.':
    'prefix': 'CameraPitch'
    'body': 'CameraPitch(${1:#Camera})$2'
  'CameraProjectionMode (#Camera, Mode) - Change the #Camera projection mode.':
    'prefix': 'CameraProjectionMode'
    'body': 'CameraProjectionMode(${1:#Camera})$2'
  'CameraProjectionX (#Camera, x, y, z) - Return the X position, in pixels, of the 3D point.':
    'prefix': 'CameraProjectionX'
    'body': 'CameraProjectionX(${1:#Camera}, ${2:x}, ${3:y})$4'
  'CameraProjectionY (#Camera, x, y, z) - Return the Y position, in pixels, of the 3D point.':
    'prefix': 'CameraProjectionY'
    'body': 'CameraProjectionY(${1:#Camera}, ${2:x}, ${3:y})$4'
  'CameraRange (#Camera, Near, Far) - Change the #Camera range.':
    'prefix': 'CameraRange'
    'body': 'CameraRange(${1:#Camera}, ${2:Near})$3'
  'CameraRenderMode (#Camera, RenderMode) - Change the #Camera render mode.':
    'prefix': 'CameraRenderMode'
    'body': 'CameraRenderMode(${1:#Camera})$2'
  'CameraRoll (#Camera [, Mode]) - Retrieve the roll of the #Camera.':
    'prefix': 'CameraRoll'
    'body': 'CameraRoll(${1:#Camera})$2'
  'CameraViewHeight (#Camera) - Retrieve the height of the #Camera view, in pixels.':
    'prefix': 'CameraViewHeight'
    'body': 'CameraViewHeight(${1:#Camera})$2'
  'CameraViewWidth (#Camera) - Retrieve the width of the #Camera view, in pixels.':
    'prefix': 'CameraViewWidth'
    'body': 'CameraViewWidth(${1:#Camera})$2'
  'CameraViewX (#Camera) - Retrieve the x position on the screen of the #Camera view, in pixels.':
    'prefix': 'CameraViewX'
    'body': 'CameraViewX(${1:#Camera})$2'
  'CameraViewY (#Camera) - Retrieve the y position on the screen of the #Camera view, in pixels.':
    'prefix': 'CameraViewY'
    'body': 'CameraViewY(${1:#Camera})$2'
  'CameraX (#Camera [, Mode]) - Retrieve the x position of the #Camera.':
    'prefix': 'CameraX'
    'body': 'CameraX(${1:#Camera})$2'
  'CameraY (#Camera [, Mode]) - Retrieve the y position of the #Camera.':
    'prefix': 'CameraY'
    'body': 'CameraY(${1:#Camera})$2'
  'CameraYaw (#Camera [, Mode]) - Retrieve the yaw of the #Camera.':
    'prefix': 'CameraYaw'
    'body': 'CameraYaw(${1:#Camera})$2'
  'CameraZ (#Camera [, Mode]) - Retrieve the z position of the #Camera.':
    'prefix': 'CameraZ'
    'body': 'CameraZ(${1:#Camera})$2'
  'CanvasGadget (#Gadget, x, y, Width, Height [, Flags]) - Create a canvas gadget in the current GadgetList.':
    'prefix': 'CanvasGadget'
    'body': 'CanvasGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'CanvasOutput (#Gadget) - Returns the OutputID of the specified #Gadget to perform 2D rendering operation on it.':
    'prefix': 'CanvasOutput'
    'body': 'CanvasOutput(${1:#Gadget})$2'
  'CanvasVectorOutput (#Gadget [, Unit]) - Returns the OutputID of the specified #Gadget to perform vector drawing on it.':
    'prefix': 'CanvasVectorOutput'
    'body': 'CanvasVectorOutput(${1:#Gadget})$2'
  'CatchImage (#Image, *Memory [, Size]) - Create a new #Image found at the specified memory address.':
    'prefix': 'CatchImage'
    'body': 'CatchImage(${1:#Image})$2'
  'CatchJSON (#JSON, *Buffer, Size [, Flags]) - Parse JSON from a memory buffer':
    'prefix': 'CatchJSON'
    'body': 'CatchJSON(${1:#JSON}, ${2:*Buffer})$3'
  'CatchMusic (#Music, *Memory, Length) - Create a new #Music found at the specified memory address.':
    'prefix': 'CatchMusic'
    'body': 'CatchMusic(${1:#Music}, ${2:*Memory})$3'
  'CatchSound (#Sound, *Buffer [, Size [, Flags]]) - Load a sound found a the specified memory address.':
    'prefix': 'CatchSound'
    'body': 'CatchSound(${1:#Sound})$2'
  'CatchSprite (#Sprite, MemoryID [, Mode]) - Catch a sprite from memory in BMP format.':
    'prefix': 'CatchSprite'
    'body': 'CatchSprite(${1:#Sprite})$2'
  'CatchXML (#XML, *Address, Size [, Flags [, Encoding]]) - Parse XML from memory':
    'prefix': 'CatchXML'
    'body': 'CatchXML(${1:#XML}, ${2:*Address})$3'
  'CGIBuffer () - Get the CGI web content buffer pointer.':
    'prefix': 'CGIBuffer'
    'body': 'CGIBuffer()$1'
  'CGICookieName (Index) - Get the specified CGI cookie name.':
    'prefix': 'CGICookieName'
    'body': 'CGICookieName(${1:Index})$2'
  'CGICookieValue (Name$) - Get the specified CGI cookie value.':
    'prefix': 'CGICookieValue'
    'body': 'CGICookieValue(${1:Name.s})$2'
  'CGIParameterData (Name$ [, Index]]) - Get the specified CGI parameter data.':
    'prefix': 'CGIParameterData'
    'body': 'CGIParameterData(${1:Name.s})$2'
  'CGIParameterDataSize (Name$ [, Index]]) - Get the specified CGI parameter data size.':
    'prefix': 'CGIParameterDataSize'
    'body': 'CGIParameterDataSize(${1:Name.s})$2'
  'CGIParameterName (Index) - Get the specified CGI parameter name.':
    'prefix': 'CGIParameterName'
    'body': 'CGIParameterName(${1:Index})$2'
  'CGIParameterType (Name$ [, Index]]) - Get the specified CGI parameter type.':
    'prefix': 'CGIParameterType'
    'body': 'CGIParameterType(${1:Name.s})$2'
  'CGIParameterValue (Name$ [, Index]) - Get the specified CGI parameter value.':
    'prefix': 'CGIParameterValue'
    'body': 'CGIParameterValue(${1:Name.s})$2'
  'CGIVariable (VariableName$) - Get the specified CGI variable content.':
    'prefix': 'CGIVariable'
    'body': 'CGIVariable(${1:VariableName.s})$2'
  'ChangeCurrentElement (List(), *NewElement) - Changes the current element of the specified list to the given new element.':
    'prefix': 'ChangeCurrentElement'
    'body': 'ChangeCurrentElement(${1:List()})$2'
  'ChangeGamma (RedIntensity, GreenIntensity, BlueIntensity) - Change the Gamma for the current screen.':
    'prefix': 'ChangeGamma'
    'body': 'ChangeGamma(${1:RedIntensity}, ${2:GreenIntensity})$3'
  'ChangeSysTrayIcon (#SysTrayIcon, ImageID) - Change a specified icon in the SysTray area.':
    'prefix': 'ChangeSysTrayIcon'
    'body': 'ChangeSysTrayIcon(${1:#SysTrayIcon})$2'
  'CheckBoxGadget (#Gadget, x, y, Width, Height, Text$ [, Flags]) - Create a checkbox gadget in the GadgetList.':
    'prefix': 'CheckBoxGadget'
    'body': 'CheckBoxGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'CheckBoxGadget3D (#Gadget3D, x, y, Width, Height, Text$) - Create a checkbox gadget in the GadgetList.':
    'prefix': 'CheckBoxGadget3D'
    'body': 'CheckBoxGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'CheckDatabaseNull (#Database, Column) - Returns #True if the specified column contains NULL.':
    'prefix': 'CheckDatabaseNull'
    'body': 'CheckDatabaseNull(${1:#Database})$2'
  'CheckFilename (Filename$) - Check if the filename is valid.':
    'prefix': 'CheckFilename'
    'body': 'CheckFilename(${1:Filename.s})$2'
  'CheckFTPConnection (#Ftp) - Check if the FTP server is still responding.':
    'prefix': 'CheckFTPConnection'
    'body': 'CheckFTPConnection(${1:#Ftp})$2'
  'CheckObjectVisibility (#Camera, ObjectID) - Check if the object is currently visible on the specified camera.':
    'prefix': 'CheckObjectVisibility'
    'body': 'CheckObjectVisibility(${1:#Camera})$2'
  'ChildXMLNode (Node [, n]) - Get the nth child of the given XML node (default is the 1st child)':
    'prefix': 'ChildXMLNode'
    'body': 'ChildXMLNode(${1:Node})$2'
  'Chr (ASCII) - Returns the character associated with the given ASCII value.':
    'prefix': 'Chr'
    'body': 'Chr(${1:ASCII})$2'
  'Circle (x, y, Radius [, Color]) - Draw a filled circle on the current output':
    'prefix': 'Circle'
    'body': 'Circle(${1:x}, ${2:y})$3'
  'CircularGradient (x, y, Radius) - Use a circular gradient when gradient drawing is enabled.':
    'prefix': 'CircularGradient'
    'body': 'CircularGradient(${1:x}, ${2:y})$3'
  'ClearBillboards (#BillboardGroup) - Remove and destroy all the billboards of the #BillboardGroup.':
    'prefix': 'ClearBillboards'
    'body': 'ClearBillboards(${1:#BillboardGroup})$2'
  'ClearClipboard () - Clear the clipboard of its content.':
    'prefix': 'ClearClipboard'
    'body': 'ClearClipboard()$1'
  'ClearConsole () - Clear the whole console content.':
    'prefix': 'ClearConsole'
    'body': 'ClearConsole()$1'
  'ClearDebugOutput () - Clear the content of the debug output window.':
    'prefix': 'ClearDebugOutput'
    'body': 'ClearDebugOutput()$1'
  'ClearGadgetItems (#Gadget) - Clear all the items of the specified #Gadget.':
    'prefix': 'ClearGadgetItems'
    'body': 'ClearGadgetItems(${1:#Gadget})$2'
  'ClearGadgetItems3D (#Gadget3D) - Clear all the items of the specified #Gadget3D.':
    'prefix': 'ClearGadgetItems3D'
    'body': 'ClearGadgetItems3D(${1:#Gadget3D})$2'
  'ClearJSONElements (*JSONValue) - Clear the elements of a JSON array':
    'prefix': 'ClearJSONElements'
    'body': 'ClearJSONElements(${1:*JSONValue})$2'
  'ClearJSONMembers (*JSONValue) - Clear the members of a JSON object':
    'prefix': 'ClearJSONMembers'
    'body': 'ClearJSONMembers(${1:*JSONValue})$2'
  'ClearList (List()) - Clears all the elements in this list and releases their memory.':
    'prefix': 'ClearList'
    'body': 'ClearList(${1:List()})$2'
  'ClearMap (Map()) - Clears all the elements in this map and releases their memory.':
    'prefix': 'ClearMap'
    'body': 'ClearMap(${1:Map()})$2'
  'ClearScreen (Color) - Clear the whole screen with the specified RGB color.':
    'prefix': 'ClearScreen'
    'body': 'ClearScreen(${1:Color})$2'
  'ClearSpline (#Spline) - Clear the #Spine.':
    'prefix': 'ClearSpline'
    'body': 'ClearSpline(${1:#Spline})$2'
  'ClipOutput (x, y, Width, Height) - Restrict drawing output to a clipping rectangle':
    'prefix': 'ClipOutput'
    'body': 'ClipOutput(${1:x}, ${2:y}, ${3:Width})$4'
  'ClipPath ([Flags]) - Add the vector drawing path to the output clipping':
    'prefix': 'ClipPath'
    'body': 'ClipPath()$1'
  'ClipSprite (#Sprite, x, y, Width, Height) - Add a clip zone to the specified sprite.':
    'prefix': 'ClipSprite'
    'body': 'ClipSprite(${1:#Sprite}, ${2:x}, ${3:y}, ${4:Width})$5'
  'CloseConsole () - Close the current console':
    'prefix': 'CloseConsole'
    'body': 'CloseConsole()$1'
  'CloseCryptRandom () - Close the cryptographic random number generator.':
    'prefix': 'CloseCryptRandom'
    'body': 'CloseCryptRandom()$1'
  'CloseDatabase (#Database) - Close the specified database.':
    'prefix': 'CloseDatabase'
    'body': 'CloseDatabase(${1:#Database})$2'
  'CloseFile (#File) - Close the specified file.':
    'prefix': 'CloseFile'
    'body': 'CloseFile(${1:#File})$2'
  'CloseFTP (#Ftp) - Close the specified client connection and send a notification to the server.':
    'prefix': 'CloseFTP'
    'body': 'CloseFTP(${1:#Ftp})$2'
  'CloseGadgetList () - Terminates the current GadgetList creation and go back to the previous GadgetList.':
    'prefix': 'CloseGadgetList'
    'body': 'CloseGadgetList()$1'
  'CloseGadgetList3D () - Terminates the current GadgetList creation and go back to the previous GadgetList.':
    'prefix': 'CloseGadgetList3D'
    'body': 'CloseGadgetList3D()$1'
  'CloseHelp () - Close a previously opened Help window.':
    'prefix': 'CloseHelp'
    'body': 'CloseHelp()$1'
  'CloseLibrary (#Library) - Close the specified library':
    'prefix': 'CloseLibrary'
    'body': 'CloseLibrary(${1:#Library})$2'
  'CloseNetworkConnection (Connection) - Close the specified client connection and send a notification to the server.':
    'prefix': 'CloseNetworkConnection'
    'body': 'CloseNetworkConnection(${1:Connection})$2'
  'CloseNetworkServer (#Server) - Shutdown the specified server.':
    'prefix': 'CloseNetworkServer'
    'body': 'CloseNetworkServer(${1:#Server})$2'
  'ClosePack (#Pack) - Close specified pack.':
    'prefix': 'ClosePack'
    'body': 'ClosePack(${1:#Pack})$2'
  'ClosePath () - Close the currente vector drawing path by connecting start & end with a straight line':
    'prefix': 'ClosePath'
    'body': 'ClosePath()$1'
  'ClosePreferences () - Close the currently opened preference file.':
    'prefix': 'ClosePreferences'
    'body': 'ClosePreferences()$1'
  'CloseProgram (Program) - Close the interaction with the specified program':
    'prefix': 'CloseProgram'
    'body': 'CloseProgram(${1:Program})$2'
  'CloseScreen () - Close the current screen (Either windowed or full screen mode).':
    'prefix': 'CloseScreen'
    'body': 'CloseScreen()$1'
  'CloseSerialPort (#SerialPort) - Close the specified #SerialPort.':
    'prefix': 'CloseSerialPort'
    'body': 'CloseSerialPort(${1:#SerialPort})$2'
  'CloseSubMenu () - Close the actual sub menu and come back to the previous one.':
    'prefix': 'CloseSubMenu'
    'body': 'CloseSubMenu()$1'
  'CloseWindow (#Window) - Close the specified window.':
    'prefix': 'CloseWindow'
    'body': 'CloseWindow(${1:#Window})$2'
  'CloseWindow3D (#Window3D) - Close the specified window.':
    'prefix': 'CloseWindow3D'
    'body': 'CloseWindow3D(${1:#Window3D})$2'
  'CocoaMessage (@ReturnValue, Object, Method$ [, ...])':
    'prefix': 'CocoaMessage'
    'body': 'CocoaMessage(${1:@ReturnValue}, ${2:Object})$3'
  'ColorRequester ([Color]) - Open the standard requester to choose a color.':
    'prefix': 'ColorRequester'
    'body': 'ColorRequester()$1'
  'ComboBoxGadget (#Gadget, x, y, Width, Height [, Flags]) - Create a combobox gadget in the current GadgetList.':
    'prefix': 'ComboBoxGadget'
    'body': 'ComboBoxGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'ComboBoxGadget3D (#Gadget3D, x, y, Width, Height [, Flags]) - Create a combobox gadget in the current GadgetList.':
    'prefix': 'ComboBoxGadget3D'
    'body': 'ComboBoxGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5'
  'CompareMemory (SourceMemory, DestinationMemory, Length) - Compares two memory areas and returns 1 if its equal or 0 if it doesn\'t match.':
    'prefix': 'CompareMemory'
    'body': 'CompareMemory(${1:SourceMemory}, ${2:DestinationMemory})$3'
  'CompareMemoryString (*String1, *String2 [, Mode [, Length [, Flags]]]) - Returns 0 if *String1 equals *String2, -1 or 1 if *String1 is below or above than *String2.':
    'prefix': 'CompareMemoryString'
    'body': 'CompareMemoryString(${1:*String1})$2'
  'ComposeJSON (#JSON [, Flags]) - Compose a JSON data into a string':
    'prefix': 'ComposeJSON'
    'body': 'ComposeJSON(${1:#JSON})$2'
  'ComposeXML (#XML [, Flags]) - Compose an XML tree into a string':
    'prefix': 'ComposeXML'
    'body': 'ComposeXML(${1:#XML})$2'
  'CompositorEffectParameter (#Effect, TechniqueID, PassID, EffectName$, DataType, *Data)':
    'prefix': 'CompositorEffectParameter'
    'body': 'CompositorEffectParameter(${1:#Effect}, ${2:TechniqueID}, ${3:PassID}, ${4:EffectName.s}, ${5:DataType})$6'
  'CompressMemory (*Buffer, Size, *Output, OutputSize [, PluginID]) - Compress the content of the *Buffer into *Output.':
    'prefix': 'CompressMemory'
    'body': 'CompressMemory(${1:*Buffer}, ${2:Size}, ${3:*Output})$4'
  'ComputerName () - Returns the name of the computer':
    'prefix': 'ComputerName'
    'body': 'ComputerName()$1'
  'ComputeSpline (#Spline, Time) - Compute the #Spline at the given time.':
    'prefix': 'ComputeSpline'
    'body': 'ComputeSpline(${1:#Spline})$2'
  'ConeTwistJoint (#Joint, EntityID, FxA, FyA, FzA, EntityID2, FxB, FyB, FzB)':
    'prefix': 'ConeTwistJoint'
    'body': 'ConeTwistJoint(${1:#Joint}, ${2:EntityID}, ${3:FxA}, ${4:FyA}, ${5:FzA}, ${6:EntityID2}, ${7:FxB}, ${8:FyB})$9'
  'ConicalGradient (x, y, Angle.f) - Use a conical gradient when gradient drawing is enabled.':
    'prefix': 'ConicalGradient'
    'body': 'ConicalGradient(${1:x}, ${2:y})$3'
  'ConnectionID (Connection) - Returns the unique system identifier of the connection.':
    'prefix': 'ConnectionID'
    'body': 'ConnectionID(${1:Connection})$2'
  'ConsoleColor (CharacterColor, BackgroundColor) - Change the colors used by the text display.':
    'prefix': 'ConsoleColor'
    'body': 'ConsoleColor(${1:CharacterColor})$2'
  'ConsoleCursor (Height) - Change the cursor display.':
    'prefix': 'ConsoleCursor'
    'body': 'ConsoleCursor(${1:Height})$2'
  'ConsoleError (Message$) - Write a message to the standard error output':
    'prefix': 'ConsoleError'
    'body': 'ConsoleError(${1:Message.s})$2'
  'ConsoleLocate (x, y) - Move the cursor to the given position, in character.':
    'prefix': 'ConsoleLocate'
    'body': 'ConsoleLocate(${1:x})$2'
  'ConsoleTitle (Title$) - Change the console title to the new given one.':
    'prefix': 'ConsoleTitle'
    'body': 'ConsoleTitle(${1:Title.s})$2'
  'ContainerGadget (#Gadget, x, y, Width, Height [, Flags]) - Create a gadget container in the current GadgetList.':
    'prefix': 'ContainerGadget'
    'body': 'ContainerGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'ContainerGadget3D (#Gadget3D, x, y, Width, Height) - Create a gadget container in the current GadgetList.':
    'prefix': 'ContainerGadget3D'
    'body': 'ContainerGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5'
  'ConvertCoordinateX (x.d, y.d [, Source, Target]) - Convert a point between coordinate systems':
    'prefix': 'ConvertCoordinateX'
    'body': 'ConvertCoordinateX(${1:x.d})$2'
  'ConvertCoordinateY (x.d, y.d [, Source, Target]) - Convert a point between coordinate systems':
    'prefix': 'ConvertCoordinateY'
    'body': 'ConvertCoordinateY(${1:x.d})$2'
  'ConvertLocalToWorldPosition (ObjectID, x, y, z) - Convert local position of the object into world coordinate.':
    'prefix': 'ConvertLocalToWorldPosition'
    'body': 'ConvertLocalToWorldPosition(${1:ObjectID}, ${2:x}, ${3:y})$4'
  'ConvertWorldToLocalPosition (ObjectID, x, y, z) - Convert world position of the object into local coordinate.':
    'prefix': 'ConvertWorldToLocalPosition'
    'body': 'ConvertWorldToLocalPosition(${1:ObjectID}, ${2:x}, ${3:y})$4'
  'CopyArray (SourceArray(), DestinationArray()) - Copy all the elements from the array to the destination array to have two identical arrays.':
    'prefix': 'CopyArray'
    'body': 'CopyArray(${1:SourceArray()})$2'
  'CopyDebugOutput () - Copy the content of the debug output window into the clipboard.':
    'prefix': 'CopyDebugOutput'
    'body': 'CopyDebugOutput()$1'
  'CopyDirectory (SourceDirectory$, DestinationDirectory$, Pattern$ [, Flags]) - Copy the source file to the destination.':
    'prefix': 'CopyDirectory'
    'body': 'CopyDirectory(${1:SourceDirectory.s}, ${2:DestinationDirectory.s})$3'
  'CopyEntity (#Entity, #NewEntity) - Copy the specified #Entity on the #NewEntity.':
    'prefix': 'CopyEntity'
    'body': 'CopyEntity(${1:#Entity})$2'
  'CopyFile (SourceFileName$, DestinationFileName$) - Copy the source file to the destination.':
    'prefix': 'CopyFile'
    'body': 'CopyFile(${1:SourceFileName.s})$2'
  'CopyImage (#Image1, #Image2) - Create a new #Image2 identical to the source #Image1.':
    'prefix': 'CopyImage'
    'body': 'CopyImage(${1:#Image1})$2'
  'CopyLight (#Light, #NewLight) - Copy the specified #Light on the #NewLight.':
    'prefix': 'CopyLight'
    'body': 'CopyLight(${1:#Light})$2'
  'CopyList (List(), DestinationList()) - Copy all the elements from the list to the destination list to have two identical lists.':
    'prefix': 'CopyList'
    'body': 'CopyList(${1:List()})$2'
  'CopyMap (Map(), DestinationMap()) - Copy all the elements from the map to the destination map to have two identical map.':
    'prefix': 'CopyMap'
    'body': 'CopyMap(${1:Map()})$2'
  'CopyMaterial (#Material, #NewMaterial) - Copy the specified #Material on the #NewMaterial.':
    'prefix': 'CopyMaterial'
    'body': 'CopyMaterial(${1:#Material})$2'
  'CopyMemory (SourceMemory, DestinationMemory, Length) - Copy a memory area from \'SourceMemory\' to \'DestinationMemory\'.':
    'prefix': 'CopyMemory'
    'body': 'CopyMemory(${1:SourceMemory}, ${2:DestinationMemory})$3'
  'CopyMemoryString (*String [, DestinationMemory]) - Copy the *String to destination memory address or after the last one.':
    'prefix': 'CopyMemoryString'
    'body': 'CopyMemoryString(${1:*String})$2'
  'CopyMesh (#Mesh, #NewMesh) - Copy the specified #Mesh on the #NewMesh.':
    'prefix': 'CopyMesh'
    'body': 'CopyMesh(${1:#Mesh})$2'
  'CopySprite (#Sprite1, #Sprite2 [, Mode]) - Copy the #Sprite1 to #Sprite2.':
    'prefix': 'CopySprite'
    'body': 'CopySprite(${1:#Sprite1})$2'
  'CopyTexture (#Texture, #NewTexture) - Copy the specified #Texture on the #NewTexture.':
    'prefix': 'CopyTexture'
    'body': 'CopyTexture(${1:#Texture})$2'
  'CopyXMLNode (Node, ParentNode [, PreviousNode]) - Copy the XML node to a new location (or different XML tree)':
    'prefix': 'CopyXMLNode'
    'body': 'CopyXMLNode(${1:Node})$2'
  'Cos (Angle) - Returns the cosinus of the specified angle, in radian.':
    'prefix': 'Cos'
    'body': 'Cos(${1:Angle})$2'
  'CosH (Angle) - Returns the hyperbolic cosine of the specified angle.':
    'prefix': 'CosH'
    'body': 'CosH(${1:Angle})$2'
  'CountBillboards (#BillboardGroup) - Count the billboards number contained in the #BillboardGroup.':
    'prefix': 'CountBillboards'
    'body': 'CountBillboards(${1:#BillboardGroup})$2'
  'CountCGICookies () - Get the number of cookies.':
    'prefix': 'CountCGICookies'
    'body': 'CountCGICookies()$1'
  'CountCGIParameters () - Get the number of cookies.':
    'prefix': 'CountCGIParameters'
    'body': 'CountCGIParameters()$1'
  'CountCPUs ([Type]) - Returns the number of processors available.':
    'prefix': 'CountCPUs'
    'body': 'CountCPUs()$1'
  'CountGadgetItems (#Gadget) - Count all the items of the specified #Gadget.':
    'prefix': 'CountGadgetItems'
    'body': 'CountGadgetItems(${1:#Gadget})$2'
  'CountGadgetItems3D (#Gadget3D) - Count all the items of the specified #Gadget3D.':
    'prefix': 'CountGadgetItems3D'
    'body': 'CountGadgetItems3D(${1:#Gadget3D})$2'
  'CountMaterialLayers (#Material) - Returns the number of textures layers the #Material contains.':
    'prefix': 'CountMaterialLayers'
    'body': 'CountMaterialLayers(${1:#Material})$2'
  'CountProgramParameters () - Get the number of parameters passed to this program':
    'prefix': 'CountProgramParameters'
    'body': 'CountProgramParameters()$1'
  'CountRegularExpressionGroups (#RegularExpression) - Return the number of capturing groups in the regular expression.':
    'prefix': 'CountRegularExpressionGroups'
    'body': 'CountRegularExpressionGroups(${1:#RegularExpression})$2'
  'CountSplinePoints (#Spline) - Return the number of point in the #Spine.':
    'prefix': 'CountSplinePoints'
    'body': 'CountSplinePoints(${1:#Spline})$2'
  'CountString (String$, StringToCount$) - Count the number of occurence of a string':
    'prefix': 'CountString'
    'body': 'CountString(${1:String.s})$2'
  'CPUName () - Returns the name of the CPU':
    'prefix': 'CPUName'
    'body': 'CPUName()$1'
  'CreateBillboardGroup (#BillboardGroup, MaterialID, DefaultBillboardWidth, DefaultBillboardHeight, [x, y, z [, VisibilityMask [, Type]]]) - Creates a new #BillboardGroup.':
    'prefix': 'CreateBillboardGroup'
    'body': 'CreateBillboardGroup(${1:#BillboardGroup}, ${2:MaterialID}, ${3:DefaultBillboardWidth}, ${4:DefaultBillboardHeight})$5'
  'CreateCamera (#Camera, x, y, Width, Height [, VisibilityMask]) - Create a new #Camera. All the dimensions are in pourcents.':
    'prefix': 'CreateCamera'
    'body': 'CreateCamera(${1:#Camera}, ${2:x}, ${3:y}, ${4:Width})$5'
  'CreateCompositorEffect (#Effect, CameraID, EffectName$)':
    'prefix': 'CreateCompositorEffect'
    'body': 'CreateCompositorEffect(${1:#Effect}, ${2:CameraID})$3'
  'CreateCone (#Mesh, Radius.f, Height.f [, NbBaseSegments, NbHeightSegments])':
    'prefix': 'CreateCone'
    'body': 'CreateCone(${1:#Mesh}, ${2:Radius.f})$3'
  'CreateCube (#Mesh, Size)':
    'prefix': 'CreateCube'
    'body': 'CreateCube(${1:#Mesh})$2'
  'CreateCubeMapTexture (#Texture, Width, Height, TextureName$ [, BackColor]) - Create a new cube map #Texture.':
    'prefix': 'CreateCubeMapTexture'
    'body': 'CreateCubeMapTexture(${1:#Texture}, ${2:Width}, ${3:Height})$4'
  'CreateCylinder (#Mesh, Radius.f, Height.f [, NbBaseSegments, NbHeightSegments, CloseTop])':
    'prefix': 'CreateCylinder'
    'body': 'CreateCylinder(${1:#Mesh}, ${2:Radius.f})$3'
  'CreateDialog (#Dialog) - Creates a new dialog.':
    'prefix': 'CreateDialog'
    'body': 'CreateDialog(${1:#Dialog})$2'
  'CreateDirectory (DirectoryName$) - Create a new directory.':
    'prefix': 'CreateDirectory'
    'body': 'CreateDirectory(${1:DirectoryName.s})$2'
  'CreateEntity (#Entity, MeshID, MaterialID [, x, y, z [, PickMask [, VisibilityMask]]]) - Create a new #Entity based on the specified Mesh and Material at the given position.':
    'prefix': 'CreateEntity'
    'body': 'CreateEntity(${1:#Entity}, ${2:MeshID})$3'
  'CreateEntityBody (#Entity, Type [, Mass [, Restitution, Friction]]) - Create a new body for the #Entity.':
    'prefix': 'CreateEntityBody'
    'body': 'CreateEntityBody(${1:#Entity})$2'
  'CreateFile (#File, FileName$ [, Flags]) - Create an empty file.':
    'prefix': 'CreateFile'
    'body': 'CreateFile(${1:#File})$2'
  'CreateFTPDirectory (#Ftp, Directory$) - Create a new directory on the FTP server.':
    'prefix': 'CreateFTPDirectory'
    'body': 'CreateFTPDirectory(${1:#Ftp})$2'
  'CreateImage (#Image, Width, Height [, Depth [, BackColor]]) - Create an empty #Image which can be used to do rendering on it.':
    'prefix': 'CreateImage'
    'body': 'CreateImage(${1:#Image}, ${2:Width})$3'
  'CreateImageMenu (#Menu, WindowID [, Flags]) - Creates a new empty menu with images support.':
    'prefix': 'CreateImageMenu'
    'body': 'CreateImageMenu(${1:#Menu})$2'
  'CreateJSON (#JSON [, Flags]) - Create new JSON data with a value of type #PB_JSON_Null':
    'prefix': 'CreateJSON'
    'body': 'CreateJSON(${1:#JSON})$2'
  'CreateLensFlareEffect (#Effect, CameraID, NodeID, BurstSize, HaloSize, HaloMaterialID,	CircleMaterialID, BurstMaterialID) - Create a new lens flare #Effect.':
    'prefix': 'CreateLensFlareEffect'
    'body': 'CreateLensFlareEffect(${1:#Effect}, ${2:CameraID}, ${3:NodeID}, ${4:BurstSize}, ${5:HaloSize}, ${6:HaloMaterialID}, ${7:	CircleMaterialID})$8'
  'CreateLight (#Light, Color [, x, y, z [, Flags]]) - Create a new #Light.':
    'prefix': 'CreateLight'
    'body': 'CreateLight(${1:#Light})$2'
  'CreateLine3D (#Mesh, x, y, z, Color, x2, y2, z2, Color2)':
    'prefix': 'CreateLine3D'
    'body': 'CreateLine3D(${1:#Mesh}, ${2:x}, ${3:y}, ${4:z}, ${5:Color}, ${6:x2}, ${7:y2}, ${8:z2})$9'
  'CreateMail (#Mail, From$, Subject$ [, Encoding]) - Create a new mail.':
    'prefix': 'CreateMail'
    'body': 'CreateMail(${1:#Mail}, ${2:From.s})$3'
  'CreateMaterial (#Material, TextureID) - Create a new #Material based on the specified Texture.':
    'prefix': 'CreateMaterial'
    'body': 'CreateMaterial(${1:#Material})$2'
  'CreateMenu (#Menu, WindowID) - Creates a new empty menu.':
    'prefix': 'CreateMenu'
    'body': 'CreateMenu(${1:#Menu})$2'
  'CreateMesh (#Mesh [, Type [, Mode]]) - Create a new empty #Mesh.':
    'prefix': 'CreateMesh'
    'body': 'CreateMesh(${1:#Mesh})$2'
  'CreateMutex () - Create a new mutex syncronisation object.':
    'prefix': 'CreateMutex'
    'body': 'CreateMutex()$1'
  'CreateNetworkServer (ServerID, Port [, Type [, BindedIP$]]) - Create a new network server on the local computer at the specified port.':
    'prefix': 'CreateNetworkServer'
    'body': 'CreateNetworkServer(${1:ServerID}, ${2:Port})$3'
  'CreateNode (#Node [, x, y, z]) - Create a new #Node.':
    'prefix': 'CreateNode'
    'body': 'CreateNode(${1:#Node})$2'
  'CreateNodeAnimation (#NodeAnimation, NodeID, Length, Interpolation, RotationInterpolation) - Create a new #NodeAnimation.':
    'prefix': 'CreateNodeAnimation'
    'body': 'CreateNodeAnimation(${1:#NodeAnimation}, ${2:NodeID}, ${3:Length}, ${4:Interpolation})$5'
  'CreateNodeAnimationKeyFrame (#NodeAnimation, Time, x, y, z) - Create a new keyframe for the #NodeAnimation.':
    'prefix': 'CreateNodeAnimationKeyFrame'
    'body': 'CreateNodeAnimationKeyFrame(${1:#NodeAnimation}, ${2:Time}, ${3:x}, ${4:y})$5'
  'CreatePack (#Pack, Filename$ [, PluginID]) - Creates a new empty pack file.':
    'prefix': 'CreatePack'
    'body': 'CreatePack(${1:#Pack})$2'
  'CreateParticleEmitter (#ParticleEmitter, Width, Height, Depth, Type [, x, y, z]) - Create a new #ParticleEmitter at the given position.':
    'prefix': 'CreateParticleEmitter'
    'body': 'CreateParticleEmitter(${1:#ParticleEmitter}, ${2:Width}, ${3:Height}, ${4:Depth})$5'
  'CreatePlane (#Mesh, TileSizeX.f, TileSizeZ.f, TileCountX, TileCountZ, TextureRepeatCountX.f, TextureRepeatCountZ.f)':
    'prefix': 'CreatePlane'
    'body': 'CreatePlane(${1:#Mesh}, ${2:TileSizeX.f}, ${3:TileSizeZ.f}, ${4:TileCountX}, ${5:TileCountZ}, ${6:TextureRepeatCountX.f})$7'
  'CreatePopupImageMenu (#Menu [, Flags]) - Creates a new empty popup menu with images support.':
    'prefix': 'CreatePopupImageMenu'
    'body': 'CreatePopupImageMenu(${1:#Menu})$2'
  'CreatePopupMenu (#Menu) - Creates a new empty popup menu.':
    'prefix': 'CreatePopupMenu'
    'body': 'CreatePopupMenu(${1:#Menu})$2'
  'CreatePreferences (Filename$ [, Flags]) - Creates a new empty preference file.':
    'prefix': 'CreatePreferences'
    'body': 'CreatePreferences(${1:Filename.s})$2'
  'CreateRegularExpression (#RegularExpression, Pattern$ [, Flags]) - Create a new regular expression.':
    'prefix': 'CreateRegularExpression'
    'body': 'CreateRegularExpression(${1:#RegularExpression})$2'
  'CreateRenderTexture (#Texture, CameraID, Width, Height [, Flags [, RenderTextureName$]]) - Create a new render #Texture.':
    'prefix': 'CreateRenderTexture'
    'body': 'CreateRenderTexture(${1:#Texture}, ${2:CameraID}, ${3:Width})$4'
  'CreateRibbonEffect (#Effect, MaterialID, NbChains, NbElements, Length)':
    'prefix': 'CreateRibbonEffect'
    'body': 'CreateRibbonEffect(${1:#Effect}, ${2:MaterialID}, ${3:NbChains}, ${4:NbElements})$5'
  'CreateSemaphore ([InitialCount]) - Create a new semaphore syncronisation object.':
    'prefix': 'CreateSemaphore'
    'body': 'CreateSemaphore()$1'
  'CreateSphere (#Mesh, Radius.f [, NbSegments, Rings])':
    'prefix': 'CreateSphere'
    'body': 'CreateSphere(${1:#Mesh})$2'
  'CreateSpline (#Spline) - Create a new empty #Spline':
    'prefix': 'CreateSpline'
    'body': 'CreateSpline(${1:#Spline})$2'
  'CreateSprite (#Sprite, Width, Height [, Mode]) - Create a new blank sprite.':
    'prefix': 'CreateSprite'
    'body': 'CreateSprite(${1:#Sprite}, ${2:Width})$3'
  'CreateStaticGeometry (#StaticGeometry, Width, Height, Length, EnableShadows)':
    'prefix': 'CreateStaticGeometry'
    'body': 'CreateStaticGeometry(${1:#StaticGeometry}, ${2:Width}, ${3:Height}, ${4:Length})$5'
  'CreateStatusBar (#StatusBar, WindowID) - Create and add an empty StatusBar to the specified WindowID.':
    'prefix': 'CreateStatusBar'
    'body': 'CreateStatusBar(${1:#StatusBar})$2'
  'CreateTerrain (#Terrain, Size, WorldSize, Scale, NbLayers, Filename$, Extension$) - Create a new #Terrain.':
    'prefix': 'CreateTerrain'
    'body': 'CreateTerrain(${1:#Terrain}, ${2:Size}, ${3:WorldSize}, ${4:Scale}, ${5:NbLayers}, ${6:Filename.s})$7'
  'CreateTerrainBody (#Terrain, Restitution, Friction) - Add a static physic body to the #Terrain.':
    'prefix': 'CreateTerrainBody'
    'body': 'CreateTerrainBody(${1:#Terrain}, ${2:Restitution})$3'
  'CreateText3D (#Text3D, Caption$ [, Font$, Scale, Color])':
    'prefix': 'CreateText3D'
    'body': 'CreateText3D(${1:#Text3D})$2'
  'CreateTexture (#Texture, Width, Height) - Create a new blank #Texture.':
    'prefix': 'CreateTexture'
    'body': 'CreateTexture(${1:#Texture}, ${2:Width})$3'
  'CreateThread (@Procedure(), Parameter) - Create a new thread running in the application background.':
    'prefix': 'CreateThread'
    'body': 'CreateThread(${1:@Procedure()})$2'
  'CreateToolBar (#ToolBar, WindowID) - Create an empty toolbar identified by the number \'#ToolBar\'.':
    'prefix': 'CreateToolBar'
    'body': 'CreateToolBar(${1:#ToolBar})$2'
  'CreateVertexAnimation (#Mesh, Animation$, Length) - Create a new vertex animation for the #mesh.':
    'prefix': 'CreateVertexAnimation'
    'body': 'CreateVertexAnimation(${1:#Mesh}, ${2:Animation.s})$3'
  'CreateVertexPoseKeyFrame (#Mesh, Animation$, Track, Time) - Create a new keyframe to the #Mesh track.':
    'prefix': 'CreateVertexPoseKeyFrame'
    'body': 'CreateVertexPoseKeyFrame(${1:#Mesh}, ${2:Animation.s}, ${3:Track})$4'
  'CreateVertexTrack (#Mesh, Animation$, Index) - Create a new track to the #Mesh animation.':
    'prefix': 'CreateVertexTrack'
    'body': 'CreateVertexTrack(${1:#Mesh}, ${2:Animation.s})$3'
  'CreateWater (#Camera, x, y, z, Transparency, Flags) - Create a water plane at the given position':
    'prefix': 'CreateWater'
    'body': 'CreateWater(${1:#Camera}, ${2:x}, ${3:y}, ${4:z}, ${5:Transparency})$6'
  'CreateXML (#XML [, Encoding]) - Create a new empty XML tree':
    'prefix': 'CreateXML'
    'body': 'CreateXML(${1:#XML})$2'
  'CreateXMLNode (ParentNode, Name$ [, PreviousNode [, Type]]) - Create a new node inside the XML tree':
    'prefix': 'CreateXMLNode'
    'body': 'CreateXMLNode(${1:ParentNode})$2'
  'CryptRandom (Maximum) - Get a number from the cryptographic random number generator.':
    'prefix': 'CryptRandom'
    'body': 'CryptRandom(${1:Maximum})$2'
  'CryptRandomData (*Buffer, Length) - Fill a buffer with data from the cryptographic random number generator.':
    'prefix': 'CryptRandomData'
    'body': 'CryptRandomData(${1:*Buffer})$2'
  'CustomDashPath (Width.d, Array.d() [, Flags [, StartOffset.d]]) - Draw a dashed line with custom dash lengths along the vector drawing path':
    'prefix': 'CustomDashPath'
    'body': 'CustomDashPath(${1:Width.d})$2'
  'CustomFilterCallback (@Callback()) - Set a callback for the #PB_2DDrawing_CustomFilter mode.':
    'prefix': 'CustomFilterCallback'
    'body': 'CustomFilterCallback(${1:@Callback()})$2'
  'CustomGradient (@Callback()) - Use a callback procedure to define the gradient if gradient drawing is enabled.':
    'prefix': 'CustomGradient'
    'body': 'CustomGradient(${1:@Callback()})$2'
  'DashPath (Width.d, Length.d [, Flags [, StartOffset.d]]) - Draw an evenly dashed line along the vector drawing path':
    'prefix': 'DashPath'
    'body': 'DashPath(${1:Width.d})$2'
  'DatabaseColumnIndex (#Database, ColumnName$) - Returns the zero-based index of the specified column name.':
    'prefix': 'DatabaseColumnIndex'
    'body': 'DatabaseColumnIndex(${1:#Database})$2'
  'DatabaseColumnName (#Database, Column) - Returns the name of the specified column.':
    'prefix': 'DatabaseColumnName'
    'body': 'DatabaseColumnName(${1:#Database})$2'
  'DatabaseColumns (#Database) - Returns the numbers of columns (fields) in the specified opened database.':
    'prefix': 'DatabaseColumns'
    'body': 'DatabaseColumns(${1:#Database})$2'
  'DatabaseColumnSize (#Database, Column) - Returns the type of the specified column.':
    'prefix': 'DatabaseColumnSize'
    'body': 'DatabaseColumnSize(${1:#Database})$2'
  'DatabaseColumnType (#Database, Column) - Returns the type of the specified column.':
    'prefix': 'DatabaseColumnType'
    'body': 'DatabaseColumnType(${1:#Database})$2'
  'DatabaseDriverDescription () - Returns the description of the current databaser driver.':
    'prefix': 'DatabaseDriverDescription'
    'body': 'DatabaseDriverDescription()$1'
  'DatabaseDriverName () - Returns the name of the current databaser driver.':
    'prefix': 'DatabaseDriverName'
    'body': 'DatabaseDriverName()$1'
  'DatabaseError () - Returns last error (if any) in human readable form.':
    'prefix': 'DatabaseError'
    'body': 'DatabaseError()$1'
  'DatabaseID (#Database) - Returns the database handle for direct access with the related API.':
    'prefix': 'DatabaseID'
    'body': 'DatabaseID(${1:#Database})$2'
  'DatabaseQuery (#Database, Request$ [, Flags]) - Executes the SQL Request$ on the specified database.':
    'prefix': 'DatabaseQuery'
    'body': 'DatabaseQuery(${1:#Database})$2'
  'DatabaseUpdate (#Database, Request$) - Executes the SQL Request$ on the specified database (update mode).':
    'prefix': 'DatabaseUpdate'
    'body': 'DatabaseUpdate(${1:#Database})$2'
  'Date ([Year, Month, Day, Hour, Minute, Second]) - Returns the number of seconds ellapsed since the 1st January 1970':
    'prefix': 'Date'
    'body': 'Date()$1'
  'DateGadget (#Gadget, x, y, Width, Height [, Mask$ [, Date [, Flags]]]) - Create a Date/Time selector Gadget':
    'prefix': 'DateGadget'
    'body': 'DateGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'Day (Date) - Returns the day value of the specified date (between 1 and 31).':
    'prefix': 'Day'
    'body': 'Day(${1:Date})$2'
  'DayOfWeek (Date) - Returns the day value in the week of the specified date (0=Sunday, 6=Saturday).':
    'prefix': 'DayOfWeek'
    'body': 'DayOfWeek(${1:Date})$2'
  'DayOfYear (Date) - Returns the number of days ellapsed since the beginning of the year of the specified date (betwenn 1 and 366).':
    'prefix': 'DayOfYear'
    'body': 'DayOfYear(${1:Date})$2'
  'DefaultPrinter () - Use the default printer to print.':
    'prefix': 'DefaultPrinter'
    'body': 'DefaultPrinter()$1'
  'DefineTerrainTile (#Terrain, TileX, TileY, HeightMap$, FlipX, FlipY) - Defines a new #Terrain tile.':
    'prefix': 'DefineTerrainTile'
    'body': 'DefineTerrainTile(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:HeightMap.s}, ${5:FlipX})$6'
  'Degree (Angle) - Converts the given angle from radian to degree.':
    'prefix': 'Degree'
    'body': 'Degree(${1:Angle})$2'
  'Delay (Time) - Waits the specified time (in milliseconds)':
    'prefix': 'Delay'
    'body': 'Delay(${1:Time})$2'
  'DeleteDirectory (SourceDirectory$, Pattern$ [, Flags]) - Delete the directory.':
    'prefix': 'DeleteDirectory'
    'body': 'DeleteDirectory(${1:SourceDirectory.s})$2'
  'DeleteElement (List() [, Flags]) - Remove the current element from the list.':
    'prefix': 'DeleteElement'
    'body': 'DeleteElement(${1:List()})$2'
  'DeleteFile (FileName$ [, Flags]) - Delete the specified file.':
    'prefix': 'DeleteFile'
    'body': 'DeleteFile(${1:FileName.s})$2'
  'DeleteFTPDirectory (#Ftp, Directory$) - Delete a directory on the FTP server.':
    'prefix': 'DeleteFTPDirectory'
    'body': 'DeleteFTPDirectory(${1:#Ftp})$2'
  'DeleteFTPFile (#Ftp, Filename$) - Delete a file on the FTP server.':
    'prefix': 'DeleteFTPFile'
    'body': 'DeleteFTPFile(${1:#Ftp})$2'
  'DeleteMapElement (Map() [, Key$]) - Remove the current element from the map.':
    'prefix': 'DeleteMapElement'
    'body': 'DeleteMapElement(${1:Map()})$2'
  'DeleteXMLNode (Node) - Delete the given XML node and all its childs from its XML tree':
    'prefix': 'DeleteXMLNode'
    'body': 'DeleteXMLNode(${1:Node})$2'
  'DESFingerprint (Password$, Key$) - Returns the 13 characters DES (Unix Crypt: Salt2) hash code.':
    'prefix': 'DESFingerprint'
    'body': 'DESFingerprint(${1:Password.s})$2'
  'DesktopDepth (#Desktop) - Returns the depth (bits per pixels) of the specified desktop.':
    'prefix': 'DesktopDepth'
    'body': 'DesktopDepth(${1:#Desktop})$2'
  'DesktopFrequency (#Desktop) - Returns the frenquency (in Hz) of the specified desktop.':
    'prefix': 'DesktopFrequency'
    'body': 'DesktopFrequency(${1:#Desktop})$2'
  'DesktopHeight (#Desktop) - Returns the height (in pixels) of the specified desktop.':
    'prefix': 'DesktopHeight'
    'body': 'DesktopHeight(${1:#Desktop})$2'
  'DesktopMouseX () - Returns the absolute x mouse position.':
    'prefix': 'DesktopMouseX'
    'body': 'DesktopMouseX()$1'
  'DesktopMouseY () - Returns the absolute y mouse position.':
    'prefix': 'DesktopMouseY'
    'body': 'DesktopMouseY()$1'
  'DesktopName (#Desktop) - Returns the system name of the specified desktop, if any.':
    'prefix': 'DesktopName'
    'body': 'DesktopName(${1:#Desktop})$2'
  'DesktopWidth (#Desktop) - Returns the width (in pixels) of the specified desktop.':
    'prefix': 'DesktopWidth'
    'body': 'DesktopWidth(${1:#Desktop})$2'
  'DesktopX (#Desktop) - Returns X coordinate of the upper right desktop corner.':
    'prefix': 'DesktopX'
    'body': 'DesktopX(${1:#Desktop})$2'
  'DesktopY (#Desktop) - Returns Y coordinate of the upper right desktop corner.':
    'prefix': 'DesktopY'
    'body': 'DesktopY(${1:#Desktop})$2'
  'DetachEntityObject (#Entity, ObjectID) - Detach the object from the #Entity.':
    'prefix': 'DetachEntityObject'
    'body': 'DetachEntityObject(${1:#Entity})$2'
  'DetachNodeObject (#Node, ObjectID) - Detach the object of the #Node.':
    'prefix': 'DetachNodeObject'
    'body': 'DetachNodeObject(${1:#Node})$2'
  'DetachRibbonEffect (#Effect, NodeID) - Detach the ribbon #Effect from the node.':
    'prefix': 'DetachRibbonEffect'
    'body': 'DetachRibbonEffect(${1:#Effect})$2'
  'DialogError (#Dialog) - Returns the error occured in the #Dialog creation.':
    'prefix': 'DialogError'
    'body': 'DialogError(${1:#Dialog})$2'
  'DialogGadget (#Dialog, Name$) - Returns the specified #Gadget associated with the dialog.':
    'prefix': 'DialogGadget'
    'body': 'DialogGadget(${1:#Dialog})$2'
  'DialogID (#Dialog) - Returns the unique ID which identifies the dialog in the operating system.':
    'prefix': 'DialogID'
    'body': 'DialogID(${1:#Dialog})$2'
  'DialogWindow (#Dialog) - Returns the #Window associated with the dialog.':
    'prefix': 'DialogWindow'
    'body': 'DialogWindow(${1:#Dialog})$2'
  'DirectoryEntryAttributes (#Directory) - Return the attributes of the current entry in the directory.':
    'prefix': 'DirectoryEntryAttributes'
    'body': 'DirectoryEntryAttributes(${1:#Directory})$2'
  'DirectoryEntryDate (#Directory, Type) - Return the modified/created/accessed date of the current entry in the directory.':
    'prefix': 'DirectoryEntryDate'
    'body': 'DirectoryEntryDate(${1:#Directory})$2'
  'DirectoryEntryName (#Directory) - Return the name of the current entry in the directory.':
    'prefix': 'DirectoryEntryName'
    'body': 'DirectoryEntryName(${1:#Directory})$2'
  'DirectoryEntrySize (#Directory) - Return the size of the current entry in the directory.':
    'prefix': 'DirectoryEntrySize'
    'body': 'DirectoryEntrySize(${1:#Directory})$2'
  'DirectoryEntryType (#Directory) - Return the type of the current entry in the directory.':
    'prefix': 'DirectoryEntryType'
    'body': 'DirectoryEntryType(${1:#Directory})$2'
  'DisableEntityBody (#Entity, Disable) - Disable the #Entity body, so the physics are ignored.':
    'prefix': 'DisableEntityBody'
    'body': 'DisableEntityBody(${1:#Entity})$2'
  'DisableGadget (#Gadget, State) - Disable or enable a gadget.':
    'prefix': 'DisableGadget'
    'body': 'DisableGadget(${1:#Gadget})$2'
  'DisableGadget3D (#Gadget3D, State) - Disable or enable a gadget.':
    'prefix': 'DisableGadget3D'
    'body': 'DisableGadget3D(${1:#Gadget3D})$2'
  'DisableLightShadows (#Light, Disable)':
    'prefix': 'DisableLightShadows'
    'body': 'DisableLightShadows(${1:#Light})$2'
  'DisableMaterialLighting (#Material, Disable) - Disable the dynamic lighting on the #Material.':
    'prefix': 'DisableMaterialLighting'
    'body': 'DisableMaterialLighting(${1:#Material})$2'
  'DisableMenuItem (#Menu, MenuItem, State) - Disable or enable a menu item.':
    'prefix': 'DisableMenuItem'
    'body': 'DisableMenuItem(${1:#Menu}, ${2:MenuItem})$3'
  'DisableParticleEmitter (#ParticleEmitter, State) - Disable or enable a particle emitter.':
    'prefix': 'DisableParticleEmitter'
    'body': 'DisableParticleEmitter(${1:#ParticleEmitter})$2'
  'DisableToolBarButton (#ToolBar, ButtonID, State) - Disable or enable the given toolbar button (1=Disable, 0=Enable).':
    'prefix': 'DisableToolBarButton'
    'body': 'DisableToolBarButton(${1:#ToolBar}, ${2:ButtonID})$3'
  'DisableWindow (#Window, State) - Disable all user input to the window.':
    'prefix': 'DisableWindow'
    'body': 'DisableWindow(${1:#Window})$2'
  'DisableWindow3D (#Window3D, State) - Disable all user input to the window.':
    'prefix': 'DisableWindow3D'
    'body': 'DisableWindow3D(${1:#Window3D})$2'
  'DisplayPopupMenu (#Menu, WindowID() [, x, y]) - Display a previously created #PopupMenu.':
    'prefix': 'DisplayPopupMenu'
    'body': 'DisplayPopupMenu(${1:#Menu})$2'
  'DisplaySprite (#Sprite, x, y) - Display the #Sprite at the specified position on the current sprite buffer.':
    'prefix': 'DisplaySprite'
    'body': 'DisplaySprite(${1:#Sprite}, ${2:x})$3'
  'DisplayTransparentSprite (#Sprite, x, y [, Intensity [, Color]]) - Display the #Sprite at the specified position on the current screen.':
    'prefix': 'DisplayTransparentSprite'
    'body': 'DisplayTransparentSprite(${1:#Sprite}, ${2:x})$3'
  'DotPath (Width.d, Distance.d [, Flags [, StartOffset.d]]) - Draw a dotted line along the vector drawing path':
    'prefix': 'DotPath'
    'body': 'DotPath(${1:Width.d})$2'
  'DoubleClickTime () - Returns the systen setting for the double-click time in milliseconds.':
    'prefix': 'DoubleClickTime'
    'body': 'DoubleClickTime()$1'
  'DragFiles (Files$ [, Actions]) - Start a Drag and Drop operation with a list of Files.':
    'prefix': 'DragFiles'
    'body': 'DragFiles(${1:Files.s})$2'
  'DragImage (ImageID [, Actions]) - Start a Drag and Drop operation with the given Image.':
    'prefix': 'DragImage'
    'body': 'DragImage(${1:ImageID})$2'
  'DragOSFormats (Formats(), Count [, Actions]) - Start a Drag and Drop operation with multiple clipboard formats.':
    'prefix': 'DragOSFormats'
    'body': 'DragOSFormats(${1:Formats()})$2'
  'DragPrivate (Type [, Actions]) - Start a Drag and Drop operation within the current program only with the given private type.':
    'prefix': 'DragPrivate'
    'body': 'DragPrivate(${1:Type})$2'
  'DragText (Text$ [, Actions]) - Start a Drag and Drop operation with the given Text.':
    'prefix': 'DragText'
    'body': 'DragText(${1:Text.s})$2'
  'DrawAlphaImage (ImageID, x, y [, Alpha]) - Display the image on the current output, using the alpha information.':
    'prefix': 'DrawAlphaImage'
    'body': 'DrawAlphaImage(${1:ImageID}, ${2:x})$3'
  'DrawImage (ImageID, x, y [, Width, Height]) - Display the image on the current output. On the fly resize is possible.':
    'prefix': 'DrawImage'
    'body': 'DrawImage(${1:ImageID}, ${2:x})$3'
  'DrawingBuffer () - Returns the current drawing memory buffer.':
    'prefix': 'DrawingBuffer'
    'body': 'DrawingBuffer()$1'
  'DrawingBufferPitch () - Returns the number of bytes need for a full line.':
    'prefix': 'DrawingBufferPitch'
    'body': 'DrawingBufferPitch()$1'
  'DrawingBufferPixelFormat () - Returns the pixel format of the current drawing buffer.':
    'prefix': 'DrawingBufferPixelFormat'
    'body': 'DrawingBufferPixelFormat()$1'
  'DrawingFont (FontID()) - Sets the current font to given FontID.':
    'prefix': 'DrawingFont'
    'body': 'DrawingFont(${1:FontID()})$2'
  'DrawingMode (Mode) - Change the drawing mode for graphic and text output':
    'prefix': 'DrawingMode'
    'body': 'DrawingMode(${1:Mode})$2'
  'DrawRotatedText (x, y, Text$, Angle.f [, Color]) - Display the given string at the given angle.':
    'prefix': 'DrawRotatedText'
    'body': 'DrawRotatedText(${1:x}, ${2:y}, ${3:Text.s})$4'
  'DrawText (x, y, Text$ [, FrontColor [, BackColor]]) - Display the given string on the current output.':
    'prefix': 'DrawText'
    'body': 'DrawText(${1:x}, ${2:y})$3'
  'DrawVectorImage (ImageID [, Alpha [, Width.d, Height.d]]) - Draw an image to the vector output':
    'prefix': 'DrawVectorImage'
    'body': 'DrawVectorImage(${1:ImageID})$2'
  'DrawVectorParagraph (Text$, Width.d, Height.d [, Flags]) - Draw a paragraph of text inside a bounding box':
    'prefix': 'DrawVectorParagraph'
    'body': 'DrawVectorParagraph(${1:Text.s}, ${2:Width.d})$3'
  'DrawVectorText (Text$) - Draw text directly to the vector drawing output':
    'prefix': 'DrawVectorText'
    'body': 'DrawVectorText(${1:Text.s})$2'
  'EditorGadget (#Gadget, x, y, Width, Height [, Flags]) - Create an Editor gadget in the current GadgetList.':
    'prefix': 'EditorGadget'
    'body': 'EditorGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'EditorGadget3D (#Gadget3D, x, y, Width, Height [, Flags]) - Create an Editor gadget in the current GadgetList.':
    'prefix': 'EditorGadget3D'
    'body': 'EditorGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5'
  'EjectAudioCD (State) - Eject (open) or close the current CD-Drive.':
    'prefix': 'EjectAudioCD'
    'body': 'EjectAudioCD(${1:State})$2'
  'ElapsedMilliseconds () - Returns the number of milliseconds elapsed since the computer start.':
    'prefix': 'ElapsedMilliseconds'
    'body': 'ElapsedMilliseconds()$1'
  'Ellipse (x, y, RadiusX, RadiusY [, Color]) - Draw a filled ellipse on the current output.':
    'prefix': 'Ellipse'
    'body': 'Ellipse(${1:x}, ${2:y}, ${3:RadiusX})$4'
  'EllipticalGradient (x, y, RadiusX, RadiusY) - Use an elliptical gradient when gradient drawing is enabled.':
    'prefix': 'EllipticalGradient'
    'body': 'EllipticalGradient(${1:x}, ${2:y}, ${3:RadiusX})$4'
  'EnableGadgetDrop (#Gadget, Format, Actions [, PrivateType]) - Enable the Gadget as a Drag and Drop target for the given Format.':
    'prefix': 'EnableGadgetDrop'
    'body': 'EnableGadgetDrop(${1:#Gadget}, ${2:Format})$3'
  'EnableGraphicalConsole (State) - Enable or disable the graphical console.':
    'prefix': 'EnableGraphicalConsole'
    'body': 'EnableGraphicalConsole(${1:State})$2'
  'EnableHingeJointAngularMotor (#Joint, Enable, TargetVelocity, MaxMotorImpulse) - Enable the angular motor on the hinge #Joint.':
    'prefix': 'EnableHingeJointAngularMotor'
    'body': 'EnableHingeJointAngularMotor(${1:#Joint}, ${2:Enable}, ${3:TargetVelocity})$4'
  'EnableManualEntityBoneControl (#Entity, Bone$, State, InheritOrientation) - Enable the #Entity bone manual control.':
    'prefix': 'EnableManualEntityBoneControl'
    'body': 'EnableManualEntityBoneControl(${1:#Entity}, ${2:Bone.s}, ${3:State})$4'
  'EnableWindowDrop (#Window, Format, Actions [, PrivateType]) - Enable the Window as a Drag and Drop target for the given Format.':
    'prefix': 'EnableWindowDrop'
    'body': 'EnableWindowDrop(${1:#Window}, ${2:Format})$3'
  'EnableWorldCollisions (Enable) - Enable the world collisions':
    'prefix': 'EnableWorldCollisions'
    'body': 'EnableWorldCollisions(${1:Enable})$2'
  'EnableWorldPhysics (Enable) - Enable the world physics':
    'prefix': 'EnableWorldPhysics'
    'body': 'EnableWorldPhysics(${1:Enable})$2'
  'EncodeImage (#Image [, Format [, Flags [, Depth]]]) - Encode the specified image into memory.':
    'prefix': 'EncodeImage'
    'body': 'EncodeImage(${1:#Image})$2'
  'EndVectorLayer () - End a transparent layer for vector drawing':
    'prefix': 'EndVectorLayer'
    'body': 'EndVectorLayer()$1'
  'Engine3DStatus (Type) - Get the state of the 3D engine.':
    'prefix': 'Engine3DStatus'
    'body': 'Engine3DStatus(${1:Type})$2'
  'EntityAngularFactor (#Entity, x, y, z) - Change the angular factor of the #Entity.':
    'prefix': 'EntityAngularFactor'
    'body': 'EntityAngularFactor(${1:#Entity}, ${2:x}, ${3:y})$4'
  'EntityAnimationBlendMode (#Entity, Mode) - Change the entity blend mode.':
    'prefix': 'EntityAnimationBlendMode'
    'body': 'EntityAnimationBlendMode(${1:#Entity})$2'
  'EntityAnimationStatus (#Entity, Animation$) - Return the specified #Entity animation status.':
    'prefix': 'EntityAnimationStatus'
    'body': 'EntityAnimationStatus(${1:#Entity})$2'
  'EntityBonePitch (#Entity, Bone$) - Return the pitch of the bone, relative to the #Entity.':
    'prefix': 'EntityBonePitch'
    'body': 'EntityBonePitch(${1:#Entity})$2'
  'EntityBoneRoll (#Entity, Bone$) - Return the roll of the bone, relative to the #Entity.':
    'prefix': 'EntityBoneRoll'
    'body': 'EntityBoneRoll(${1:#Entity})$2'
  'EntityBoneX (#Entity, Bone$ [, OffsetX, OffsetY, OffsetZ]) - Return the x position of the bone, relative to the #Entity.':
    'prefix': 'EntityBoneX'
    'body': 'EntityBoneX(${1:#Entity})$2'
  'EntityBoneY (#Entity, Bone$ [, OffsetX, OffsetY, OffsetZ]) - Return the y position of the bone, relative to the #Entity.':
    'prefix': 'EntityBoneY'
    'body': 'EntityBoneY(${1:#Entity})$2'
  'EntityBoneYaw (#Entity, Bone$) - Return the yaw of the bone, relative to the #Entity.':
    'prefix': 'EntityBoneYaw'
    'body': 'EntityBoneYaw(${1:#Entity})$2'
  'EntityBoneZ (#Entity, Bone$ [, OffsetX, OffsetY, OffsetZ]) - Return the z position of the bone, relative to the #Entity.':
    'prefix': 'EntityBoneZ'
    'body': 'EntityBoneZ(${1:#Entity})$2'
  'EntityBoundingBox (#Entity, Flags) - Return the position of the #Entity bounding box.':
    'prefix': 'EntityBoundingBox'
    'body': 'EntityBoundingBox(${1:#Entity})$2'
  'EntityCollide (#Entity, #Entity2) - Test if the entities are colliding.':
    'prefix': 'EntityCollide'
    'body': 'EntityCollide(${1:#Entity})$2'
  'EntityCubeMapTexture (#Texture, #Entity) - Apply the cube map #Texture to the #Entity.':
    'prefix': 'EntityCubeMapTexture'
    'body': 'EntityCubeMapTexture(${1:#Texture})$2'
  'EntityCustomParameter (#Entity, SubEntityIndex, ParameterIndex, Value1, Value2, Value3, Value4) - Set a custom parameter to the #Entity shader script.':
    'prefix': 'EntityCustomParameter'
    'body': 'EntityCustomParameter(${1:#Entity}, ${2:SubEntityIndex}, ${3:ParameterIndex}, ${4:Value1}, ${5:Value2}, ${6:Value3})$7'
  'EntityFixedYawAxis (#Entity, Mode [, VectorX, VectorY, VectorZ]) - Change the way the yaw axis is managed.':
    'prefix': 'EntityFixedYawAxis'
    'body': 'EntityFixedYawAxis(${1:#Entity})$2'
  'EntityID (#Entity) - Return the unique #Entity system identifier.':
    'prefix': 'EntityID'
    'body': 'EntityID(${1:#Entity})$2'
  'EntityLinearFactor (#Entity, x, y, z) - Change the linear factor of the #Entity.':
    'prefix': 'EntityLinearFactor'
    'body': 'EntityLinearFactor(${1:#Entity}, ${2:x}, ${3:y})$4'
  'EntityLookAt (#Entity, x, y, z [, DirectionX, DirectionY, DirectionZ]) - Change the #Entity orientation to look at the specified point.':
    'prefix': 'EntityLookAt'
    'body': 'EntityLookAt(${1:#Entity}, ${2:x}, ${3:y})$4'
  'EntityMesh (#Entity, MeshID) - Change the #Entity mesh with the new one.':
    'prefix': 'EntityMesh'
    'body': 'EntityMesh(${1:#Entity})$2'
  'EntityParentNode (#Entity) - Return the parent #Entity node.':
    'prefix': 'EntityParentNode'
    'body': 'EntityParentNode(${1:#Entity})$2'
  'EntityPitch (#Entity [, Mode]) - Return the pitch of the #Entity.':
    'prefix': 'EntityPitch'
    'body': 'EntityPitch(${1:#Entity})$2'
  'EntityRenderMode (#Entity, Mode) - Change the way the #Entity will be rendered.':
    'prefix': 'EntityRenderMode'
    'body': 'EntityRenderMode(${1:#Entity})$2'
  'EntityRoll (#Entity [, Mode]) - Return the roll of the #Entity.':
    'prefix': 'EntityRoll'
    'body': 'EntityRoll(${1:#Entity})$2'
  'EntityVelocity (#Entity, x, y, z) - Change the linear velocity of the #Entity.':
    'prefix': 'EntityVelocity'
    'body': 'EntityVelocity(${1:#Entity}, ${2:x}, ${3:y})$4'
  'EntityX (#Entity [, Mode]) - Return the x position of the #Entity.':
    'prefix': 'EntityX'
    'body': 'EntityX(${1:#Entity})$2'
  'EntityY (#Entity [, Mode]) - Return the y position of the #Entity.':
    'prefix': 'EntityY'
    'body': 'EntityY(${1:#Entity})$2'
  'EntityYaw (#Entity [, Mode]) - Return the yaw of the #Entity.':
    'prefix': 'EntityYaw'
    'body': 'EntityYaw(${1:#Entity})$2'
  'EntityZ (#Entity [, Mode]) - Return the z position of the #Entity.':
    'prefix': 'EntityZ'
    'body': 'EntityZ(${1:#Entity})$2'
  'EnvironmentVariableName () - Get the name of the currently examined environment variable':
    'prefix': 'EnvironmentVariableName'
    'body': 'EnvironmentVariableName()$1'
  'EnvironmentVariableValue () - Get the value of the currently examined environment variable':
    'prefix': 'EnvironmentVariableValue'
    'body': 'EnvironmentVariableValue()$1'
  'Eof (#File) - Returns not null if the end of file has been reached. 0 Else.':
    'prefix': 'Eof'
    'body': 'Eof(${1:#File})$2'
  'ErrorAddress () - get the Code address at which the error happened':
    'prefix': 'ErrorAddress'
    'body': 'ErrorAddress()$1'
  'ErrorCode () - Returns the current error code':
    'prefix': 'ErrorCode'
    'body': 'ErrorCode()$1'
  'ErrorFile () - Returns the source filename in which the current error occured':
    'prefix': 'ErrorFile'
    'body': 'ErrorFile()$1'
  'ErrorLine () - Returns the line number at which the current error occured':
    'prefix': 'ErrorLine'
    'body': 'ErrorLine()$1'
  'ErrorMessage ([ErrorNumber]) - Returns a string message for the current error or the given error number':
    'prefix': 'ErrorMessage'
    'body': 'ErrorMessage()$1'
  'ErrorRegister (Register) - get the content of a register at the time of the error':
    'prefix': 'ErrorRegister'
    'body': 'ErrorRegister(${1:Register})$2'
  'ErrorTargetAddress () - get the Memory address for a memory access error.':
    'prefix': 'ErrorTargetAddress'
    'body': 'ErrorTargetAddress()$1'
  'EscapeString (String [, Flags]) - Returns the escaped string.':
    'prefix': 'EscapeString'
    'body': 'EscapeString(${1:String})$2'
  'EventClient () - Server side: allow to know which client has sent the data.':
    'prefix': 'EventClient'
    'body': 'EventClient()$1'
  'EventData () - Returns the data associated to the event.':
    'prefix': 'EventData'
    'body': 'EventData()$1'
  'EventDropAction () - Return the action that is to be taken with the dropped data.':
    'prefix': 'EventDropAction'
    'body': 'EventDropAction()$1'
  'EventDropBuffer () - Return the raw memory buffer of the data received from a Drag and Drop event.':
    'prefix': 'EventDropBuffer'
    'body': 'EventDropBuffer()$1'
  'EventDropFiles () - Return the Filenames received from a Drag and Drop event.':
    'prefix': 'EventDropFiles'
    'body': 'EventDropFiles()$1'
  'EventDropImage (#Image [, Depth]) - Create a new Image from the data received from a Drag and Drop event.':
    'prefix': 'EventDropImage'
    'body': 'EventDropImage(${1:#Image})$2'
  'EventDropPrivate () - Return the type that was specified when starting a private Drag and Drop operation.':
    'prefix': 'EventDropPrivate'
    'body': 'EventDropPrivate()$1'
  'EventDropSize () - Return the size of the buffer of data received from a Drag and Drop event.':
    'prefix': 'EventDropSize'
    'body': 'EventDropSize()$1'
  'EventDropText () - Return the text received from a Drag and Drop event.':
    'prefix': 'EventDropText'
    'body': 'EventDropText()$1'
  'EventDropType () - Return the type of format that was received from the Drag and Drop event.':
    'prefix': 'EventDropType'
    'body': 'EventDropType()$1'
  'EventDropX () - Return the X position where the drop event took place in the gadget/window.':
    'prefix': 'EventDropX'
    'body': 'EventDropX()$1'
  'EventDropY () - Return the Y position where the drop event took place in the gadget/window.':
    'prefix': 'EventDropY'
    'body': 'EventDropY()$1'
  'EventGadget () - Returns which gadget has been pushed (return the #Gadget identifiant).':
    'prefix': 'EventGadget'
    'body': 'EventGadget()$1'
  'EventGadget3D () - Returns which gadget has been pushed (return the #Gadget3D number).':
    'prefix': 'EventGadget3D'
    'body': 'EventGadget3D()$1'
  'EventMenu () - Returns which menu item has been selected (return the #MenuItem identifiant).':
    'prefix': 'EventMenu'
    'body': 'EventMenu()$1'
  'EventServer () - Server side: allow to know on which server the data has been recieved.':
    'prefix': 'EventServer'
    'body': 'EventServer()$1'
  'EventTimer () - Returns the Timer that fired the event.':
    'prefix': 'EventTimer'
    'body': 'EventTimer()$1'
  'EventType () - After a WindowEvent() or WaitWindowEvent() command, use this function to determine of which type the event is.':
    'prefix': 'EventType'
    'body': 'EventType()$1'
  'EventType3D () - After a WindowEvent3D() command, use this function to determine of which type the event is.':
    'prefix': 'EventType3D'
    'body': 'EventType3D()$1'
  'EventWindow () - Returns on which window the event has occured (return the #Window identifiant).':
    'prefix': 'EventWindow'
    'body': 'EventWindow()$1'
  'EventWindow3D () - Returns on which window the event has occured (return the #Window3D number).':
    'prefix': 'EventWindow3D'
    'body': 'EventWindow3D()$1'
  'ExamineAssembly (*Address [, *EndAddress]) - Start disassembling code at the given address':
    'prefix': 'ExamineAssembly'
    'body': 'ExamineAssembly(${1:*Address})$2'
  'ExamineDatabaseDrivers () - Examines the installed database drivers available on the system.':
    'prefix': 'ExamineDatabaseDrivers'
    'body': 'ExamineDatabaseDrivers()$1'
  'ExamineDesktops () - Retrieves informations about user\'s desktops and returns the number of desktops.':
    'prefix': 'ExamineDesktops'
    'body': 'ExamineDesktops()$1'
  'ExamineDirectory (#Directory, DirectoryName$, Pattern$) - Start to examine the specified directory for future listing.':
    'prefix': 'ExamineDirectory'
    'body': 'ExamineDirectory(${1:#Directory}, ${2:DirectoryName.s})$3'
  'ExamineEnvironmentVariables () - Start examining the environment block':
    'prefix': 'ExamineEnvironmentVariables'
    'body': 'ExamineEnvironmentVariables()$1'
  'ExamineFTPDirectory (#Ftp) - Examine the current directory on the FTP server.':
    'prefix': 'ExamineFTPDirectory'
    'body': 'ExamineFTPDirectory(${1:#Ftp})$2'
  'ExamineIPAddresses ([Format]) - Start to examine the host current IPs.':
    'prefix': 'ExamineIPAddresses'
    'body': 'ExamineIPAddresses()$1'
  'ExamineJoystick (#Joystick) - Examine the current state of the #Joystick':
    'prefix': 'ExamineJoystick'
    'body': 'ExamineJoystick(${1:#Joystick})$2'
  'ExamineJSONMembers (*JSONValue) - Examine the members of a JSON object':
    'prefix': 'ExamineJSONMembers'
    'body': 'ExamineJSONMembers(${1:*JSONValue})$2'
  'ExamineKeyboard () - Update the keyboard state.':
    'prefix': 'ExamineKeyboard'
    'body': 'ExamineKeyboard()$1'
  'ExamineMouse () - Update the mouse state.':
    'prefix': 'ExamineMouse'
    'body': 'ExamineMouse()$1'
  'ExaminePack (#Pack) - Examine the pack content.':
    'prefix': 'ExaminePack'
    'body': 'ExaminePack(${1:#Pack})$2'
  'ExaminePreferenceGroups () - Start examining the groups in the preference file.':
    'prefix': 'ExaminePreferenceGroups'
    'body': 'ExaminePreferenceGroups()$1'
  'ExaminePreferenceKeys () - Start examining the keys in the current group of the preference file.':
    'prefix': 'ExaminePreferenceKeys'
    'body': 'ExaminePreferenceKeys()$1'
  'ExamineRegularExpression (#RegularExpression, String$) - Examine each match of the regular expression individually.':
    'prefix': 'ExamineRegularExpression'
    'body': 'ExamineRegularExpression(${1:#RegularExpression})$2'
  'ExamineScreenModes () - Examines all the available screen mode.':
    'prefix': 'ExamineScreenModes'
    'body': 'ExamineScreenModes()$1'
  'ExamineWorldCollisions (Contacts) - Start to examine the occured collisions in the world.':
    'prefix': 'ExamineWorldCollisions'
    'body': 'ExamineWorldCollisions(${1:Contacts})$2'
  'ExamineXMLAttributes (Node) - Examine the attribute list of the given XML node':
    'prefix': 'ExamineXMLAttributes'
    'body': 'ExamineXMLAttributes(${1:Node})$2'
  'Exp (Exponent) - Returns the e^Exponent.':
    'prefix': 'Exp'
    'body': 'Exp(${1:Exponent})$2'
  'ExplorerComboGadget (#Gadget, x, y, Width, Height, Directory$ [, Flags]) - Create a File/Directory Combo Gadget':
    'prefix': 'ExplorerComboGadget'
    'body': 'ExplorerComboGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'ExplorerListGadget (#Gadget, x, y, Width, Height, Directory$ [, Flags]) - Create a File/Directory List Gadget':
    'prefix': 'ExplorerListGadget'
    'body': 'ExplorerListGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'ExplorerTreeGadget (#Gadget, x, y, Width, Height, Directory$ [, Flags]) - Create a File/Directory Tree':
    'prefix': 'ExplorerTreeGadget'
    'body': 'ExplorerTreeGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'ExportJSON (#JSON, *Buffer, Size [, Flags]) - Export JSON data to a memory buffer':
    'prefix': 'ExportJSON'
    'body': 'ExportJSON(${1:#JSON}, ${2:*Buffer})$3'
  'ExportJSONSize (#JSON [, Flags]) - Get the size that JSON data needs for the ExportJSON() function':
    'prefix': 'ExportJSONSize'
    'body': 'ExportJSONSize(${1:#JSON})$2'
  'ExportXML (#XML, *Address, Size [, Flags]) - Export a XML tree to a memory buffer':
    'prefix': 'ExportXML'
    'body': 'ExportXML(${1:#XML}, ${2:*Address})$3'
  'ExportXMLSize (#XML [, Flags]) - Get the number of bytes required to export a XML tree':
    'prefix': 'ExportXMLSize'
    'body': 'ExportXMLSize(${1:#XML})$2'
  'ExtractJSONArray (*JSONValue, Array()) - Extract a JSON value into the specified Array()':
    'prefix': 'ExtractJSONArray'
    'body': 'ExtractJSONArray(${1:*JSONValue})$2'
  'ExtractJSONList (*JSONValue, List()) - Extract a JSON value into the specified List()':
    'prefix': 'ExtractJSONList'
    'body': 'ExtractJSONList(${1:*JSONValue})$2'
  'ExtractJSONMap (*JSONValue, Map()) - Extract a JSON value into the specified Map()':
    'prefix': 'ExtractJSONMap'
    'body': 'ExtractJSONMap(${1:*JSONValue})$2'
  'ExtractJSONStructure (*JSONValue, *Buffer, Structure) - Extract a JSON value into the specified structure':
    'prefix': 'ExtractJSONStructure'
    'body': 'ExtractJSONStructure(${1:*JSONValue}, ${2:*Buffer})$3'
  'ExtractRegularExpression (#RegularExpression, String$, Array$()) - Extract strings according to the regular expression into an array.':
    'prefix': 'ExtractRegularExpression'
    'body': 'ExtractRegularExpression(${1:#RegularExpression}, ${2:String.s})$3'
  'ExtractXMLArray (Node, Array() [, Flags]) - Extract an XML node into the specified Array()':
    'prefix': 'ExtractXMLArray'
    'body': 'ExtractXMLArray(${1:Node})$2'
  'ExtractXMLList (Node, List() [, Flags]) - Extract an XML node into the specified List()':
    'prefix': 'ExtractXMLList'
    'body': 'ExtractXMLList(${1:Node})$2'
  'ExtractXMLMap (Node, Map() [, Flags]) - Extract an XML node into the specified Map()':
    'prefix': 'ExtractXMLMap'
    'body': 'ExtractXMLMap(${1:Node})$2'
  'ExtractXMLStructure (Node, *Buffer, Structure [, Flags]) - Extract an XML node into the specified structure':
    'prefix': 'ExtractXMLStructure'
    'body': 'ExtractXMLStructure(${1:Node}, ${2:*Buffer})$3'
  'FetchEntityMaterial (#Entity, #Material, [, SubEntity]) - Fetch the #Entity material':
    'prefix': 'FetchEntityMaterial'
    'body': 'FetchEntityMaterial(${1:#Entity}, ${2:#Material})$3'
  'FetchOrientation (ObjectID [, Mode]) - Fetch the orientation for the specified object (use GetX(), GetY(), GetZ() and GetW() to get the values).':
    'prefix': 'FetchOrientation'
    'body': 'FetchOrientation(${1:ObjectID})$2'
  'FileBuffersSize (#File, Size) - Change the size of the buffers for the specified file.':
    'prefix': 'FileBuffersSize'
    'body': 'FileBuffersSize(${1:#File})$2'
  'FileFingerprint (Filename$ , Plugin [, Bits [, Offset [, Length]]]) - Returns the fingerprint of the file.':
    'prefix': 'FileFingerprint'
    'body': 'FileFingerprint(${1:Filename.s})$2'
  'FileID (#File) - Returns the unique ID which identifies the file in the operating system.':
    'prefix': 'FileID'
    'body': 'FileID(${1:#File})$2'
  'FileSeek (#File, NewPosition [, Mode]) - Change the read/write pointer position of the specified file.':
    'prefix': 'FileSeek'
    'body': 'FileSeek(${1:#File})$2'
  'FileSize (FileName$) - Return the size of the specified file.':
    'prefix': 'FileSize'
    'body': 'FileSize(${1:FileName.s})$2'
  'FillArea (x, y, OutlineColor [, FillColor]) - Fill a shape with the specified color.':
    'prefix': 'FillArea'
    'body': 'FillArea(${1:x}, ${2:y})$3'
  'FillMemory (Memory, Size [, Value [, Type]]) - Fill a memory area with the specified value.':
    'prefix': 'FillMemory'
    'body': 'FillMemory(${1:Memory})$2'
  'FillPath ([Flags]) - Fill the area defined by the vector drawing path':
    'prefix': 'FillPath'
    'body': 'FillPath()$1'
  'FillVectorOutput () - Fill the entire vector drawing output with the drawing source':
    'prefix': 'FillVectorOutput'
    'body': 'FillVectorOutput()$1'
  'FindMapElement (Map(), Key$) - Find the specified element in the map.':
    'prefix': 'FindMapElement'
    'body': 'FindMapElement(${1:Map()})$2'
  'FindString (String$, StringToFind$ [, StartPosition [, Mode]]) - Returns the Position of StringToFind$.':
    'prefix': 'FindString'
    'body': 'FindString(${1:String.s})$2'
  'Fingerprint (*Buffer, Size, Plugin [, Bits]) - Returns the fingerprint of the specified buffer.':
    'prefix': 'Fingerprint'
    'body': 'Fingerprint(${1:*Buffer}, ${2:Size})$3'
  'FinishCipher (#Cipher) - Free all the resources allocated by the #Cipher.':
    'prefix': 'FinishCipher'
    'body': 'FinishCipher(${1:#Cipher})$2'
  'FinishDatabaseQuery (#Database) - Finish a database query and release associated memory.':
    'prefix': 'FinishDatabaseQuery'
    'body': 'FinishDatabaseQuery(${1:#Database})$2'
  'FinishDirectory (#Directory) - Finish the examine of the directory.':
    'prefix': 'FinishDirectory'
    'body': 'FinishDirectory(${1:#Directory})$2'
  'FinishFastCGIRequest () - Finish the current FastCGI request.':
    'prefix': 'FinishFastCGIRequest'
    'body': 'FinishFastCGIRequest()$1'
  'FinishFingerprint (#Fingerprint) - Returns the calculated fingerprint string and frees all resources.':
    'prefix': 'FinishFingerprint'
    'body': 'FinishFingerprint(${1:#Fingerprint})$2'
  'FinishFTPDirectory (#Ftp) - Free the data allocated with ExamineFTPDirectory.':
    'prefix': 'FinishFTPDirectory'
    'body': 'FinishFTPDirectory(${1:#Ftp})$2'
  'FinishHTTP (HttpConnection) - Release the resources of the specified HTTP connection.':
    'prefix': 'FinishHTTP'
    'body': 'FinishHTTP(${1:HttpConnection})$2'
  'FinishMesh (Type)':
    'prefix': 'FinishMesh'
    'body': 'FinishMesh(${1:Type})$2'
  'FirstDatabaseRow (#Database) - Retrieves information about the first database row.':
    'prefix': 'FirstDatabaseRow'
    'body': 'FirstDatabaseRow(${1:#Database})$2'
  'FirstElement (List()) - Changes the current list element to the first list element.':
    'prefix': 'FirstElement'
    'body': 'FirstElement(${1:List()})$2'
  'FirstWorldCollisionEntity () - First entity of the current collision.':
    'prefix': 'FirstWorldCollisionEntity'
    'body': 'FirstWorldCollisionEntity()$1'
  'FlipBuffers () - Flip the back and front buffer on the current screen.':
    'prefix': 'FlipBuffers'
    'body': 'FlipBuffers()$1'
  'FlipCoordinatesX (AxisX.d [, System]) - Flip the X coordinates of the vector drawing coordinate system along an axis':
    'prefix': 'FlipCoordinatesX'
    'body': 'FlipCoordinatesX(${1:AxisX.d})$2'
  'FlipCoordinatesY (AxisY.d [, System]) - Flip the Y coordinates of the vector drawing coordinate system along an axis':
    'prefix': 'FlipCoordinatesY'
    'body': 'FlipCoordinatesY(${1:AxisY.d})$2'
  'FlushFileBuffers (#File) - Forces the write of the internal file buffer to the disk.':
    'prefix': 'FlushFileBuffers'
    'body': 'FlushFileBuffers(${1:#File})$2'
  'FlushPreferenceBuffers () - Write the current preferences to disk.':
    'prefix': 'FlushPreferenceBuffers'
    'body': 'FlushPreferenceBuffers()$1'
  'Fog (Color, Intensity, StartDistance, EndDistance) - Display a fog effect':
    'prefix': 'Fog'
    'body': 'Fog(${1:Color}, ${2:Intensity}, ${3:StartDistance})$4'
  'FontID (#Font) - Returns the unique ID which identifies the font in the operating system.':
    'prefix': 'FontID'
    'body': 'FontID(${1:#Font})$2'
  'FontRequester (FontName$, FontSize, Flags [, Color, [Style]]) - Open the standard requester to choose a font.':
    'prefix': 'FontRequester'
    'body': 'FontRequester(${1:FontName.s}, ${2:FontSize})$3'
  'FormatDate (Mask$, Date) - Returns a string representation of the Date, according to the specified Mask$.':
    'prefix': 'FormatDate'
    'body': 'FormatDate(${1:Mask.s})$2'
  'FormatXML (#XML, Flags [, IndentStep]) - Clean up the XML for a better look':
    'prefix': 'FormatXML'
    'body': 'FormatXML(${1:#XML})$2'
  'FrameGadget (#Gadget, x, y, Width, Height, Text$ [, Flags]) - Creates a frame gadget in the current GadgetList.':
    'prefix': 'FrameGadget'
    'body': 'FrameGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'FrameGadget3D (#Gadget3D, x, y, Width, Height, Text$) - Creates a Frame3D gadget in the current GadgetList.':
    'prefix': 'FrameGadget3D'
    'body': 'FrameGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'FreeArray (Array()) - Free the array. \'Dim\' has to be called to use it again.':
    'prefix': 'FreeArray'
    'body': 'FreeArray(${1:Array()})$2'
  'FreeBillboardGroup (#BillboardGroup) - Free the specified #BillboardGroup and all its billboards.':
    'prefix': 'FreeBillboardGroup'
    'body': 'FreeBillboardGroup(${1:#BillboardGroup})$2'
  'FreeCamera (#Camera) - Free the specified #Camera.':
    'prefix': 'FreeCamera'
    'body': 'FreeCamera(${1:#Camera})$2'
  'FreeDialog (#Dialog) - Frees the specified dialog.':
    'prefix': 'FreeDialog'
    'body': 'FreeDialog(${1:#Dialog})$2'
  'FreeEffect (#Effect) - Free the specified #Effect.':
    'prefix': 'FreeEffect'
    'body': 'FreeEffect(${1:#Effect})$2'
  'FreeEntity (#Entity) - Free the specified #Entity.':
    'prefix': 'FreeEntity'
    'body': 'FreeEntity(${1:#Entity})$2'
  'FreeEntityBody (#Entity) - Free the body associated with the #Entity.':
    'prefix': 'FreeEntityBody'
    'body': 'FreeEntityBody(${1:#Entity})$2'
  'FreeEntityJoints (#Entity) - Free all joints associated with the #Entity.':
    'prefix': 'FreeEntityJoints'
    'body': 'FreeEntityJoints(${1:#Entity})$2'
  'FreeFont (#Font) - Close the given Font.':
    'prefix': 'FreeFont'
    'body': 'FreeFont(${1:#Font})$2'
  'FreeGadget (#Gadget) - Free (remove) the #Gadget.':
    'prefix': 'FreeGadget'
    'body': 'FreeGadget(${1:#Gadget})$2'
  'FreeGadget3D (#Gadget3D) - Free (remove) the #Gadget3D.':
    'prefix': 'FreeGadget3D'
    'body': 'FreeGadget3D(${1:#Gadget3D})$2'
  'FreeImage (#Image) - Free the specified #Image and release its associated memory.':
    'prefix': 'FreeImage'
    'body': 'FreeImage(${1:#Image})$2'
  'FreeIP (IP) - Free the IPv6.':
    'prefix': 'FreeIP'
    'body': 'FreeIP(${1:IP})$2'
  'FreeJoint (#Joint)':
    'prefix': 'FreeJoint'
    'body': 'FreeJoint(${1:#Joint})$2'
  'FreeJSON (#JSON) - Free JSON data':
    'prefix': 'FreeJSON'
    'body': 'FreeJSON(${1:#JSON})$2'
  'FreeLight (#Light) - Free the specified #Light.':
    'prefix': 'FreeLight'
    'body': 'FreeLight(${1:#Light})$2'
  'FreeList (List()) - Free the list. \'NewList\' has to be called to use it again.':
    'prefix': 'FreeList'
    'body': 'FreeList(${1:List()})$2'
  'FreeMail (#Mail) - Frees the previously created mail.':
    'prefix': 'FreeMail'
    'body': 'FreeMail(${1:#Mail})$2'
  'FreeMap (Map()) - Free the map. \'NewMap\' has to be called to use it again.':
    'prefix': 'FreeMap'
    'body': 'FreeMap(${1:Map()})$2'
  'FreeMaterial (#Material) - Free the specified #Material.':
    'prefix': 'FreeMaterial'
    'body': 'FreeMaterial(${1:#Material})$2'
  'FreeMemory (Memory) - Free the specified memory buffer.':
    'prefix': 'FreeMemory'
    'body': 'FreeMemory(${1:Memory})$2'
  'FreeMenu (#Menu) - Remove the specified menu from memory.':
    'prefix': 'FreeMenu'
    'body': 'FreeMenu(${1:#Menu})$2'
  'FreeMesh (#Mesh) - Free the specified #Mesh.':
    'prefix': 'FreeMesh'
    'body': 'FreeMesh(${1:#Mesh})$2'
  'FreeMovie (#Movie) - Free the specified #Movie and remove it from memory.':
    'prefix': 'FreeMovie'
    'body': 'FreeMovie(${1:#Movie})$2'
  'FreeMusic (#Music) - Stop and remove the specified module previously loaded with the LoadMusic() command from memory.':
    'prefix': 'FreeMusic'
    'body': 'FreeMusic(${1:#Music})$2'
  'FreeMutex (Mutex) - Free the mutex object.':
    'prefix': 'FreeMutex'
    'body': 'FreeMutex(${1:Mutex})$2'
  'FreeNode (#Node) - Free the specified #Node.':
    'prefix': 'FreeNode'
    'body': 'FreeNode(${1:#Node})$2'
  'FreeNodeAnimation (#NodeAnimation) - Free the specified #NodeAnimation.':
    'prefix': 'FreeNodeAnimation'
    'body': 'FreeNodeAnimation(${1:#NodeAnimation})$2'
  'FreeParticleEmitter (#ParticleEmitter) - Free the specified #ParticleEmitter.':
    'prefix': 'FreeParticleEmitter'
    'body': 'FreeParticleEmitter(${1:#ParticleEmitter})$2'
  'FreeRegularExpression (#RegularExpression) - Free the specified #RegularExpression':
    'prefix': 'FreeRegularExpression'
    'body': 'FreeRegularExpression(${1:#RegularExpression})$2'
  'FreeSemaphore (Semaphore) - Free the semaphore object.':
    'prefix': 'FreeSemaphore'
    'body': 'FreeSemaphore(${1:Semaphore})$2'
  'FreeSound (#Sound) - Stop and remove a sound from memory.':
    'prefix': 'FreeSound'
    'body': 'FreeSound(${1:#Sound})$2'
  'FreeSound3D (#Sound3D) - Stop and remove a sound from memory.':
    'prefix': 'FreeSound3D'
    'body': 'FreeSound3D(${1:#Sound3D})$2'
  'FreeSpline (#Spline) - Free the #Spline.':
    'prefix': 'FreeSpline'
    'body': 'FreeSpline(${1:#Spline})$2'
  'FreeSprite (#Sprite) - Remove the specified sprite from memory.':
    'prefix': 'FreeSprite'
    'body': 'FreeSprite(${1:#Sprite})$2'
  'FreeStaticGeometry (#StaticGeometry) - Free the specified #StaticGeometry.':
    'prefix': 'FreeStaticGeometry'
    'body': 'FreeStaticGeometry(${1:#StaticGeometry})$2'
  'FreeStatusBar (#StatusBar) - Free the given status bar.':
    'prefix': 'FreeStatusBar'
    'body': 'FreeStatusBar(${1:#StatusBar})$2'
  'FreeStructure (*Structure)':
    'prefix': 'FreeStructure'
    'body': 'FreeStructure(${1:*Structure})$2'
  'FreeTerrain (#Terrain) - Free the #Terrain.':
    'prefix': 'FreeTerrain'
    'body': 'FreeTerrain(${1:#Terrain})$2'
  'FreeTerrainBody (#Terrain) - Free the body associated with the #Terrain.':
    'prefix': 'FreeTerrainBody'
    'body': 'FreeTerrainBody(${1:#Terrain})$2'
  'FreeText3D (#Text3D) - Free the specified #Text3D.':
    'prefix': 'FreeText3D'
    'body': 'FreeText3D(${1:#Text3D})$2'
  'FreeTexture (#Texture) - Free the specified #Texture.':
    'prefix': 'FreeTexture'
    'body': 'FreeTexture(${1:#Texture})$2'
  'FreeToolBar (#ToolBar) - Free the specified #Toolbar.':
    'prefix': 'FreeToolBar'
    'body': 'FreeToolBar(${1:#ToolBar})$2'
  'FreeWater (#Camera) - Free the water plane.':
    'prefix': 'FreeWater'
    'body': 'FreeWater(${1:#Camera})$2'
  'FreeXML (#XML) - Free a XML tree':
    'prefix': 'FreeXML'
    'body': 'FreeXML(${1:#XML})$2'
  'FrontColor (Color) - Set the default color for graphic functions and text display.':
    'prefix': 'FrontColor'
    'body': 'FrontColor(${1:Color})$2'
  'FTPDirectoryEntryAttributes (#Ftp) - Return the attributes of the current entry in the last FTP listing.':
    'prefix': 'FTPDirectoryEntryAttributes'
    'body': 'FTPDirectoryEntryAttributes(${1:#Ftp})$2'
  'FTPDirectoryEntryDate (#Ftp) - Return the modified date of the current entry in the last FTP listing.':
    'prefix': 'FTPDirectoryEntryDate'
    'body': 'FTPDirectoryEntryDate(${1:#Ftp})$2'
  'FTPDirectoryEntryName (#Ftp) - Return the name of the current entry in the last FTP listing.':
    'prefix': 'FTPDirectoryEntryName'
    'body': 'FTPDirectoryEntryName(${1:#Ftp})$2'
  'FTPDirectoryEntryRaw (#Ftp) - Return the raw line of the current entry in the last FTP listing.':
    'prefix': 'FTPDirectoryEntryRaw'
    'body': 'FTPDirectoryEntryRaw(${1:#Ftp})$2'
  'FTPDirectoryEntrySize (#Ftp) - Return the size of the current entry in the last FTP listing.':
    'prefix': 'FTPDirectoryEntrySize'
    'body': 'FTPDirectoryEntrySize(${1:#Ftp})$2'
  'FTPDirectoryEntryType (#Ftp) - Return the type of the current entry in the last FTP listing.':
    'prefix': 'FTPDirectoryEntryType'
    'body': 'FTPDirectoryEntryType(${1:#Ftp})$2'
  'FTPProgress (#Ftp) - Return the progress of the current file transfer.':
    'prefix': 'FTPProgress'
    'body': 'FTPProgress(${1:#Ftp})$2'
  'GadgetHeight (#Gadget [, Mode]) - Return the height, in pixel, of the #Gadget.':
    'prefix': 'GadgetHeight'
    'body': 'GadgetHeight(${1:#Gadget})$2'
  'GadgetHeight3D (#Gadget3D) - Return the height, in pixel, of the #Gadget3D.':
    'prefix': 'GadgetHeight3D'
    'body': 'GadgetHeight3D(${1:#Gadget3D})$2'
  'GadgetID (#Gadget) - Return the ID of the #Gadget.':
    'prefix': 'GadgetID'
    'body': 'GadgetID(${1:#Gadget})$2'
  'GadgetID3D (#Gadget3D) - Return the ID of the #Gadget3D.':
    'prefix': 'GadgetID3D'
    'body': 'GadgetID3D(${1:#Gadget3D})$2'
  'GadgetItemID (#Gadget, Item) - Returns the system ID of the specified gadget item.':
    'prefix': 'GadgetItemID'
    'body': 'GadgetItemID(${1:#Gadget})$2'
  'GadgetToolTip (#Gadget, Text$) - Associate the specified Text$ to the #Gadget.':
    'prefix': 'GadgetToolTip'
    'body': 'GadgetToolTip(${1:#Gadget})$2'
  'GadgetToolTip3D (#Gadget, Text$) - Associate the specified Text$ to the #Gadget3D.':
    'prefix': 'GadgetToolTip3D'
    'body': 'GadgetToolTip3D(${1:#Gadget})$2'
  'GadgetType (#Gadget) - Returns the type of the specified #Gadget':
    'prefix': 'GadgetType'
    'body': 'GadgetType(${1:#Gadget})$2'
  'GadgetType3D (#Gadget3D) - Returns the type of the specified #Gadget3D':
    'prefix': 'GadgetType3D'
    'body': 'GadgetType3D(${1:#Gadget3D})$2'
  'GadgetWidth (#Gadget [, Mode]) - Return the width, in pixel, of the #Gadget.':
    'prefix': 'GadgetWidth'
    'body': 'GadgetWidth(${1:#Gadget})$2'
  'GadgetWidth3D (#Gadget3D) - Return the width, in pixel, of the #Gadget3D.':
    'prefix': 'GadgetWidth3D'
    'body': 'GadgetWidth3D(${1:#Gadget3D})$2'
  'GadgetX (#Gadget [, Flags]) - Return the X position, in pixel, of the #Gadget.':
    'prefix': 'GadgetX'
    'body': 'GadgetX(${1:#Gadget})$2'
  'GadgetX3D (#Gadget3D) - Return the X position, in pixel, of the #Gadget3D.':
    'prefix': 'GadgetX3D'
    'body': 'GadgetX3D(${1:#Gadget3D})$2'
  'GadgetY (#Gadget [, Flags]) - Return the Y position, in pixel, of the #Gadget.':
    'prefix': 'GadgetY'
    'body': 'GadgetY(${1:#Gadget})$2'
  'GadgetY3D (#Gadget3D) - Return the Y position, in pixel, of the #Gadget3D.':
    'prefix': 'GadgetY3D'
    'body': 'GadgetY3D(${1:#Gadget3D})$2'
  'GetActiveGadget () - Get the Gadget that has the focus.':
    'prefix': 'GetActiveGadget'
    'body': 'GetActiveGadget()$1'
  'GetActiveGadget3D () - Get the Gadget that has the focus.':
    'prefix': 'GetActiveGadget3D'
    'body': 'GetActiveGadget3D()$1'
  'GetActiveWindow () - Returns the currently active window. (The one with the focus)':
    'prefix': 'GetActiveWindow'
    'body': 'GetActiveWindow()$1'
  'GetActiveWindow3D () - Returns the currently active window. (The one with the focus)':
    'prefix': 'GetActiveWindow3D'
    'body': 'GetActiveWindow3D()$1'
  'GetClientIP (Connection) - Returns the IP of the specified client.':
    'prefix': 'GetClientIP'
    'body': 'GetClientIP(${1:Connection})$2'
  'GetClientPort (Connection) - Returns the Port of the specified client.':
    'prefix': 'GetClientPort'
    'body': 'GetClientPort(${1:Connection})$2'
  'GetClipboardImage (#Image [, Depth]) - Get an image from the clipboard (if any).':
    'prefix': 'GetClipboardImage'
    'body': 'GetClipboardImage(${1:#Image})$2'
  'GetClipboardText () - Return the last text pasted in the clipboard.':
    'prefix': 'GetClipboardText'
    'body': 'GetClipboardText()$1'
  'GetCurrentDirectory () - Returns the path of the current directory.':
    'prefix': 'GetCurrentDirectory'
    'body': 'GetCurrentDirectory()$1'
  'GetDatabaseBlob (#Database, Column, *Buffer, BufferLength) - Returns the content of the specified column in the specified buffer.':
    'prefix': 'GetDatabaseBlob'
    'body': 'GetDatabaseBlob(${1:#Database}, ${2:Column}, ${3:*Buffer})$4'
  'GetDatabaseDouble (#Database, Column) - Returns the content of the specified column as a double number.':
    'prefix': 'GetDatabaseDouble'
    'body': 'GetDatabaseDouble(${1:#Database})$2'
  'GetDatabaseFloat (#Database, Column) - Returns the content of the specified column as a float number.':
    'prefix': 'GetDatabaseFloat'
    'body': 'GetDatabaseFloat(${1:#Database})$2'
  'GetDatabaseLong (#Database, Column) - Returns the content of the specified column as a standard number.':
    'prefix': 'GetDatabaseLong'
    'body': 'GetDatabaseLong(${1:#Database})$2'
  'GetDatabaseQuad (#Database, Column) - Returns the content of the specified column as a quad number.':
    'prefix': 'GetDatabaseQuad'
    'body': 'GetDatabaseQuad(${1:#Database})$2'
  'GetDatabaseString (#Database, Column) - Returns the content of the specified column as a string.':
    'prefix': 'GetDatabaseString'
    'body': 'GetDatabaseString(${1:#Database})$2'
  'GetEntityAnimationLength (#Entity, Animation$) - Get the #Entity animation length.':
    'prefix': 'GetEntityAnimationLength'
    'body': 'GetEntityAnimationLength(${1:#Entity})$2'
  'GetEntityAnimationTime (#Entity, Animation$) - Get the current #Entity animation time.':
    'prefix': 'GetEntityAnimationTime'
    'body': 'GetEntityAnimationTime(${1:#Entity})$2'
  'GetEntityAnimationWeight (#Entity, Animation$) - Get the #Entity animation weight.':
    'prefix': 'GetEntityAnimationWeight'
    'body': 'GetEntityAnimationWeight(${1:#Entity})$2'
  'GetEntityAttribute (#Entity, Attribute) - Get the #Entity attribute value':
    'prefix': 'GetEntityAttribute'
    'body': 'GetEntityAttribute(${1:#Entity})$2'
  'GetEntityCollisionGroup (#Entity) - Get the entity collision group.':
    'prefix': 'GetEntityCollisionGroup'
    'body': 'GetEntityCollisionGroup(${1:#Entity})$2'
  'GetEntityCollisionMask (#Entity) - Get the entity collision mask.':
    'prefix': 'GetEntityCollisionMask'
    'body': 'GetEntityCollisionMask(${1:#Entity})$2'
  'GetEnvironmentVariable (Name$) - Return the content of the environment variable':
    'prefix': 'GetEnvironmentVariable'
    'body': 'GetEnvironmentVariable(${1:Name.s})$2'
  'GetExtensionPart (FullPathName$) - Retrieves the extension part of a full path.':
    'prefix': 'GetExtensionPart'
    'body': 'GetExtensionPart(${1:FullPathName.s})$2'
  'GetFileAttributes (FileName$) - Returns the attributes of the specified file.':
    'prefix': 'GetFileAttributes'
    'body': 'GetFileAttributes(${1:FileName.s})$2'
  'GetFileDate (FileName$, DateType) - Returns the modified/created/accessed date of the specified file.':
    'prefix': 'GetFileDate'
    'body': 'GetFileDate(${1:FileName.s})$2'
  'GetFilePart (FullPathName$ [, Flags]) - Retrieves the file part of a full path.':
    'prefix': 'GetFilePart'
    'body': 'GetFilePart(${1:FullPathName.s})$2'
  'GetFTPDirectory (#Ftp) - Return the current directory.':
    'prefix': 'GetFTPDirectory'
    'body': 'GetFTPDirectory(${1:#Ftp})$2'
  'GetFunction (#Library, FunctionName$) - Checks if a function exists in the #Library.':
    'prefix': 'GetFunction'
    'body': 'GetFunction(${1:#Library})$2'
  'GetGadgetAttribute (#Gadget, Attribute) - Return the specified #Gadget attribute value.':
    'prefix': 'GetGadgetAttribute'
    'body': 'GetGadgetAttribute(${1:#Gadget})$2'
  'GetGadgetAttribute3D (#Gadget3D, Attribute) - Return the specified #Gadget3D attribute value.':
    'prefix': 'GetGadgetAttribute3D'
    'body': 'GetGadgetAttribute3D(${1:#Gadget3D})$2'
  'GetGadgetColor (#Gadget, ColorType) - Get the currently set color of the Gadget':
    'prefix': 'GetGadgetColor'
    'body': 'GetGadgetColor(${1:#Gadget})$2'
  'GetGadgetData (#Gadget) - Returns the value previously stored for this Gadget':
    'prefix': 'GetGadgetData'
    'body': 'GetGadgetData(${1:#Gadget})$2'
  'GetGadgetData3D (#Gadget3D) - Returns the value previously stored for this Gadget':
    'prefix': 'GetGadgetData3D'
    'body': 'GetGadgetData3D(${1:#Gadget3D})$2'
  'GetGadgetFont (#Gadget) - Get the FontID associated with the specified gadget.':
    'prefix': 'GetGadgetFont'
    'body': 'GetGadgetFont(${1:#Gadget})$2'
  'GetGadgetItemAttribute (#Gadget, Item, Attribute [, Column]) - Return the specified #Gadget item attribute value.':
    'prefix': 'GetGadgetItemAttribute'
    'body': 'GetGadgetItemAttribute(${1:#Gadget}, ${2:Item})$3'
  'GetGadgetItemColor (#Gadget, Item, ColorType [, Column]) - Get the currently set color of the Gadget item':
    'prefix': 'GetGadgetItemColor'
    'body': 'GetGadgetItemColor(${1:#Gadget}, ${2:Item})$3'
  'GetGadgetItemData (#Gadget, Item) - Returns the value previously stored with this gadget item.':
    'prefix': 'GetGadgetItemData'
    'body': 'GetGadgetItemData(${1:#Gadget})$2'
  'GetGadgetItemData3D (#Gadget3D, Item) - Returns the value previously stored with this gadget item.':
    'prefix': 'GetGadgetItemData3D'
    'body': 'GetGadgetItemData3D(${1:#Gadget3D})$2'
  'GetGadgetItemState (#Gadget, Position) - Return the #Gadget item state.':
    'prefix': 'GetGadgetItemState'
    'body': 'GetGadgetItemState(${1:#Gadget})$2'
  'GetGadgetItemState3D (#Gadget3D, Position) - Return the #Gadget3D item state.':
    'prefix': 'GetGadgetItemState3D'
    'body': 'GetGadgetItemState3D(${1:#Gadget3D})$2'
  'GetGadgetItemText (#Gadget, Position [, Column]) - Return the text content of the specified #Gadget item.':
    'prefix': 'GetGadgetItemText'
    'body': 'GetGadgetItemText(${1:#Gadget})$2'
  'GetGadgetItemText3D (#Gadget3D, Position [, Column]) - Return the text content of the specified #Gadget3D item.':
    'prefix': 'GetGadgetItemText3D'
    'body': 'GetGadgetItemText3D(${1:#Gadget3D})$2'
  'GetGadgetState (#Gadget) - Return the gadget current state.':
    'prefix': 'GetGadgetState'
    'body': 'GetGadgetState(${1:#Gadget})$2'
  'GetGadgetState3D (#Gadget3D) - Return the gadget current state.':
    'prefix': 'GetGadgetState3D'
    'body': 'GetGadgetState3D(${1:#Gadget3D})$2'
  'GetGadgetText (#Gadget) - Return the gadget text content of the specified #Gadget.':
    'prefix': 'GetGadgetText'
    'body': 'GetGadgetText(${1:#Gadget})$2'
  'GetGadgetText3D (#Gadget3D) - Return the gadget text content of the specified #Gadget3D.':
    'prefix': 'GetGadgetText3D'
    'body': 'GetGadgetText3D(${1:#Gadget3D})$2'
  'GetHomeDirectory () - Returns the full path of the currently logged user directory.':
    'prefix': 'GetHomeDirectory'
    'body': 'GetHomeDirectory()$1'
  'GetHTTPHeader (URL$) - Get the HTTP headers':
    'prefix': 'GetHTTPHeader'
    'body': 'GetHTTPHeader(${1:URL.s})$2'
  'GetJointAttribute (#Joint, Attribute)':
    'prefix': 'GetJointAttribute'
    'body': 'GetJointAttribute(${1:#Joint})$2'
  'GetJSONBoolean (*JSONValue) - Return the JSON value as a boolean':
    'prefix': 'GetJSONBoolean'
    'body': 'GetJSONBoolean(${1:*JSONValue})$2'
  'GetJSONDouble (*JSONValue) - Return the JSON value as a double':
    'prefix': 'GetJSONDouble'
    'body': 'GetJSONDouble(${1:*JSONValue})$2'
  'GetJSONElement (*JSONValue, Index) - Return an element in a JSON array':
    'prefix': 'GetJSONElement'
    'body': 'GetJSONElement(${1:*JSONValue})$2'
  'GetJSONFloat (*JSONValue) - Return the JSON value as a float':
    'prefix': 'GetJSONFloat'
    'body': 'GetJSONFloat(${1:*JSONValue})$2'
  'GetJSONInteger (*JSONValue) - Return the JSON value as an integer':
    'prefix': 'GetJSONInteger'
    'body': 'GetJSONInteger(${1:*JSONValue})$2'
  'GetJSONMember (*JSONValue, Key$) - Return a member of a JSON object':
    'prefix': 'GetJSONMember'
    'body': 'GetJSONMember(${1:*JSONValue})$2'
  'GetJSONQuad (*JSONValue) - Return the JSON value as an quad':
    'prefix': 'GetJSONQuad'
    'body': 'GetJSONQuad(${1:*JSONValue})$2'
  'GetJSONString (*JSONValue) - Return the JSON value as a string':
    'prefix': 'GetJSONString'
    'body': 'GetJSONString(${1:*JSONValue})$2'
  'GetLightColor (#Light, Type) - Get the #Light color value.':
    'prefix': 'GetLightColor'
    'body': 'GetLightColor(${1:#Light})$2'
  'GetMailAttribute (#Mail, Attribute) - Returns the specified #Mail attribute':
    'prefix': 'GetMailAttribute'
    'body': 'GetMailAttribute(${1:#Mail})$2'
  'GetMailBody (#Mail) - Returns the mail body.':
    'prefix': 'GetMailBody'
    'body': 'GetMailBody(${1:#Mail})$2'
  'GetMaterialAttribute (#Material, Attribute [, Layer]) - Get the specified #Material attribute.':
    'prefix': 'GetMaterialAttribute'
    'body': 'GetMaterialAttribute(${1:#Material})$2'
  'GetMaterialColor (#Material, Type) - Get the specified #Material color.':
    'prefix': 'GetMaterialColor'
    'body': 'GetMaterialColor(${1:#Material})$2'
  'GetMenuItemState (#Menu, MenuItem) - Retreive the current menu item state.':
    'prefix': 'GetMenuItemState'
    'body': 'GetMenuItemState(${1:#Menu})$2'
  'GetMenuItemText (#Menu, MenuItem) - Retreive the current menu item text.':
    'prefix': 'GetMenuItemText'
    'body': 'GetMenuItemText(${1:#Menu})$2'
  'GetMenuTitleText (#Menu, Index) - Retreive the current menu title text.':
    'prefix': 'GetMenuTitleText'
    'body': 'GetMenuTitleText(${1:#Menu})$2'
  'GetMeshData (#Mesh, SubMesh, DataArray(), Flags, FirstIndex, LastIndex)':
    'prefix': 'GetMeshData'
    'body': 'GetMeshData(${1:#Mesh}, ${2:SubMesh}, ${3:DataArray()}, ${4:Flags}, ${5:FirstIndex})$6'
  'GetMusicPosition (#Music) - Returns the current pattern position of the playing module.':
    'prefix': 'GetMusicPosition'
    'body': 'GetMusicPosition(${1:#Music})$2'
  'GetMusicRow (#Music) - Returns the row position in the pattern currently played.':
    'prefix': 'GetMusicRow'
    'body': 'GetMusicRow(${1:#Music})$2'
  'GetNodeAnimationKeyFramePitch (#NodeAnimation, KeyFrame) - Get the keyframe pitch for the #NodeAnimation.':
    'prefix': 'GetNodeAnimationKeyFramePitch'
    'body': 'GetNodeAnimationKeyFramePitch(${1:#NodeAnimation})$2'
  'GetNodeAnimationKeyFrameRoll (#NodeAnimation, KeyFrame) - Get the z keyframe roll for the #NodeAnimation.':
    'prefix': 'GetNodeAnimationKeyFrameRoll'
    'body': 'GetNodeAnimationKeyFrameRoll(${1:#NodeAnimation})$2'
  'GetNodeAnimationKeyFrameTime (#NodeAnimation, KeyFrame) - Get the keyframe time for the #NodeAnimation.':
    'prefix': 'GetNodeAnimationKeyFrameTime'
    'body': 'GetNodeAnimationKeyFrameTime(${1:#NodeAnimation})$2'
  'GetNodeAnimationKeyFrameX (#NodeAnimation, KeyFrame) - Get the x keyframe position for the #NodeAnimation.':
    'prefix': 'GetNodeAnimationKeyFrameX'
    'body': 'GetNodeAnimationKeyFrameX(${1:#NodeAnimation})$2'
  'GetNodeAnimationKeyFrameY (#NodeAnimation, KeyFrame) - Get the y keyframe position for the #NodeAnimation.':
    'prefix': 'GetNodeAnimationKeyFrameY'
    'body': 'GetNodeAnimationKeyFrameY(${1:#NodeAnimation})$2'
  'GetNodeAnimationKeyFrameYaw (#NodeAnimation, KeyFrame) - Get the y keyframe yaw for the #NodeAnimation.':
    'prefix': 'GetNodeAnimationKeyFrameYaw'
    'body': 'GetNodeAnimationKeyFrameYaw(${1:#NodeAnimation})$2'
  'GetNodeAnimationKeyFrameZ (#NodeAnimation, KeyFrame) - Get the z keyframe position for the #NodeAnimation.':
    'prefix': 'GetNodeAnimationKeyFrameZ'
    'body': 'GetNodeAnimationKeyFrameZ(${1:#NodeAnimation})$2'
  'GetNodeAnimationLength (#NodeAnimation) - Get the #NodeAnimation length.':
    'prefix': 'GetNodeAnimationLength'
    'body': 'GetNodeAnimationLength(${1:#NodeAnimation})$2'
  'GetNodeAnimationTime (#NodeAnimation) - Get the current #NodeAnimation time.':
    'prefix': 'GetNodeAnimationTime'
    'body': 'GetNodeAnimationTime(${1:#NodeAnimation})$2'
  'GetNodeAnimationWeight (#NodeAnimation) - Get the #NodeAnimation weight.':
    'prefix': 'GetNodeAnimationWeight'
    'body': 'GetNodeAnimationWeight(${1:#NodeAnimation})$2'
  'GetOriginX () - Get the x coordinate of the drawing origin':
    'prefix': 'GetOriginX'
    'body': 'GetOriginX()$1'
  'GetOriginY () - Get the y coordinate of the drawing origin':
    'prefix': 'GetOriginY'
    'body': 'GetOriginY()$1'
  'GetPathPart (FullPathName$) - Retrieves the path part of a full path.':
    'prefix': 'GetPathPart'
    'body': 'GetPathPart(${1:FullPathName.s})$2'
  'GetRuntimeDouble (Name) - Return the runtime double item value.':
    'prefix': 'GetRuntimeDouble'
    'body': 'GetRuntimeDouble(${1:Name})$2'
  'GetRuntimeInteger (Name) - Return the runtime integer item value.':
    'prefix': 'GetRuntimeInteger'
    'body': 'GetRuntimeInteger(${1:Name})$2'
  'GetRuntimeString (Name) - Return the runtime string item value.':
    'prefix': 'GetRuntimeString'
    'body': 'GetRuntimeString(${1:Name})$2'
  'GetScriptMaterial (#Material, Name$) - Get a material defined in scripts files.':
    'prefix': 'GetScriptMaterial'
    'body': 'GetScriptMaterial(${1:#Material})$2'
  'GetScriptParticleEmitter (#ParticleEmitter, Name$) - Get a particule emitter defined in scripts files.':
    'prefix': 'GetScriptParticleEmitter'
    'body': 'GetScriptParticleEmitter(${1:#ParticleEmitter})$2'
  'GetScriptTexture (#Texture, Name$) - Get the specified #Texture as defined in the script file.':
    'prefix': 'GetScriptTexture'
    'body': 'GetScriptTexture(${1:#Texture})$2'
  'GetSerialPortStatus (#SerialPort, Attributes) - Return the specified status.':
    'prefix': 'GetSerialPortStatus'
    'body': 'GetSerialPortStatus(${1:#SerialPort})$2'
  'GetSoundFrequency (#Sound [, Channel]) - Get the current #Sound frequency.':
    'prefix': 'GetSoundFrequency'
    'body': 'GetSoundFrequency(${1:#Sound})$2'
  'GetSoundPosition (#Sound [, Mode [, Channel]]) - Get the current playing #Sound position.':
    'prefix': 'GetSoundPosition'
    'body': 'GetSoundPosition(${1:#Sound})$2'
  'GetTemporaryDirectory () - Returns the full path of the temporary directory.':
    'prefix': 'GetTemporaryDirectory'
    'body': 'GetTemporaryDirectory()$1'
  'GetTerrainTileHeightAtPoint (#Terrain, TileX, TileY, x, y) - Get the height of the #Terrain tile at the specified position.':
    'prefix': 'GetTerrainTileHeightAtPoint'
    'body': 'GetTerrainTileHeightAtPoint(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x})$5'
  'GetTerrainTileLayerBlend (#Terrain, TileX, TileY, Layer, x, y) - Get the #Terrain tile layer blend value.':
    'prefix': 'GetTerrainTileLayerBlend'
    'body': 'GetTerrainTileLayerBlend(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:Layer}, ${5:x})$6'
  'GetToolBarButtonState (#ToolBar, ButtonID) - Get the state of the specified button':
    'prefix': 'GetToolBarButtonState'
    'body': 'GetToolBarButtonState(${1:#ToolBar})$2'
  'GetURLPart (URL$, Parameter$) - Get the specific part of an URL.':
    'prefix': 'GetURLPart'
    'body': 'GetURLPart(${1:URL.s})$2'
  'GetW () - Get the \'w\' value of the last call.':
    'prefix': 'GetW'
    'body': 'GetW()$1'
  'GetWindowColor (#Window) - Get the background color of the window.':
    'prefix': 'GetWindowColor'
    'body': 'GetWindowColor(${1:#Window})$2'
  'GetWindowData (#Window) - Returns the value previously stored for the window':
    'prefix': 'GetWindowData'
    'body': 'GetWindowData(${1:#Window})$2'
  'GetWindowState (#Window) - Get the minimized/maximized state of the window.':
    'prefix': 'GetWindowState'
    'body': 'GetWindowState(${1:#Window})$2'
  'GetWindowTitle (#Window) - Gets the current #Window title.':
    'prefix': 'GetWindowTitle'
    'body': 'GetWindowTitle(${1:#Window})$2'
  'GetWindowTitle3D (#Window3D) - Gets the current #Window3D title.':
    'prefix': 'GetWindowTitle3D'
    'body': 'GetWindowTitle3D(${1:#Window3D})$2'
  'GetX () - Get the \'x\' value of the last call.':
    'prefix': 'GetX'
    'body': 'GetX()$1'
  'GetXMLAttribute (Node, Attribute$) - Get the value of the given attribute of the XML node':
    'prefix': 'GetXMLAttribute'
    'body': 'GetXMLAttribute(${1:Node})$2'
  'GetXMLEncoding (#XML) - Get the encoding used in the parsed XML data':
    'prefix': 'GetXMLEncoding'
    'body': 'GetXMLEncoding(${1:#XML})$2'
  'GetXMLNodeName (Node) - Get the (tag-)name of the given XML node':
    'prefix': 'GetXMLNodeName'
    'body': 'GetXMLNodeName(${1:Node})$2'
  'GetXMLNodeOffset (Node) - Get the number of characters of text between this node and the previous one in the tree':
    'prefix': 'GetXMLNodeOffset'
    'body': 'GetXMLNodeOffset(${1:Node})$2'
  'GetXMLNodeText (Node) - Get the text content of the given XML node':
    'prefix': 'GetXMLNodeText'
    'body': 'GetXMLNodeText(${1:Node})$2'
  'GetXMLStandalone (#XML) - Get the standalone mode of the XML document':
    'prefix': 'GetXMLStandalone'
    'body': 'GetXMLStandalone(${1:#XML})$2'
  'GetY () - Get the \'y\' value of the last call.':
    'prefix': 'GetY'
    'body': 'GetY()$1'
  'GetZ () - Get the \'z\' value of the last call.':
    'prefix': 'GetZ'
    'body': 'GetZ()$1'
  'GrabDrawingImage (#Image, x, y, Width, Height) - Create a new #Image with the content of the given drawing output area.':
    'prefix': 'GrabDrawingImage'
    'body': 'GrabDrawingImage(${1:#Image}, ${2:x}, ${3:y}, ${4:Width})$5'
  'GrabImage (#Image1, #Image2, x, y, Width, Height) - Create a new #Image2 with the selected area on the source #Image1.':
    'prefix': 'GrabImage'
    'body': 'GrabImage(${1:#Image1}, ${2:#Image2}, ${3:x}, ${4:y}, ${5:Width})$6'
  'GrabSprite (#Sprite, x, y, Width, Height [, Mode]) - Grab the screen content at the area x,y,Width,Height, and create a new #Sprite.':
    'prefix': 'GrabSprite'
    'body': 'GrabSprite(${1:#Sprite}, ${2:x}, ${3:y}, ${4:Width})$5'
  'GradientColor (Position.f, Color) - Set a color for the drawing gradient.':
    'prefix': 'GradientColor'
    'body': 'GradientColor(${1:Position.f})$2'
  'Green (Color) - Returns the green component of the given color':
    'prefix': 'Green'
    'body': 'Green(${1:Color})$2'
  'Hex (Number [, Type]) - Converts a numeric number into a string, in hexadecimal format.':
    'prefix': 'Hex'
    'body': 'Hex(${1:Number})$2'
  'HideBillboardGroup (#BillboardGroup, Display) - Hide or show the #BillboardGroup and all its billboards.':
    'prefix': 'HideBillboardGroup'
    'body': 'HideBillboardGroup(${1:#BillboardGroup})$2'
  'HideEffect (#Effect, State)':
    'prefix': 'HideEffect'
    'body': 'HideEffect(${1:#Effect})$2'
  'HideEntity (#Entity, Hide) - Hide or show the specified #Entity.':
    'prefix': 'HideEntity'
    'body': 'HideEntity(${1:#Entity})$2'
  'HideGadget (#Gadget, State) - Hide or show a gadget.':
    'prefix': 'HideGadget'
    'body': 'HideGadget(${1:#Gadget})$2'
  'HideGadget3D (#Gadget3D, State) - Hide or show a gadget.':
    'prefix': 'HideGadget3D'
    'body': 'HideGadget3D(${1:#Gadget3D})$2'
  'HideLight (#Light, State) - Hides or shows the specified #Light.':
    'prefix': 'HideLight'
    'body': 'HideLight(${1:#Light})$2'
  'HideMenu (#Menu, State) - Hide or display the specified menu.':
    'prefix': 'HideMenu'
    'body': 'HideMenu(${1:#Menu})$2'
  'HideParticleEmitter (#ParticleEmitter, Hide) - Hide or show the specified #ParticleEmitter.':
    'prefix': 'HideParticleEmitter'
    'body': 'HideParticleEmitter(${1:#ParticleEmitter})$2'
  'HideWindow (#Window, State [, Flags]) - Hides or show the specified #Window':
    'prefix': 'HideWindow'
    'body': 'HideWindow(${1:#Window})$2'
  'HideWindow3D (#Window3D, State) - Hides or show the specified #Window3D.':
    'prefix': 'HideWindow3D'
    'body': 'HideWindow3D(${1:#Window3D})$2'
  'HingeJoint (#Joint, EntityID, PivotX, PivotY, PivotZ, AxisX, AxisY, AxisZ, EntityID2, PivotX2, PivotY2, PivotZ2, AxisX2, AxisY2, AxisZ2)':
    'prefix': 'HingeJoint'
    'body': 'HingeJoint(${1:#Joint}, ${2:EntityID}, ${3:PivotX}, ${4:PivotY}, ${5:PivotZ}, ${6:AxisX}, ${7:AxisY}, ${8:AxisZ}, ${9:EntityID2}, ${10:PivotX2}, ${11:PivotY2}, ${12:PivotZ2}, ${13:AxisX2}, ${14:AxisY2})$15'
  'HingeJointMotorTarget (#Joint, Angle, Velocity) - Sets the motor target on the hinge #Joint.':
    'prefix': 'HingeJointMotorTarget'
    'body': 'HingeJointMotorTarget(${1:#Joint}, ${2:Angle})$3'
  'Hostname () - Returns the computer hostname.':
    'prefix': 'Hostname'
    'body': 'Hostname()$1'
  'Hour (Date) - Returns the hour value of the specified date (between 0 and 23).':
    'prefix': 'Hour'
    'body': 'Hour(${1:Date})$2'
  'HTTPProgress (HttpConnection) - Get the progress on the specified HTTP connection.':
    'prefix': 'HTTPProgress'
    'body': 'HTTPProgress(${1:HttpConnection})$2'
  'HyperLinkGadget (#Gadget, x, y, Width, Height, Text$, Color [, Flags]) - Creates an HyperLink gadget in the current GadgetList.':
    'prefix': 'HyperLinkGadget'
    'body': 'HyperLinkGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Text.s})$7'
  'ImageDepth (#Image [, Flags]) - Returns the depth of the specified #Image.':
    'prefix': 'ImageDepth'
    'body': 'ImageDepth(${1:#Image})$2'
  'ImageFormat (#Image) - Returns the original format of the specified #Image.':
    'prefix': 'ImageFormat'
    'body': 'ImageFormat(${1:#Image})$2'
  'ImageGadget (#Gadget, x, y, Width, Height, ImageID [, Flags]) - Create an Image gadget in the current GadgetList.':
    'prefix': 'ImageGadget'
    'body': 'ImageGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'ImageGadget3D (#Gadget3D, x, y, Width, Height, TextureID [, Flags]) - Create an Image gadget in the current GadgetList.':
    'prefix': 'ImageGadget3D'
    'body': 'ImageGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'ImageHeight (#Image) - Returns the height, in pixel, of the specified #Image.':
    'prefix': 'ImageHeight'
    'body': 'ImageHeight(${1:#Image})$2'
  'ImageID (#Image) - Returns the ImageID of the specified #Image.':
    'prefix': 'ImageID'
    'body': 'ImageID(${1:#Image})$2'
  'ImageOutput (#Image) - Returns the OutputID of the specified #Image to perform 2D rendering operation on it.':
    'prefix': 'ImageOutput'
    'body': 'ImageOutput(${1:#Image})$2'
  'ImageVectorOutput (#Image [, Unit]) - Prepares the image for 2D vector graphic operations.':
    'prefix': 'ImageVectorOutput'
    'body': 'ImageVectorOutput(${1:#Image})$2'
  'ImageWidth (#Image) - Returns the width, in pixel, the specified #Image':
    'prefix': 'ImageWidth'
    'body': 'ImageWidth(${1:#Image})$2'
  'Infinity () - Returns the float value for positive infinity.':
    'prefix': 'Infinity'
    'body': 'Infinity()$1'
  'InitAudioCD () - Initialize all CD-Audio ressources.':
    'prefix': 'InitAudioCD'
    'body': 'InitAudioCD()$1'
  'InitCGI ([MaxRequestSize]) - Init the CGI library.':
    'prefix': 'InitCGI'
    'body': 'InitCGI()$1'
  'InitEngine3D ([Flags [, LibraryName$]]) - Initialises the 3D environment for later use.':
    'prefix': 'InitEngine3D'
    'body': 'InitEngine3D()$1'
  'InitFastCGI (LocalPort) - Init the FastCGI support.':
    'prefix': 'InitFastCGI'
    'body': 'InitFastCGI(${1:LocalPort})$2'
  'InitJoystick () - Initialize the joystick environment for later use.':
    'prefix': 'InitJoystick'
    'body': 'InitJoystick()$1'
  'InitKeyboard () - Initialize the keyboard environment for later use.':
    'prefix': 'InitKeyboard'
    'body': 'InitKeyboard()$1'
  'InitMouse () - Initialize the Mouse environment for later use.':
    'prefix': 'InitMouse'
    'body': 'InitMouse()$1'
  'InitMovie () - Initialize the Movie environment for later use.':
    'prefix': 'InitMovie'
    'body': 'InitMovie()$1'
  'InitNetwork () - Initialize the network environment.':
    'prefix': 'InitNetwork'
    'body': 'InitNetwork()$1'
  'InitScintilla ([LibraryName$]) - Initialize the scintilla library':
    'prefix': 'InitScintilla'
    'body': 'InitScintilla()$1'
  'InitSound () - Initialize the sound environment. If it returns 0 then no sound can be played on this computer,':
    'prefix': 'InitSound'
    'body': 'InitSound()$1'
  'InitSprite () - Init all the sprite environment for later use.':
    'prefix': 'InitSprite'
    'body': 'InitSprite()$1'
  'Inkey () - Return a two characters string if a key is pressed during the call of Inkey().':
    'prefix': 'Inkey'
    'body': 'Inkey()$1'
  'Input () - Allows to catch a whole character line.':
    'prefix': 'Input'
    'body': 'Input()$1'
  'InputEvent3D (MouseX, MouseY, LeftMouseButton [, Text$, SpecialKey]) - Send event to the GUI system.':
    'prefix': 'InputEvent3D'
    'body': 'InputEvent3D(${1:MouseX}, ${2:MouseY})$3'
  'InputRequester (Title$, Message$, DefaultString$ [, Flags]) - Open an input requester.':
    'prefix': 'InputRequester'
    'body': 'InputRequester(${1:Title.s}, ${2:Message.s})$3'
  'InsertElement (List()) - Inserts a new empty element before the current element.':
    'prefix': 'InsertElement'
    'body': 'InsertElement(${1:List()})$2'
  'InsertJSONArray (*JSONValue, Array()) - Insert the specified Array() into the JSON value':
    'prefix': 'InsertJSONArray'
    'body': 'InsertJSONArray(${1:*JSONValue})$2'
  'InsertJSONList (*JSONValue, List()) - Insert the specified List() into the JSON value':
    'prefix': 'InsertJSONList'
    'body': 'InsertJSONList(${1:*JSONValue})$2'
  'InsertJSONMap (*JSONValue, Map()) - Insert the specified Map() into the JSON value':
    'prefix': 'InsertJSONMap'
    'body': 'InsertJSONMap(${1:*JSONValue})$2'
  'InsertJSONStructure (*JSONValue, *Buffer, Structure) - Insert the specified structure data into the JSON value':
    'prefix': 'InsertJSONStructure'
    'body': 'InsertJSONStructure(${1:*JSONValue}, ${2:*Buffer})$3'
  'InsertString (String$, StringToInsert$, Position) - Insert a string at the given position':
    'prefix': 'InsertString'
    'body': 'InsertString(${1:String.s}, ${2:StringToInsert.s})$3'
  'InsertXMLArray (ParentNode, Array() [, PreviousNode]) - Insert the specified Array() into the XML node':
    'prefix': 'InsertXMLArray'
    'body': 'InsertXMLArray(${1:ParentNode})$2'
  'InsertXMLList (ParentNode, List() [, PreviousNode]) - Insert the specified List() into the XML node':
    'prefix': 'InsertXMLList'
    'body': 'InsertXMLList(${1:ParentNode})$2'
  'InsertXMLMap (ParentNode, Map() [, PreviousNode]) - Insert the specified Map() into the XML node':
    'prefix': 'InsertXMLMap'
    'body': 'InsertXMLMap(${1:ParentNode})$2'
  'InsertXMLStructure (ParentNode, *Buffer, Structure [, PreviousNode]) - Insert the specified structure data into the XML node':
    'prefix': 'InsertXMLStructure'
    'body': 'InsertXMLStructure(${1:ParentNode}, ${2:*Buffer})$3'
  'InstructionAddress () - Get the address of the current decoded instruction':
    'prefix': 'InstructionAddress'
    'body': 'InstructionAddress()$1'
  'InstructionString () - Get a string representation of the current decoded instruction':
    'prefix': 'InstructionString'
    'body': 'InstructionString()$1'
  'Int (Float) - Returns the integer part of the specified value.':
    'prefix': 'Int'
    'body': 'Int(${1:Float})$2'
  'InternalProcessToFront ()':
    'prefix': 'InternalProcessToFront'
    'body': 'InternalProcessToFront()$1'
  'IntQ (Float) - Returns the integer part of the specified value as a quad.':
    'prefix': 'IntQ'
    'body': 'IntQ(${1:Float})$2'
  'IPAddressField (IPAddress, Field [, Format]) - Returns the IP Address field value.':
    'prefix': 'IPAddressField'
    'body': 'IPAddressField(${1:IPAddress})$2'
  'IPAddressGadget (#Gadget, x, y, Width, Height) - Create an IP Address gadget in the current GadgetList.':
    'prefix': 'IPAddressGadget'
    'body': 'IPAddressGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'IPString (IPAddress [, Format]) - Returns the string representation of the given IP address.':
    'prefix': 'IPString'
    'body': 'IPString(${1:IPAddress})$2'
  'IsBillboardGroup (#BillboardGroup) - Tests if the given \'#BillboardGroup\' is an initialized BillboardGroup object.':
    'prefix': 'IsBillboardGroup'
    'body': 'IsBillboardGroup(${1:#BillboardGroup})$2'
  'IsCamera (#Camera) - Tests if the given \'#Camera\' is an initialized camera object.':
    'prefix': 'IsCamera'
    'body': 'IsCamera(${1:#Camera})$2'
  'IsCipher (#Cipher) - Tests if the given \'#Cipher\' is an initialized cipher object.':
    'prefix': 'IsCipher'
    'body': 'IsCipher(${1:#Cipher})$2'
  'IsDatabase (#Database) - Tests if the given \'#Database\' is an initialized database object.':
    'prefix': 'IsDatabase'
    'body': 'IsDatabase(${1:#Database})$2'
  'IsDialog (#Dialog) - Tests if the given dialog is initialized.':
    'prefix': 'IsDialog'
    'body': 'IsDialog(${1:#Dialog})$2'
  'IsDirectory (#Directory) - Tests if the given \'#Directory\' is an initialized directory object.':
    'prefix': 'IsDirectory'
    'body': 'IsDirectory(${1:#Directory})$2'
  'IsEffect (#Effect) - Tests if the given \'#Effect\' is an initialized effect object.':
    'prefix': 'IsEffect'
    'body': 'IsEffect(${1:#Effect})$2'
  'IsEntity (#Entity) - Tests if the given \'#Entity\' is an initialized entity object.':
    'prefix': 'IsEntity'
    'body': 'IsEntity(${1:#Entity})$2'
  'IsFile (#File) - Tests if the given \'#File\' is an initialized file object.':
    'prefix': 'IsFile'
    'body': 'IsFile(${1:#File})$2'
  'IsFingerprint (#Fingerprint) - Tests if the given \'#Fingerprint\' is an initialized fingerprint object.':
    'prefix': 'IsFingerprint'
    'body': 'IsFingerprint(${1:#Fingerprint})$2'
  'IsFont (#Font) - Tests if the given \'#Font\' is an initialized font object.':
    'prefix': 'IsFont'
    'body': 'IsFont(${1:#Font})$2'
  'IsFTP (#Ftp) - Tests if the given \'#Ftp\' is an initialized FTP object.':
    'prefix': 'IsFTP'
    'body': 'IsFTP(${1:#Ftp})$2'
  'IsGadget (#Gadget) - Tests if the given \'#Gadget\' is an initialized gadget object.':
    'prefix': 'IsGadget'
    'body': 'IsGadget(${1:#Gadget})$2'
  'IsGadget3D (#Gadget3D) - Tests if the given \'#Gadget3D\' is an initialized gadget object.':
    'prefix': 'IsGadget3D'
    'body': 'IsGadget3D(${1:#Gadget3D})$2'
  'IsImage (#Image) - Tests if the given \'#Image\' is an initialized image object.':
    'prefix': 'IsImage'
    'body': 'IsImage(${1:#Image})$2'
  'IsInfinity (Number) - Returns nonzero if the given Number represents positive or negative infinity.':
    'prefix': 'IsInfinity'
    'body': 'IsInfinity(${1:Number})$2'
  'IsInsidePath (x.d, y.d [, CoordinateSystem]) - Tests whether the given point is inside the area of the current path':
    'prefix': 'IsInsidePath'
    'body': 'IsInsidePath(${1:x.d})$2'
  'IsInsideStroke (x.d, y.d, Width.d [, Flags [, CoordinateSystem]]) - Tests whether the given point is inside the area stroked by the current path':
    'prefix': 'IsInsideStroke'
    'body': 'IsInsideStroke(${1:x.d}, ${2:y.d})$3'
  'IsJoint (#Joint) - Tests if the given \'#Joint\' is an initialized joint object.':
    'prefix': 'IsJoint'
    'body': 'IsJoint(${1:#Joint})$2'
  'IsJSON (#JSON) - Check if #JSON represents valid JSON data':
    'prefix': 'IsJSON'
    'body': 'IsJSON(${1:#JSON})$2'
  'IsLibrary (#Library) - Tests if the given \'#Library\' is an initialized library object.':
    'prefix': 'IsLibrary'
    'body': 'IsLibrary(${1:#Library})$2'
  'IsLight (#Light) - Tests if the given \'#Light\' is an initialized light object.':
    'prefix': 'IsLight'
    'body': 'IsLight(${1:#Light})$2'
  'IsMail (#Mail) - Tests if the given \'#Mail\' is an initialized mail object.':
    'prefix': 'IsMail'
    'body': 'IsMail(${1:#Mail})$2'
  'IsMaterial (#Material) - Tests if the given \'#Material\' is an initialized material object.':
    'prefix': 'IsMaterial'
    'body': 'IsMaterial(${1:#Material})$2'
  'IsMenu (#Menu) - Tests if the given \'#Menu\' is an initialized menu object.':
    'prefix': 'IsMenu'
    'body': 'IsMenu(${1:#Menu})$2'
  'IsMesh (#Mesh) - Tests if the given \'#Mesh\' is an initialized mesh object.':
    'prefix': 'IsMesh'
    'body': 'IsMesh(${1:#Mesh})$2'
  'IsMovie (#Movie) - Tests if the given \'#Movie\' is an initialized movie object.':
    'prefix': 'IsMovie'
    'body': 'IsMovie(${1:#Movie})$2'
  'IsMusic (#Music) - Tests if the given \'#Music\' is an initialized module object.':
    'prefix': 'IsMusic'
    'body': 'IsMusic(${1:#Music})$2'
  'IsNAN (Number) - Returns nonzero if the given Number is the special "Not a Number" value.':
    'prefix': 'IsNAN'
    'body': 'IsNAN(${1:Number})$2'
  'IsNode (#Node) - Tests if the given \'#Node\' is an initialized node object.':
    'prefix': 'IsNode'
    'body': 'IsNode(${1:#Node})$2'
  'IsParticleEmitter (#ParticleEmitter) - Tests if the given \'#ParticleEmitter\' is an initialized ParticleEmitter object.':
    'prefix': 'IsParticleEmitter'
    'body': 'IsParticleEmitter(${1:#ParticleEmitter})$2'
  'IsPathEmpty () - Returns true if the current vector drawing path is empty':
    'prefix': 'IsPathEmpty'
    'body': 'IsPathEmpty()$1'
  'IsProgram (Program) - Check if the specified program was created by RunProgram':
    'prefix': 'IsProgram'
    'body': 'IsProgram(${1:Program})$2'
  'IsRegularExpression (#RegularExpression) - Tests if the given \'#RegularExpression\' is an initialized regular expression object.':
    'prefix': 'IsRegularExpression'
    'body': 'IsRegularExpression(${1:#RegularExpression})$2'
  'IsRuntime (Name) - Check if the specified item is available at runtime.':
    'prefix': 'IsRuntime'
    'body': 'IsRuntime(${1:Name})$2'
  'IsScreenActive () - If the return is 0, then the screen is no more active, else the screen is active.':
    'prefix': 'IsScreenActive'
    'body': 'IsScreenActive()$1'
  'IsSerialPort (#SerialPort) - Test if the given \'#SerialPort\' is an initialized SerialPort object.':
    'prefix': 'IsSerialPort'
    'body': 'IsSerialPort(${1:#SerialPort})$2'
  'IsSound (#Sound) - Tests if the given \'#Sound\' is an initialized sound object.':
    'prefix': 'IsSound'
    'body': 'IsSound(${1:#Sound})$2'
  'IsSound3D (#Sound3D) - Tests if the given \'#Sound3D\' is an initialized sound object.':
    'prefix': 'IsSound3D'
    'body': 'IsSound3D(${1:#Sound3D})$2'
  'IsSprite (#Sprite) - Tests if the given \'#Sprite\' is an initialized sprite object.':
    'prefix': 'IsSprite'
    'body': 'IsSprite(${1:#Sprite})$2'
  'IsStaticGeometry (#StaticGeometry) - Tests if the given \'#StaticGeometry\' is an initialized effect object.':
    'prefix': 'IsStaticGeometry'
    'body': 'IsStaticGeometry(${1:#StaticGeometry})$2'
  'IsStatusBar (#StatusBar) - Tests if the given \'#StatusBar\' is an initialized statusbar object.':
    'prefix': 'IsStatusBar'
    'body': 'IsStatusBar(${1:#StatusBar})$2'
  'IsSysTrayIcon (#SysTrayIcon) - Tests if the given \'#SysTrayIcon\' is an initialized systray icon object.':
    'prefix': 'IsSysTrayIcon'
    'body': 'IsSysTrayIcon(${1:#SysTrayIcon})$2'
  'IsText3D (#Text3D) - Tests if the given \'#Text3D\' is an initialized text3d object.':
    'prefix': 'IsText3D'
    'body': 'IsText3D(${1:#Text3D})$2'
  'IsTexture (#Texture) - Tests if the given \'#Texture\' is an initialized texture object.':
    'prefix': 'IsTexture'
    'body': 'IsTexture(${1:#Texture})$2'
  'IsThread (Thread) - Check if the thread exists.':
    'prefix': 'IsThread'
    'body': 'IsThread(${1:Thread})$2'
  'IsToolBar (#ToolBar) - Tests if the given \'#ToolBar\' is an initialized toolbar object.':
    'prefix': 'IsToolBar'
    'body': 'IsToolBar(${1:#ToolBar})$2'
  'IsWindow (#Window) - Tests if the given \'#Window\' is an initialized window object.':
    'prefix': 'IsWindow'
    'body': 'IsWindow(${1:#Window})$2'
  'IsWindow3D (#Window3D) - Tests if the given \'#Window3D\' is an initialized window object.':
    'prefix': 'IsWindow3D'
    'body': 'IsWindow3D(${1:#Window3D})$2'
  'IsXML (#XML) - Check if #XML represents a valid XML object':
    'prefix': 'IsXML'
    'body': 'IsXML(${1:#XML})$2'
  'JoystickAxisX (#Joystick [, Pad [, Mode]]) - Returns the X axis state':
    'prefix': 'JoystickAxisX'
    'body': 'JoystickAxisX(${1:#Joystick})$2'
  'JoystickAxisY (#Joystick [, Pad [, Mode]]) - Returns the Y axis state':
    'prefix': 'JoystickAxisY'
    'body': 'JoystickAxisY(${1:#Joystick})$2'
  'JoystickAxisZ (#Joystick [, Pad [, Mode]]) - Returns the Z axis state':
    'prefix': 'JoystickAxisZ'
    'body': 'JoystickAxisZ(${1:#Joystick})$2'
  'JoystickButton (#Joystick, ButtonNumber) - Returns 1 if the specified button is pressed.':
    'prefix': 'JoystickButton'
    'body': 'JoystickButton(${1:#Joystick})$2'
  'JoystickName (#Joystick) - Returns the joystick name':
    'prefix': 'JoystickName'
    'body': 'JoystickName(${1:#Joystick})$2'
  'JSONArraySize (*JSONValue) - Return the number elements in a JSON array':
    'prefix': 'JSONArraySize'
    'body': 'JSONArraySize(${1:*JSONValue})$2'
  'JSONErrorLine () - Get the input line of the most recent JSON parsing error':
    'prefix': 'JSONErrorLine'
    'body': 'JSONErrorLine()$1'
  'JSONErrorMessage () - Get a string description of the most recent JSON parsing error':
    'prefix': 'JSONErrorMessage'
    'body': 'JSONErrorMessage()$1'
  'JSONErrorPosition () - Get the input position of the most recent JSON parsing error':
    'prefix': 'JSONErrorPosition'
    'body': 'JSONErrorPosition()$1'
  'JSONMemberKey (*JSONValue) - Get the key of the current examined member in the JSON object':
    'prefix': 'JSONMemberKey'
    'body': 'JSONMemberKey(${1:*JSONValue})$2'
  'JSONMemberValue (*JSONValue) - Get the value of the current examined member in the JSON object':
    'prefix': 'JSONMemberValue'
    'body': 'JSONMemberValue(${1:*JSONValue})$2'
  'JSONObjectSize (*JSONValue) - Return the number of members in a JSON object':
    'prefix': 'JSONObjectSize'
    'body': 'JSONObjectSize(${1:*JSONValue})$2'
  'JSONType (*JSONValue) - Return the type of a JSON value':
    'prefix': 'JSONType'
    'body': 'JSONType(${1:*JSONValue})$2'
  'JSONValue (#JSON) - Return the main value of JSON data':
    'prefix': 'JSONValue'
    'body': 'JSONValue(${1:#JSON})$2'
  'KeyboardInkey () - Returns the last ASCII key code which has been pressed.':
    'prefix': 'KeyboardInkey'
    'body': 'KeyboardInkey()$1'
  'KeyboardMode (Mode) - Changes the way the keyboard keys are interpretated.':
    'prefix': 'KeyboardMode'
    'body': 'KeyboardMode(${1:Mode})$2'
  'KeyboardPushed (KeyID) - Returns 1 if the specified key is currently pushed.':
    'prefix': 'KeyboardPushed'
    'body': 'KeyboardPushed(${1:KeyID})$2'
  'KeyboardReleased (KeyID) - Returns 1 if the specified key has been pressed (pushed and released).':
    'prefix': 'KeyboardReleased'
    'body': 'KeyboardReleased(${1:KeyID})$2'
  'KillProgram (Program) - Terminate the specified program':
    'prefix': 'KillProgram'
    'body': 'KillProgram(${1:Program})$2'
  'KillThread (Thread) - Kill the thread. Warning, this is a very dangerous function.':
    'prefix': 'KillThread'
    'body': 'KillThread(${1:Thread})$2'
  'LastElement (List()) - Changes the current list element to the last list element.':
    'prefix': 'LastElement'
    'body': 'LastElement(${1:List()})$2'
  'LCase (String$) - Returns the original string converted into lower case characters.':
    'prefix': 'LCase'
    'body': 'LCase(${1:String.s})$2'
  'Left (String$, Length) - Returns the first \'Length\' number of characters from the left side of the string.':
    'prefix': 'Left'
    'body': 'Left(${1:String.s})$2'
  'Len (String$) - Returns the Character length of the string.':
    'prefix': 'Len'
    'body': 'Len(${1:String.s})$2'
  'LensFlareEffectColor (#Effect, ColorType, Color) - Change the color of the specified lens flare part.':
    'prefix': 'LensFlareEffectColor'
    'body': 'LensFlareEffectColor(${1:#Effect}, ${2:ColorType})$3'
  'LibraryID (#Library) - Returns the specified #LibraryID':
    'prefix': 'LibraryID'
    'body': 'LibraryID(${1:#Library})$2'
  'LightAttenuation (#Light, Range, Attenuation) - Change the #Light attenuation.':
    'prefix': 'LightAttenuation'
    'body': 'LightAttenuation(${1:#Light}, ${2:Range})$3'
  'LightDirection (#Light, x, y, z) - Change the #Light direction.':
    'prefix': 'LightDirection'
    'body': 'LightDirection(${1:#Light}, ${2:x}, ${3:y})$4'
  'LightDirectionX (#Light [, Mode]) - Return the x direction of the #Light.':
    'prefix': 'LightDirectionX'
    'body': 'LightDirectionX(${1:#Light})$2'
  'LightDirectionY (#Light [, Mode]) - Return the y direction of the #Light.':
    'prefix': 'LightDirectionY'
    'body': 'LightDirectionY(${1:#Light})$2'
  'LightDirectionZ (#Light [, Mode]) - Return the z direction of the #Light.':
    'prefix': 'LightDirectionZ'
    'body': 'LightDirectionZ(${1:#Light})$2'
  'LightID (#Light) - Return the unique #Light ID.':
    'prefix': 'LightID'
    'body': 'LightID(${1:#Light})$2'
  'LightLookAt (#Light, x, y, z)':
    'prefix': 'LightLookAt'
    'body': 'LightLookAt(${1:#Light}, ${2:x}, ${3:y})$4'
  'LightPitch (#Light [, Mode]) - Return the pitch of the #Light.':
    'prefix': 'LightPitch'
    'body': 'LightPitch(${1:#Light})$2'
  'LightRoll (#Light [, Mode]) - Return the roll of the #Light.':
    'prefix': 'LightRoll'
    'body': 'LightRoll(${1:#Light})$2'
  'LightX (#Light [, Mode]) - Return the x position of the #Light.':
    'prefix': 'LightX'
    'body': 'LightX(${1:#Light})$2'
  'LightY (#Light [, Mode]) - Return the y position of the #Light.':
    'prefix': 'LightY'
    'body': 'LightY(${1:#Light})$2'
  'LightYaw (#Light [, Mode]) - Return the yaw of the #Light.':
    'prefix': 'LightYaw'
    'body': 'LightYaw(${1:#Light})$2'
  'LightZ (#Light [, Mode]) - Return the z position of the #Light.':
    'prefix': 'LightZ'
    'body': 'LightZ(${1:#Light})$2'
  'Line (x, y, Width, Height [, Color]) - Draw a line of given dimension on the current output.':
    'prefix': 'Line'
    'body': 'Line(${1:x}, ${2:y}, ${3:Width})$4'
  'LinearGradient (x1, y1, x2, y2) - Use a linear gradient when gradient drawing is enabled.':
    'prefix': 'LinearGradient'
    'body': 'LinearGradient(${1:x1}, ${2:y1}, ${3:x2})$4'
  'LineXY (x1, y1, x2, y2 [, Color]) - Draw a line of given dimension on the current output.':
    'prefix': 'LineXY'
    'body': 'LineXY(${1:x1}, ${2:y1}, ${3:x2})$4'
  'ListIconGadget (#Gadget, x, y, Width, Height, FirstColumnTitle$, FirstColumnWidth [, Flags]) - Create a ListIcon gadget in the current GadgetList.':
    'prefix': 'ListIconGadget'
    'body': 'ListIconGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:FirstColumnTitle.s})$7'
  'ListIndex (List()) - Find out the position of the current element in the list. First Element is 0.':
    'prefix': 'ListIndex'
    'body': 'ListIndex(${1:List()})$2'
  'ListSize (List()) - Counts how many elements there are in the list.':
    'prefix': 'ListSize'
    'body': 'ListSize(${1:List()})$2'
  'ListViewGadget (#Gadget, x, y, Width, Height [, Flags]) - Create a ListView gadget in the current GadgetList.':
    'prefix': 'ListViewGadget'
    'body': 'ListViewGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'ListViewGadget3D (#Gadget3D, x, y, Width, Height [, Flags]) - Create a ListView gadget in the current GadgetList.':
    'prefix': 'ListViewGadget3D'
    'body': 'ListViewGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5'
  'LoadFont (#Font, Name$, Height [,Style]) - Tries to open the specified font.':
    'prefix': 'LoadFont'
    'body': 'LoadFont(${1:#Font}, ${2:Name.s})$3'
  'LoadImage (#Image, FileName$ [, Flags]) - Load the specified image.':
    'prefix': 'LoadImage'
    'body': 'LoadImage(${1:#Image})$2'
  'LoadJSON (#JSON, FileName$ [, Flags]) - Load JSON data from a file':
    'prefix': 'LoadJSON'
    'body': 'LoadJSON(${1:#JSON})$2'
  'LoadMesh (#Mesh, Filename$) - Load a new #Mesh.':
    'prefix': 'LoadMesh'
    'body': 'LoadMesh(${1:#Mesh})$2'
  'LoadMovie (#Movie, FileName$) - Try to open and prepare a movie for later playback.':
    'prefix': 'LoadMovie'
    'body': 'LoadMovie(${1:#Movie})$2'
  'LoadMusic (#Music, "FileName") - Load the specified module into memory.':
    'prefix': 'LoadMusic'
    'body': 'LoadMusic(${1:#Music})$2'
  'LoadSound (#Sound, FileName$ [, Flags]) - Load the specified sound into memory.':
    'prefix': 'LoadSound'
    'body': 'LoadSound(${1:#Sound})$2'
  'LoadSound3D (#Sound3D, FileName$ [, Flags]) - Load the specified sound into memory.':
    'prefix': 'LoadSound3D'
    'body': 'LoadSound3D(${1:#Sound3D})$2'
  'LoadSprite (#Sprite, FileName$ [, Mode]) - Load the specified sprite into the memory for immediate use.':
    'prefix': 'LoadSprite'
    'body': 'LoadSprite(${1:#Sprite})$2'
  'LoadTexture (#Texture, Filename$) - Load the specified #Texture.':
    'prefix': 'LoadTexture'
    'body': 'LoadTexture(${1:#Texture})$2'
  'LoadWorld (FileName$) - Load a whole world and initialize it.':
    'prefix': 'LoadWorld'
    'body': 'LoadWorld(${1:FileName.s})$2'
  'LoadXML (#XML, FileName$ [, Encoding]) - Load a XML file and parse it':
    'prefix': 'LoadXML'
    'body': 'LoadXML(${1:#XML})$2'
  'Loc (#File) - Returns the actual pointer position of the specified file.':
    'prefix': 'Loc'
    'body': 'Loc(${1:#File})$2'
  'LockMutex (Mutex) - Wait for ownership of the mutex object.':
    'prefix': 'LockMutex'
    'body': 'LockMutex(${1:Mutex})$2'
  'Lof (#File) - Returns the length of the specified file.':
    'prefix': 'Lof'
    'body': 'Lof(${1:#File})$2'
  'Log (Value) - Returns the Log of the value.':
    'prefix': 'Log'
    'body': 'Log(${1:Value})$2'
  'Log10 (x) - Returns the Log in base 10 of the value.':
    'prefix': 'Log10'
    'body': 'Log10(${1:x})$2'
  'LSet (String$, Length [, Character]) - Pads a string to the left, and adds \'space\' characters to fit the specified length.':
    'prefix': 'LSet'
    'body': 'LSet(${1:String.s})$2'
  'LTrim (String$ [, Character$]) - Removes all the \'space\' or given characters located at the beginning of a string.':
    'prefix': 'LTrim'
    'body': 'LTrim(${1:String.s})$2'
  'MailProgress (#Mail) - Returns the current progress of a mail being sent.':
    'prefix': 'MailProgress'
    'body': 'MailProgress(${1:#Mail})$2'
  'MainXMLNode (#XML) - Get the main node of the XML tree':
    'prefix': 'MainXMLNode'
    'body': 'MainXMLNode(${1:#XML})$2'
  'MakeIPAddress (Field0, Field1, Field2, Field3 [, Field4, Field5, Field6, Field7]) - Return the value for the specifed IP.':
    'prefix': 'MakeIPAddress'
    'body': 'MakeIPAddress(${1:Field0}, ${2:Field1}, ${3:Field2})$4'
  'MapKey (Map()) - Returns the key of the current map element.':
    'prefix': 'MapKey'
    'body': 'MapKey(${1:Map()})$2'
  'MapSize (Map()) - Returns the number of elements in the map.':
    'prefix': 'MapSize'
    'body': 'MapSize(${1:Map()})$2'
  'MatchRegularExpression (#RegularExpression, String$) - Tests if a string match the regular expression.':
    'prefix': 'MatchRegularExpression'
    'body': 'MatchRegularExpression(${1:#RegularExpression})$2'
  'MaterialBlendingMode (#Material, Mode) - Change the #Material blending mode.':
    'prefix': 'MaterialBlendingMode'
    'body': 'MaterialBlendingMode(${1:#Material})$2'
  'MaterialCullingMode (#Material, Mode) - Change the #Material culling mode.':
    'prefix': 'MaterialCullingMode'
    'body': 'MaterialCullingMode(${1:#Material})$2'
  'MaterialFilteringMode (#Material, Mode [, MaxAnisotropy]) - Change the texture filtering mode for the #Material.':
    'prefix': 'MaterialFilteringMode'
    'body': 'MaterialFilteringMode(${1:#Material})$2'
  'MaterialFog (#Material, Color, Intensity, StartDistance, EndDistance) - Display a fog effect on the material.':
    'prefix': 'MaterialFog'
    'body': 'MaterialFog(${1:#Material}, ${2:Color}, ${3:Intensity}, ${4:StartDistance})$5'
  'MaterialID (#Material) - Return the unique #Material ID.':
    'prefix': 'MaterialID'
    'body': 'MaterialID(${1:#Material})$2'
  'MaterialShadingMode (#Material, Mode) - Change the shading mode for the #Material.':
    'prefix': 'MaterialShadingMode'
    'body': 'MaterialShadingMode(${1:#Material})$2'
  'MaterialShininess (#Material, Shininess) - Change the #Material shininess.':
    'prefix': 'MaterialShininess'
    'body': 'MaterialShininess(${1:#Material})$2'
  'MemorySize (Memory) - Return the size of the specified memory block.':
    'prefix': 'MemorySize'
    'body': 'MemorySize(${1:Memory})$2'
  'MemoryStatus (StatusType) - Returns information about the available memory in the computer.':
    'prefix': 'MemoryStatus'
    'body': 'MemoryStatus(${1:StatusType})$2'
  'MemoryStringLength (*String [, Flags]) - Calculate the length of a memory string.':
    'prefix': 'MemoryStringLength'
    'body': 'MemoryStringLength(${1:*String})$2'
  'MenuBar () - Creates a separator bar in the current menu.':
    'prefix': 'MenuBar'
    'body': 'MenuBar()$1'
  'MenuHeight () - Returns the menu bar height, in pixels.':
    'prefix': 'MenuHeight'
    'body': 'MenuHeight()$1'
  'MenuID (#Menu) - Returns the unique ID which identifies the menu in the operating system.':
    'prefix': 'MenuID'
    'body': 'MenuID(${1:#Menu})$2'
  'MenuItem (MenuItemID, Text$ [, ImageID]) - Creates a new item entry for the menu.':
    'prefix': 'MenuItem'
    'body': 'MenuItem(${1:MenuItemID})$2'
  'MenuTitle (Title$) - Creates a new title entry for the menu.':
    'prefix': 'MenuTitle'
    'body': 'MenuTitle(${1:Title.s})$2'
  'MergeLists (List(), DestinationList() [, Location]) - Move all elements from List() to DestinationList().':
    'prefix': 'MergeLists'
    'body': 'MergeLists(${1:List()})$2'
  'MeshFace (Vertex1, Vertex2, Vertex3)':
    'prefix': 'MeshFace'
    'body': 'MeshFace(${1:Vertex1}, ${2:Vertex2})$3'
  'MeshID (#Mesh) - Return the unique #Mesh ID.':
    'prefix': 'MeshID'
    'body': 'MeshID(${1:#Mesh})$2'
  'MeshIndex (Index)':
    'prefix': 'MeshIndex'
    'body': 'MeshIndex(${1:Index})$2'
  'MeshIndexCount (#Mesh [, SubMesh])':
    'prefix': 'MeshIndexCount'
    'body': 'MeshIndexCount(${1:#Mesh})$2'
  'MeshPoseCount (#Mesh) - Return the mesh pose count.':
    'prefix': 'MeshPoseCount'
    'body': 'MeshPoseCount(${1:#Mesh})$2'
  'MeshPoseName (#Mesh, PoseIndex) - Return the mesh pose name.':
    'prefix': 'MeshPoseName'
    'body': 'MeshPoseName(${1:#Mesh})$2'
  'MeshRadius (#Mesh)':
    'prefix': 'MeshRadius'
    'body': 'MeshRadius(${1:#Mesh})$2'
  'MeshVertexColor (Color)':
    'prefix': 'MeshVertexColor'
    'body': 'MeshVertexColor(${1:Color})$2'
  'MeshVertexCount (#Mesh [, SubMesh])':
    'prefix': 'MeshVertexCount'
    'body': 'MeshVertexCount(${1:#Mesh})$2'
  'MeshVertexNormal (x, y, z)':
    'prefix': 'MeshVertexNormal'
    'body': 'MeshVertexNormal(${1:x}, ${2:y})$3'
  'MeshVertexPosition (x, y, z)':
    'prefix': 'MeshVertexPosition'
    'body': 'MeshVertexPosition(${1:x}, ${2:y})$3'
  'MeshVertexTangent (x, y, z)':
    'prefix': 'MeshVertexTangent'
    'body': 'MeshVertexTangent(${1:x}, ${2:y})$3'
  'MeshVertexTextureCoordinate (u, v)':
    'prefix': 'MeshVertexTextureCoordinate'
    'body': 'MeshVertexTextureCoordinate(${1:u})$2'
  'MessageRequester (Title$, Text$ [, Flags]) - Open a blocking requester to display some informations.':
    'prefix': 'MessageRequester'
    'body': 'MessageRequester(${1:Title.s})$2'
  'Mid (String$, StartPos [, Length]) - Extract a string at the specified position from the given \'String$\'.':
    'prefix': 'Mid'
    'body': 'Mid(${1:String.s})$2'
  'Minute (Date) - Returns the minute value of the specified date (between 0 and 59).':
    'prefix': 'Minute'
    'body': 'Minute(${1:Date})$2'
  'Mod (Number, Divisor) - Returns the remainder of Number/Divisor.':
    'prefix': 'Mod'
    'body': 'Mod(${1:Number})$2'
  'Month (Date) - Returns the month value of the specified date (between 1 and 12).':
    'prefix': 'Month'
    'body': 'Month(${1:Date})$2'
  'MouseButton (ButtonNumber) - Returns 0 if the specified button is not pressed, else the button is pressed.':
    'prefix': 'MouseButton'
    'body': 'MouseButton(${1:ButtonNumber})$2'
  'MouseDeltaX () - Returns the mouse X movement (in pixel) since the last call of this function.':
    'prefix': 'MouseDeltaX'
    'body': 'MouseDeltaX()$1'
  'MouseDeltaY () - Returns the mouse Y movement (in pixel) since the last call of this function.':
    'prefix': 'MouseDeltaY'
    'body': 'MouseDeltaY()$1'
  'MouseLocate (x, y) - Changes the mouse X,Y position to the new specified one.':
    'prefix': 'MouseLocate'
    'body': 'MouseLocate(${1:x})$2'
  'MousePick (#Camera, x, y [, PickMask]) - Returns the first #Entity at the given position':
    'prefix': 'MousePick'
    'body': 'MousePick(${1:#Camera}, ${2:x})$3'
  'MouseRayCast (#Camera, x, y, PickMask) - Returns if a ray has encountered an object':
    'prefix': 'MouseRayCast'
    'body': 'MouseRayCast(${1:#Camera}, ${2:x}, ${3:y})$4'
  'MouseWheel () - Returns the number of positions since the last call.':
    'prefix': 'MouseWheel'
    'body': 'MouseWheel()$1'
  'MouseX () - Returns the actual mouse X position (in pixel) on the current screen.':
    'prefix': 'MouseX'
    'body': 'MouseX()$1'
  'MouseY () - Returns the actual mouse X position (in pixel) on the current screen.':
    'prefix': 'MouseY'
    'body': 'MouseY()$1'
  'MoveBillboard (#Billboard, #BillboardGroup, x, y, z) - Move the #Billboard relatives to its previous location.':
    'prefix': 'MoveBillboard'
    'body': 'MoveBillboard(${1:#Billboard}, ${2:#BillboardGroup}, ${3:x}, ${4:y})$5'
  'MoveBillboardGroup (#BillboardGroup, x, y, z [, Mode]) - Move the #BillboardGroup relatives to its previous location.':
    'prefix': 'MoveBillboardGroup'
    'body': 'MoveBillboardGroup(${1:#BillboardGroup}, ${2:x}, ${3:y})$4'
  'MoveCamera (#Camera, x, y, z [, Mode]) - Move the #Camera relative to its previous position.':
    'prefix': 'MoveCamera'
    'body': 'MoveCamera(${1:#Camera}, ${2:x}, ${3:y})$4'
  'MoveElement (List(), Location [, *RelativeElement]) - Move the current element to a different position in the list.':
    'prefix': 'MoveElement'
    'body': 'MoveElement(${1:List()})$2'
  'MoveEntity (#Entity, x, y, z [, Mode]) - Move the #Entity relative to its previous position.':
    'prefix': 'MoveEntity'
    'body': 'MoveEntity(${1:#Entity}, ${2:x}, ${3:y})$4'
  'MoveEntityBone (#Entity, Bone$, x, y, z , Mode) - Move the #Entity bone relative to its previous position.':
    'prefix': 'MoveEntityBone'
    'body': 'MoveEntityBone(${1:#Entity}, ${2:Bone.s}, ${3:x}, ${4:y}, ${5:z})$6'
  'MoveLight (#Light, x, y, z [, Mode]) - Move the #Light.':
    'prefix': 'MoveLight'
    'body': 'MoveLight(${1:#Light}, ${2:x}, ${3:y})$4'
  'MoveMemory (SourceMemory, DestinationMemory, Length) - Move a memory area from \'SourceMemory\' to \'DestinationMemory\'.':
    'prefix': 'MoveMemory'
    'body': 'MoveMemory(${1:SourceMemory}, ${2:DestinationMemory})$3'
  'MoveNode (#Node, x, y, z [, Mode]) - Move the #Node.':
    'prefix': 'MoveNode'
    'body': 'MoveNode(${1:#Node}, ${2:x}, ${3:y})$4'
  'MoveParticleEmitter (#ParticleEmitter, x, y, z [, Mode]) - Move the #ParticleEmitter relative to its previous position.':
    'prefix': 'MoveParticleEmitter'
    'body': 'MoveParticleEmitter(${1:#ParticleEmitter}, ${2:x}, ${3:y})$4'
  'MovePathCursor (x.d, y.d [, Flags]) - Move the vector drawing cursor without adding a line':
    'prefix': 'MovePathCursor'
    'body': 'MovePathCursor(${1:x.d})$2'
  'MoveText3D (#Text3D, x, y, z [, Mode]) - Move the #Text3D.':
    'prefix': 'MoveText3D'
    'body': 'MoveText3D(${1:#Text3D}, ${2:x}, ${3:y})$4'
  'MoveXMLNode (Node, ParentNode [, PreviousNode]) - Move the XML node to a new location (or different XML tree)':
    'prefix': 'MoveXMLNode'
    'body': 'MoveXMLNode(${1:Node})$2'
  'MovieAudio (#Movie, Volume, Balance) - Control the audio stream of the movie.':
    'prefix': 'MovieAudio'
    'body': 'MovieAudio(${1:#Movie}, ${2:Volume})$3'
  'MovieHeight (#Movie) - Returns the height (in pixel) of the movie.':
    'prefix': 'MovieHeight'
    'body': 'MovieHeight(${1:#Movie})$2'
  'MovieInfo (#Movie, Flags) - Returns an additionnal information about the movie.':
    'prefix': 'MovieInfo'
    'body': 'MovieInfo(${1:#Movie})$2'
  'MovieLength (#Movie) - Returns the length (in frames) of the movie.':
    'prefix': 'MovieLength'
    'body': 'MovieLength(${1:#Movie})$2'
  'MovieSeek (#Movie, Frame) - Change the movie position to the given frame.':
    'prefix': 'MovieSeek'
    'body': 'MovieSeek(${1:#Movie})$2'
  'MovieStatus (#Movie) - Get the status of the movie (-1: paused, 0: stopped, >0: playing).':
    'prefix': 'MovieStatus'
    'body': 'MovieStatus(${1:#Movie})$2'
  'MovieWidth (#Movie) - Returns the width (in pixel) of the movie.':
    'prefix': 'MovieWidth'
    'body': 'MovieWidth(${1:#Movie})$2'
  'MusicVolume (#Music, Volume) - Change the current module volume in realtime':
    'prefix': 'MusicVolume'
    'body': 'MusicVolume(${1:#Music})$2'
  'NaN () - Returns the spechial "Not a Number" value.':
    'prefix': 'NaN'
    'body': 'NaN()$1'
  'NetworkClientEvent (Connection) - Check if an event occured on a client.':
    'prefix': 'NetworkClientEvent'
    'body': 'NetworkClientEvent(${1:Connection})$2'
  'NetworkServerEvent ([ServerID]) - Check if an event occured on a server.':
    'prefix': 'NetworkServerEvent'
    'body': 'NetworkServerEvent()$1'
  'NewPrinterPage () - Start a new page.':
    'prefix': 'NewPrinterPage'
    'body': 'NewPrinterPage()$1'
  'NewVectorPage () - Begin a new page in the vector drawing output':
    'prefix': 'NewVectorPage'
    'body': 'NewVectorPage()$1'
  'NextDatabaseDriver () - Retrieves information about the next available database driver.':
    'prefix': 'NextDatabaseDriver'
    'body': 'NextDatabaseDriver()$1'
  'NextDatabaseRow (#Database) - Retrieves information about the next database row.':
    'prefix': 'NextDatabaseRow'
    'body': 'NextDatabaseRow(${1:#Database})$2'
  'NextDirectoryEntry (#Directory) - Go to the next directory entry':
    'prefix': 'NextDirectoryEntry'
    'body': 'NextDirectoryEntry(${1:#Directory})$2'
  'NextElement (List()) - Moves from the current element to the next element in the list.':
    'prefix': 'NextElement'
    'body': 'NextElement(${1:List()})$2'
  'NextEnvironmentVariable () - Examine the next variable in the environment block':
    'prefix': 'NextEnvironmentVariable'
    'body': 'NextEnvironmentVariable()$1'
  'NextFTPDirectoryEntry (#Ftp) - Go to the next FTP directory entry':
    'prefix': 'NextFTPDirectoryEntry'
    'body': 'NextFTPDirectoryEntry(${1:#Ftp})$2'
  'NextInstruction () - Disassemble the next instruction':
    'prefix': 'NextInstruction'
    'body': 'NextInstruction()$1'
  'NextIPAddress () - Retrieve the next host IP address.':
    'prefix': 'NextIPAddress'
    'body': 'NextIPAddress()$1'
  'NextJSONMember (*JSONValue) - Get the next member in the examined JSON object':
    'prefix': 'NextJSONMember'
    'body': 'NextJSONMember(${1:*JSONValue})$2'
  'NextMapElement (Map()) - Moves from the current element to the next element in the map.':
    'prefix': 'NextMapElement'
    'body': 'NextMapElement(${1:Map()})$2'
  'NextPackEntry (#Pack) - Next pack entry.':
    'prefix': 'NextPackEntry'
    'body': 'NextPackEntry(${1:#Pack})$2'
  'NextPreferenceGroup () - Go to the next group after a call to ExaminePreferenceGroups().':
    'prefix': 'NextPreferenceGroup'
    'body': 'NextPreferenceGroup()$1'
  'NextPreferenceKey () - Go to the next key after a call to ExaminePreferenceKeys().':
    'prefix': 'NextPreferenceKey'
    'body': 'NextPreferenceKey()$1'
  'NextRegularExpressionMatch (#RegularExpression) - Move to the next match of the regular expression':
    'prefix': 'NextRegularExpressionMatch'
    'body': 'NextRegularExpressionMatch(${1:#RegularExpression})$2'
  'NextScreenMode () - Get the next screen mode information.':
    'prefix': 'NextScreenMode'
    'body': 'NextScreenMode()$1'
  'NextSelectedFileName () - Get the next selected filename.':
    'prefix': 'NextSelectedFileName'
    'body': 'NextSelectedFileName()$1'
  'NextWorldCollision () - The next world collision':
    'prefix': 'NextWorldCollision'
    'body': 'NextWorldCollision()$1'
  'NextXMLAttribute (Node) - Get the next attribute in the examined XML node':
    'prefix': 'NextXMLAttribute'
    'body': 'NextXMLAttribute(${1:Node})$2'
  'NextXMLNode (Node) - Get the next XML node on the same level as the given node':
    'prefix': 'NextXMLNode'
    'body': 'NextXMLNode(${1:Node})$2'
  'NodeAnimationStatus (#NodeAnimation) - Return the specified #NodeAnimation status.':
    'prefix': 'NodeAnimationStatus'
    'body': 'NodeAnimationStatus(${1:#NodeAnimation})$2'
  'NodeFixedYawAxis (#Node, Mode [, VectorX, VectorY, VectorZ]) - Change the way the yaw axis is managed.':
    'prefix': 'NodeFixedYawAxis'
    'body': 'NodeFixedYawAxis(${1:#Node})$2'
  'NodeID (#Node) - Return the unique #Node system identifier.':
    'prefix': 'NodeID'
    'body': 'NodeID(${1:#Node})$2'
  'NodeLookAt (#Node, x, y, z [, DirectionX, DirectionY, DirectionZ) - Change the #Node orientation to look at the specified point.':
    'prefix': 'NodeLookAt'
    'body': 'NodeLookAt(${1:#Node}, ${2:x}, ${3:y})$4'
  'NodePitch (#Node [, Mode]) - Return the pitch of the #Node.':
    'prefix': 'NodePitch'
    'body': 'NodePitch(${1:#Node})$2'
  'NodeRoll (#Node [, Mode]) - Return the roll of the #Node.':
    'prefix': 'NodeRoll'
    'body': 'NodeRoll(${1:#Node})$2'
  'NodeX (#Node [, Mode]) - Return the x position of the #Node.':
    'prefix': 'NodeX'
    'body': 'NodeX(${1:#Node})$2'
  'NodeY (#Node [, Mode]) - Return the y position of the #Node.':
    'prefix': 'NodeY'
    'body': 'NodeY(${1:#Node})$2'
  'NodeYaw (#Node [, Mode]) - Return the yaw of the #Node.':
    'prefix': 'NodeYaw'
    'body': 'NodeYaw(${1:#Node})$2'
  'NodeZ (#Node [, Mode]) - Return the z position of the #Node.':
    'prefix': 'NodeZ'
    'body': 'NodeZ(${1:#Node})$2'
  'NormalizeMesh (#Mesh [, SubMesh])':
    'prefix': 'NormalizeMesh'
    'body': 'NormalizeMesh(${1:#Mesh})$2'
  'NormalX () - Returns the last pick normal X value.':
    'prefix': 'NormalX'
    'body': 'NormalX()$1'
  'NormalY () - Returns the last pick normal Y value.':
    'prefix': 'NormalY'
    'body': 'NormalY()$1'
  'NormalZ () - Returns the last pick normal Z value.':
    'prefix': 'NormalZ'
    'body': 'NormalZ()$1'
  'OnErrorCall (@ErrorHandler()) - Call the given error handler if an error occurs':
    'prefix': 'OnErrorCall'
    'body': 'OnErrorCall(${1:@ErrorHandler()})$2'
  'OnErrorDefault () - Uninstall any error handler so the default OS action is taken on further errors':
    'prefix': 'OnErrorDefault'
    'body': 'OnErrorDefault()$1'
  'OnErrorExit () - Exit the program if an error occurs':
    'prefix': 'OnErrorExit'
    'body': 'OnErrorExit()$1'
  'OnErrorGoto (?LabelAddress) - Continue execution at the given label if an error occurs':
    'prefix': 'OnErrorGoto'
    'body': 'OnErrorGoto(${1:?LabelAddress})$2'
  'OpenConsole ([Title$]) - Open a console window.':
    'prefix': 'OpenConsole'
    'body': 'OpenConsole()$1'
  'OpenCryptRandom () - Open the cryptographic random number generator.':
    'prefix': 'OpenCryptRandom'
    'body': 'OpenCryptRandom()$1'
  'OpenDatabase (#Database, DatabaseName$, User$, Password$ [, Plugin]) - Opens the specified database.':
    'prefix': 'OpenDatabase'
    'body': 'OpenDatabase(${1:#Database}, ${2:DatabaseName.s}, ${3:User.s})$4'
  'OpenDatabaseRequester (#Database [, Plugin]) - Opens the standard Windows ODBC requester to choose which database to open.':
    'prefix': 'OpenDatabaseRequester'
    'body': 'OpenDatabaseRequester(${1:#Database})$2'
  'OpenFile (#File, FileName$ [, Flags]) - Open the designed file or create it if it doesn\'t exists.':
    'prefix': 'OpenFile'
    'body': 'OpenFile(${1:#File})$2'
  'OpenFileRequester (Title$, DefaultFile$, Pattern$, PatternPosition [, Flags]) - Open the standard requester which allow to choose a file.':
    'prefix': 'OpenFileRequester'
    'body': 'OpenFileRequester(${1:Title.s}, ${2:DefaultFile.s}, ${3:Pattern.s})$4'
  'OpenFTP (#Ftp, ServerName$, User$, Password$ [, Passive [, Port]]) - Try to open a connection on the specified server.':
    'prefix': 'OpenFTP'
    'body': 'OpenFTP(${1:#Ftp}, ${2:ServerName.s}, ${3:User.s})$4'
  'OpenGadgetList (#Gadget [, GadgetItem]) - Makes the Gadget the current gadget list.':
    'prefix': 'OpenGadgetList'
    'body': 'OpenGadgetList(${1:#Gadget})$2'
  'OpenGadgetList3D (#Gadget3D [, GadgetItem]) - Makes the Gadget the current gadget list.':
    'prefix': 'OpenGadgetList3D'
    'body': 'OpenGadgetList3D(${1:#Gadget3D})$2'
  'OpenGLGadget (#Gadget, x, y, Width, Height [, Flags]) - Create an OpenGL gadget in the current GadgetList.':
    'prefix': 'OpenGLGadget'
    'body': 'OpenGLGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'OpenHelp (Filename$, Topic$) - Opens a new Help window.':
    'prefix': 'OpenHelp'
    'body': 'OpenHelp(${1:Filename.s})$2'
  'OpenLibrary (#Library, Filename$) - Open a new library (DLL)':
    'prefix': 'OpenLibrary'
    'body': 'OpenLibrary(${1:#Library})$2'
  'OpenNetworkConnection (ServerName$, Port [, Type [, TimeOut [, LocalIP$ [, LocalPort]]]]) - Try to open a connection on the specified server.':
    'prefix': 'OpenNetworkConnection'
    'body': 'OpenNetworkConnection(${1:ServerName.s})$2'
  'OpenPack (#Pack, Filename$ [, PluginID]) - Open a pack file.':
    'prefix': 'OpenPack'
    'body': 'OpenPack(${1:#Pack})$2'
  'OpenPreferences (Filename$ [, Flags]) - Open and load a preference file.':
    'prefix': 'OpenPreferences'
    'body': 'OpenPreferences(${1:Filename.s})$2'
  'OpenScreen (Width, Height, Depth, Title$ [, FlipMode [, RefreshRate]]) - Open a new screen according to the specified \'Width\', \'Height\' and \'Depth\'.':
    'prefix': 'OpenScreen'
    'body': 'OpenScreen(${1:Width}, ${2:Height}, ${3:Depth})$4'
  'OpenSerialPort (#SerialPort, SerialPortName$, Bauds, Parity, Data, Stop, HandshakeMode, InputBufferSize, OutputBufferSize) - Open a serial port for use.':
    'prefix': 'OpenSerialPort'
    'body': 'OpenSerialPort(${1:#SerialPort}, ${2:SerialPortName.s}, ${3:Bauds}, ${4:Parity}, ${5:Data}, ${6:Stop}, ${7:HandshakeMode}, ${8:InputBufferSize})$9'
  'OpenSubMenu (Text$ [, ImageID]) - Creates an empty sub-menu entry in the current menu.':
    'prefix': 'OpenSubMenu'
    'body': 'OpenSubMenu(${1:Text.s})$2'
  'OpenWindow (#Window, x, y, InnerWidth, InnerHeight, Title$ [, Flags [, ParentID]]) - Opens a new window according to the specified parameters.':
    'prefix': 'OpenWindow'
    'body': 'OpenWindow(${1:#Window}, ${2:x}, ${3:y}, ${4:InnerWidth}, ${5:InnerHeight})$6'
  'OpenWindow3D (#Window3D, x, y, width, height, Title$ [, Flags]) - Opens a new window according to the specified parameters.':
    'prefix': 'OpenWindow3D'
    'body': 'OpenWindow3D(${1:#Window3D}, ${2:x}, ${3:y}, ${4:width}, ${5:height})$6'
  'OpenWindowedScreen (WindowID(), x, y, Width, Height [, AutoStretch, RightOffset, BottomOffset [, FlipMode]])':
    'prefix': 'OpenWindowedScreen'
    'body': 'OpenWindowedScreen(${1:WindowID()}, ${2:x}, ${3:y}, ${4:Width})$5'
  'OpenXMLDialog (#Dialog, #Xml, Name$ [, x, y [, Width, Height [, ParentID]]]) - Creates a dialog from an XML object.':
    'prefix': 'OpenXMLDialog'
    'body': 'OpenXMLDialog(${1:#Dialog}, ${2:#Xml})$3'
  'OptionGadget (#Gadget, x, y, Width, Height, Text$) - Creates a Option gadget in the current GadgetList.':
    'prefix': 'OptionGadget'
    'body': 'OptionGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'OptionGadget3D (#Gadget3D, x, y, Width, Height, Text$) - Creates a Option gadget in the current GadgetList.':
    'prefix': 'OptionGadget3D'
    'body': 'OptionGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'OSVersion () - Retrieve the OS version number.':
    'prefix': 'OSVersion'
    'body': 'OSVersion()$1'
  'OutputDepth () - Get the depth of the current drawing output.':
    'prefix': 'OutputDepth'
    'body': 'OutputDepth()$1'
  'OutputHeight () - Get the height of the current drawing output.':
    'prefix': 'OutputHeight'
    'body': 'OutputHeight()$1'
  'OutputWidth () - Get the width of the current drawing output.':
    'prefix': 'OutputWidth'
    'body': 'OutputWidth()$1'
  'PackEntryName (#Pack) - Returns the current pack entry name.':
    'prefix': 'PackEntryName'
    'body': 'PackEntryName(${1:#Pack})$2'
  'PackEntrySize (#Pack [, Mode]) - Returns the current pack entry size.':
    'prefix': 'PackEntrySize'
    'body': 'PackEntrySize(${1:#Pack})$2'
  'PackEntryType (#Pack) - Returns the current pack entry type.':
    'prefix': 'PackEntryType'
    'body': 'PackEntryType(${1:#Pack})$2'
  'PanelGadget (#Gadget, x, y, Width, Height) - Creates a Panel gadget in the current GadgetList.':
    'prefix': 'PanelGadget'
    'body': 'PanelGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'PanelGadget3D (#Gadget3D, x, y, Width, Height) - Creates a Panel gadget in the current GadgetList.':
    'prefix': 'PanelGadget3D'
    'body': 'PanelGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5'
  'ParentXMLNode (Node) - Get the parent of the given XML node':
    'prefix': 'ParentXMLNode'
    'body': 'ParentXMLNode(${1:Node})$2'
  'Parse3DScripts () - Parse all the scripts founds in the declared path or archives':
    'prefix': 'Parse3DScripts'
    'body': 'Parse3DScripts()$1'
  'ParseDate (Mask$, Date$) - Transform a string date into a regular date value, to be used with other date functions.':
    'prefix': 'ParseDate'
    'body': 'ParseDate(${1:Mask.s})$2'
  'ParseJSON (#JSON, Input$ [, Flags]) - Parse JSON data from a string':
    'prefix': 'ParseJSON'
    'body': 'ParseJSON(${1:#JSON})$2'
  'ParseXML (#XML, Input$) - Parse XML from a string. The XML must be encoded in PB string format':
    'prefix': 'ParseXML'
    'body': 'ParseXML(${1:#XML})$2'
  'ParticleColorFader (#ParticleEmitter, RedRate, GreenRate, BlueRate) - Change the particles color fader rate.':
    'prefix': 'ParticleColorFader'
    'body': 'ParticleColorFader(${1:#ParticleEmitter}, ${2:RedRate}, ${3:GreenRate})$4'
  'ParticleColorRange (#ParticleEmitter, StartColor, EndColor) - Change the particles color range.':
    'prefix': 'ParticleColorRange'
    'body': 'ParticleColorRange(${1:#ParticleEmitter}, ${2:StartColor})$3'
  'ParticleEmissionRate (#ParticleEmitter, Rate) - Change the #ParticleEmitter emission rate (particles per seconds).':
    'prefix': 'ParticleEmissionRate'
    'body': 'ParticleEmissionRate(${1:#ParticleEmitter})$2'
  'ParticleEmitterDirection (#ParticleEmitter, x, y, z) - Change the #ParticleEmitter direction.':
    'prefix': 'ParticleEmitterDirection'
    'body': 'ParticleEmitterDirection(${1:#ParticleEmitter}, ${2:x}, ${3:y})$4'
  'ParticleEmitterID (#ParticleEmitter) - Returns the unique ID which identifies the particle emitter in the operating system.':
    'prefix': 'ParticleEmitterID'
    'body': 'ParticleEmitterID(${1:#ParticleEmitter})$2'
  'ParticleEmitterX (#ParticleEmitter [, Mode]) - Return the x position of the #ParticleEmitter.':
    'prefix': 'ParticleEmitterX'
    'body': 'ParticleEmitterX(${1:#ParticleEmitter})$2'
  'ParticleEmitterY (#ParticleEmitter [, Mode]) - Return the y position of the #ParticleEmitter.':
    'prefix': 'ParticleEmitterY'
    'body': 'ParticleEmitterY(${1:#ParticleEmitter})$2'
  'ParticleEmitterZ (#ParticleEmitter [, Mode]) - Return the z position of the #ParticleEmitter.':
    'prefix': 'ParticleEmitterZ'
    'body': 'ParticleEmitterZ(${1:#ParticleEmitter})$2'
  'ParticleMaterial (#ParticleEmitter, MaterialID) - Change the #ParticleEmitter material with the new one.':
    'prefix': 'ParticleMaterial'
    'body': 'ParticleMaterial(${1:#ParticleEmitter})$2'
  'ParticleSize (#ParticleEmitter, Width, Height) - Change the particles dimensions.':
    'prefix': 'ParticleSize'
    'body': 'ParticleSize(${1:#ParticleEmitter}, ${2:Width})$3'
  'ParticleSpeedFactor (#ParticleEmitter, SpeedFactor) - Change the particles speed factor.':
    'prefix': 'ParticleSpeedFactor'
    'body': 'ParticleSpeedFactor(${1:#ParticleEmitter})$2'
  'ParticleTimeToLive (#ParticleEmitter, MininumTime, MaximumTime) - Change the particles time to live.':
    'prefix': 'ParticleTimeToLive'
    'body': 'ParticleTimeToLive(${1:#ParticleEmitter}, ${2:MininumTime})$3'
  'ParticleVelocity (#ParticleEmitter, Minimum, Maximum) - Change the particles velocity.':
    'prefix': 'ParticleVelocity'
    'body': 'ParticleVelocity(${1:#ParticleEmitter}, ${2:Minimum})$3'
  'PathCursorX () - Get the current X coordinate of the path cursor':
    'prefix': 'PathCursorX'
    'body': 'PathCursorX()$1'
  'PathCursorY () - Get the current Y coordinate of the path cursor':
    'prefix': 'PathCursorY'
    'body': 'PathCursorY()$1'
  'PathRequester (Title$, InitialPath$) - Open the standard path requester which allow to select a path.':
    'prefix': 'PathRequester'
    'body': 'PathRequester(${1:Title.s})$2'
  'PauseAudioCD () - Pause the AudioCD playback.':
    'prefix': 'PauseAudioCD'
    'body': 'PauseAudioCD()$1'
  'PauseMovie (#Movie) - Pause the movie playback.':
    'prefix': 'PauseMovie'
    'body': 'PauseMovie(${1:#Movie})$2'
  'PauseSound (#Sound [, Channel]) - Pause the specified sound (if it was playing).':
    'prefix': 'PauseSound'
    'body': 'PauseSound(${1:#Sound})$2'
  'PauseThread (Thread) - Pause the thread execution.':
    'prefix': 'PauseThread'
    'body': 'PauseThread(${1:Thread})$2'
  'PdfVectorOutput (Filename$, Width.d, Height.d [, Unit]) - Create a vector drawing output to create a PDF file':
    'prefix': 'PdfVectorOutput'
    'body': 'PdfVectorOutput(${1:Filename.s}, ${2:Width.d})$3'
  'PeekA (Memory) - Reads an ascii character (1 byte) from the specified memory address.':
    'prefix': 'PeekA'
    'body': 'PeekA(${1:Memory})$2'
  'PeekB (*MemoryBuffer) - Read a byte number from the address. Unsigned=PeekB(adr) & $FF':
    'prefix': 'PeekB'
    'body': 'PeekB(${1:*MemoryBuffer})$2'
  'PeekC (Memory) - Reads a character (1 bytes in ascii, 2 bytes in unicodee) from the specified memory address.':
    'prefix': 'PeekC'
    'body': 'PeekC(${1:Memory})$2'
  'PeekD (Memory) - Reads a double (8 bytes) from the specified memory address.':
    'prefix': 'PeekD'
    'body': 'PeekD(${1:Memory})$2'
  'PeekF (*MemoryBuffer) - Read a float (4 bytes) from the specified memory address.':
    'prefix': 'PeekF'
    'body': 'PeekF(${1:*MemoryBuffer})$2'
  'PeekI (Memory) - Reads an integer (8 bytes) from the specified memory address.':
    'prefix': 'PeekI'
    'body': 'PeekI(${1:Memory})$2'
  'PeekL (*MemoryBuffer) - Read a long (4 bytes) number from the specified memory address.':
    'prefix': 'PeekL'
    'body': 'PeekL(${1:*MemoryBuffer})$2'
  'PeekQ (Memory) - Reads a quad (8 bytes) from the specified memory address.':
    'prefix': 'PeekQ'
    'body': 'PeekQ(${1:Memory})$2'
  'PeekS (Memory [, Length [, Format]]) - Read a null terminated string at the specified memory address.':
    'prefix': 'PeekS'
    'body': 'PeekS(${1:Memory})$2'
  'PeekU (Memory) - Reads an unicode character (2 bytes) from the specified memory address.':
    'prefix': 'PeekU'
    'body': 'PeekU(${1:Memory})$2'
  'PeekW (*MemoryBuffer) - Read a word (2 bytes) number from the specified memory address.':
    'prefix': 'PeekW'
    'body': 'PeekW(${1:*MemoryBuffer})$2'
  'PickX () - Returns the last pick X position':
    'prefix': 'PickX'
    'body': 'PickX()$1'
  'PickY () - Returns the last pick Y position':
    'prefix': 'PickY'
    'body': 'PickY()$1'
  'PickZ () - Returns the last pick Z position':
    'prefix': 'PickZ'
    'body': 'PickZ()$1'
  'Pitch (ObjectID, Value.f, Mode) - Pitch the specifed object.':
    'prefix': 'Pitch'
    'body': 'Pitch(${1:ObjectID}, ${2:Value.f})$3'
  'PlayAudioCD (StartTrack, EndTrack) - Start to play the CD-Audio from \'StartTrack\' until the end of \'EndTrack\'.':
    'prefix': 'PlayAudioCD'
    'body': 'PlayAudioCD(${1:StartTrack})$2'
  'PlayMovie (#Movie, WindowID) - Start to play a movie previously loaded with LoadMovie() on the specified window.':
    'prefix': 'PlayMovie'
    'body': 'PlayMovie(${1:#Movie})$2'
  'PlayMusic (#Music) - Start to play the specified module previously loaded with the LoadMusic() command.':
    'prefix': 'PlayMusic'
    'body': 'PlayMusic(${1:#Music})$2'
  'PlaySound (#Sound [, Flags [, Volume]]) - Start to play the #Sound.':
    'prefix': 'PlaySound'
    'body': 'PlaySound(${1:#Sound})$2'
  'PlaySound3D (#Sound3D [, Flags]) - Start to play the #Sound3D.':
    'prefix': 'PlaySound3D'
    'body': 'PlaySound3D(${1:#Sound3D})$2'
  'Plot (x, y [, Color]) - Draw a plot at the given coordinates in the current output.':
    'prefix': 'Plot'
    'body': 'Plot(${1:x})$2'
  'Point (x, y) - Return the color used at the coordinates (x,y) in the current output.':
    'prefix': 'Point'
    'body': 'Point(${1:x})$2'
  'PointJoint (#Joint, EntityID, PivotX, PivotY, PivotZ [, EntityID2, PivotX2, PivotY2, PivotZ2])':
    'prefix': 'PointJoint'
    'body': 'PointJoint(${1:#Joint}, ${2:EntityID}, ${3:PivotX}, ${4:PivotY})$5'
  'PointPick (#Camera, x, y) - Get the direction of the given point':
    'prefix': 'PointPick'
    'body': 'PointPick(${1:#Camera}, ${2:x})$3'
  'PokeA (*MemoryBuffer, Ascii.a) - Write an ascii character (1 byte) to the specified memory address.':
    'prefix': 'PokeA'
    'body': 'PokeA(${1:*MemoryBuffer})$2'
  'PokeB (*MemoryBuffer, Number) - Write a byte number to the specified memory address.':
    'prefix': 'PokeB'
    'body': 'PokeB(${1:*MemoryBuffer})$2'
  'PokeC (*MemoryBuffer, Character.c) - Write a character (1 byte in ascii, 2 bytes in unicode) to the specified memory address.':
    'prefix': 'PokeC'
    'body': 'PokeC(${1:*MemoryBuffer})$2'
  'PokeD (*MemoryBuffer, Double.d) - Write a double (8 bytes) to the specified memory address.':
    'prefix': 'PokeD'
    'body': 'PokeD(${1:*MemoryBuffer})$2'
  'PokeF (*MemoryBuffer, Number.f) - Write a float (4 bytes) to the specified memory address.':
    'prefix': 'PokeF'
    'body': 'PokeF(${1:*MemoryBuffer})$2'
  'PokeI (*MemoryBuffer, Number) - Write an integer (8 bytes) to the specified memory address.':
    'prefix': 'PokeI'
    'body': 'PokeI(${1:*MemoryBuffer})$2'
  'PokeL (*MemoryBuffer, Number) - Write a long (4 bytes) number to the specified memory address.':
    'prefix': 'PokeL'
    'body': 'PokeL(${1:*MemoryBuffer})$2'
  'PokeQ (*MemoryBuffer, Quad.q) - Write a quad (8 bytes) to the specified memory address.':
    'prefix': 'PokeQ'
    'body': 'PokeQ(${1:*MemoryBuffer})$2'
  'PokeS (*MemoryBuffer, Text$ [, Length [, Flags]]) - Write a string (including the ending \'0\') to the specified memory address.':
    'prefix': 'PokeS'
    'body': 'PokeS(${1:*MemoryBuffer})$2'
  'PokeU (*MemoryBuffer, Unicode.U) - Write an unicode character (2 bytes) to the specified memory address.':
    'prefix': 'PokeU'
    'body': 'PokeU(${1:*MemoryBuffer})$2'
  'PokeW (*MemoryBuffer, Number) - Write a word (2 bytes) number to the specified memory address.':
    'prefix': 'PokeW'
    'body': 'PokeW(${1:*MemoryBuffer})$2'
  'PopListPosition (List()) - Restores the current list position':
    'prefix': 'PopListPosition'
    'body': 'PopListPosition(${1:List()})$2'
  'PopMapPosition (Map()) - Restores the current map position':
    'prefix': 'PopMapPosition'
    'body': 'PopMapPosition(${1:Map()})$2'
  'PostEvent (Event [, Window, Object [, Type [, Data]]]) - Post an event to the event queue.':
    'prefix': 'PostEvent'
    'body': 'PostEvent(${1:Event})$2'
  'Pow (Number, Exponent) - Returns the Number^Power.':
    'prefix': 'Pow'
    'body': 'Pow(${1:Number})$2'
  'PreferenceComment (Comment$) - Add a comment to the current preference file.':
    'prefix': 'PreferenceComment'
    'body': 'PreferenceComment(${1:Comment.s})$2'
  'PreferenceGroup (GroupName$) - Search or create the group in the preference file.':
    'prefix': 'PreferenceGroup'
    'body': 'PreferenceGroup(${1:GroupName.s})$2'
  'PreferenceGroupName () - Get the name of the currently examined preference group.':
    'prefix': 'PreferenceGroupName'
    'body': 'PreferenceGroupName()$1'
  'PreferenceKeyName () - Get the name of the currently examined preference key.':
    'prefix': 'PreferenceKeyName'
    'body': 'PreferenceKeyName()$1'
  'PreferenceKeyValue () - Get the value of the currently examined preference key as a string.':
    'prefix': 'PreferenceKeyValue'
    'body': 'PreferenceKeyValue()$1'
  'PreviousDatabaseRow (#Database) - Retrieves information about the previous database row.':
    'prefix': 'PreviousDatabaseRow'
    'body': 'PreviousDatabaseRow(${1:#Database})$2'
  'PreviousElement (List()) - Moves from the current element to the previous element in the list.':
    'prefix': 'PreviousElement'
    'body': 'PreviousElement(${1:List()})$2'
  'PreviousXMLNode (Node) - Get the previous XML node on the same level as the given node':
    'prefix': 'PreviousXMLNode'
    'body': 'PreviousXMLNode(${1:Node})$2'
  'Print (Text$) - Display the Text$ in the console.':
    'prefix': 'Print'
    'body': 'Print(${1:Text.s})$2'
  'PrinterOutput () - Return the printer drawing area, to be used with the 2DDrawing commands.':
    'prefix': 'PrinterOutput'
    'body': 'PrinterOutput()$1'
  'PrinterPageHeight ()  - Return the Heigt of the drawing area, in pixel.':
    'prefix': 'PrinterPageHeight'
    'body': 'PrinterPageHeight()$1'
  'PrinterPageWidth () - Return the witdh of the drawing area, in pixel.':
    'prefix': 'PrinterPageWidth'
    'body': 'PrinterPageWidth()$1'
  'PrinterVectorOutput ([Unit]) - Return the printer drawing area for vector drawing output.':
    'prefix': 'PrinterVectorOutput'
    'body': 'PrinterVectorOutput()$1'
  'PrintN (Text$) - Display the Text$ in the console and add a line return.':
    'prefix': 'PrintN'
    'body': 'PrintN(${1:Text.s})$2'
  'PrintRequester () - Open a print requester, necessary to print.':
    'prefix': 'PrintRequester'
    'body': 'PrintRequester()$1'
  'ProgramExitCode (Program) - Get the exitcode of the specified program':
    'prefix': 'ProgramExitCode'
    'body': 'ProgramExitCode(${1:Program})$2'
  'ProgramFilename () - Get the full path and filename of the executable of this program':
    'prefix': 'ProgramFilename'
    'body': 'ProgramFilename()$1'
  'ProgramID (Program) - Returns the global Process ID for the running program':
    'prefix': 'ProgramID'
    'body': 'ProgramID(${1:Program})$2'
  'ProgramParameter ([Index]) - Get the next passed program parameter, or the parameter at Index':
    'prefix': 'ProgramParameter'
    'body': 'ProgramParameter()$1'
  'ProgramRunning (Program) - Check if the specified program is still running':
    'prefix': 'ProgramRunning'
    'body': 'ProgramRunning(${1:Program})$2'
  'ProgressBarGadget (#Gadget, x, y, Width, Height, Minimum, Maximum [, Flags]) - Creates a ProgressBar gadget in the current gadgetList.':
    'prefix': 'ProgressBarGadget'
    'body': 'ProgressBarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7'
  'ProgressBarGadget3D (#Gadget3D, x, y, Width, Height, Minimum, Maximum) - Creates a ProgressBar gadget in the current gadgetList.':
    'prefix': 'ProgressBarGadget3D'
    'body': 'ProgressBarGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7'
  'PurifierGranularity (GlobalGranularity, LocalGranularity, StringGranularity, DymamicGranularity) - Change the Purifier check granularities':
    'prefix': 'PurifierGranularity'
    'body': 'PurifierGranularity(${1:GlobalGranularity}, ${2:LocalGranularity}, ${3:StringGranularity})$4'
  'PushListPosition (List()) - Saves the current list position for later use':
    'prefix': 'PushListPosition'
    'body': 'PushListPosition(${1:List()})$2'
  'PushMapPosition (Map()) - Saves the current map position for later use':
    'prefix': 'PushMapPosition'
    'body': 'PushMapPosition(${1:Map()})$2'
  'Radian (Angle) - Converts the given angle from degree to radian.':
    'prefix': 'Radian'
    'body': 'Radian(${1:Angle})$2'
  'RaiseError (ErrorNumber) - Raise the given error and call the error handler or exit':
    'prefix': 'RaiseError'
    'body': 'RaiseError(${1:ErrorNumber})$2'
  'Random (Maximum [, Minimum]) - Return a random number between 0 (unless \'Minimum\' is specified) and the \'Maximum\' value.':
    'prefix': 'Random'
    'body': 'Random(${1:Maximum})$2'
  'RandomData (*Buffer, Length) - Fill the buffer with bytes from the random number generator.':
    'prefix': 'RandomData'
    'body': 'RandomData(${1:*Buffer})$2'
  'RandomizeArray (Array() [, Start, End]) - Reorder the items of the specified array in a random order.':
    'prefix': 'RandomizeArray'
    'body': 'RandomizeArray(${1:Array()})$2'
  'RandomizeList (List() [, Start, End]) - Reorder the items of the specified list in a random order.':
    'prefix': 'RandomizeList'
    'body': 'RandomizeList(${1:List()})$2'
  'RandomSeed (Seed) - Reinitialize the random seed, with the specified value.':
    'prefix': 'RandomSeed'
    'body': 'RandomSeed(${1:Seed})$2'
  'RawKey () - Return the last rawkey, after the last Inkey() call.':
    'prefix': 'RawKey'
    'body': 'RawKey()$1'
  'RayCast (x, y, z, DestinationX, DestinationY, DestinationZ, PickMask) - Returns #True if the ray has crossed an object.':
    'prefix': 'RayCast'
    'body': 'RayCast(${1:x}, ${2:y}, ${3:z}, ${4:DestinationX}, ${5:DestinationY}, ${6:DestinationZ})$7'
  'RayCollide (x, y, z, DestinationX, DestinationY, DestinationZ [, CollisionGroup, CollisionMask]) - Check if the given ray collide with an object':
    'prefix': 'RayCollide'
    'body': 'RayCollide(${1:x}, ${2:y}, ${3:z}, ${4:DestinationX}, ${5:DestinationY})$6'
  'RayPick (x, y, z, DestinationX, DestinationY, DestinationZ [, PickMask]) - Returns the first #Entity crossed by the ray.':
    'prefix': 'RayPick'
    'body': 'RayPick(${1:x}, ${2:y}, ${3:z}, ${4:DestinationX}, ${5:DestinationY})$6'
  'ReadAsciiCharacter (#File) - Read one ascii character from the specified file.':
    'prefix': 'ReadAsciiCharacter'
    'body': 'ReadAsciiCharacter(${1:#File})$2'
  'ReadByte (#File) - Read one byte from the specified file.':
    'prefix': 'ReadByte'
    'body': 'ReadByte(${1:#File})$2'
  'ReadCGI () - Read the CGI web content.':
    'prefix': 'ReadCGI'
    'body': 'ReadCGI()$1'
  'ReadCharacter (#File [, Format]) - Read a character from the specified file.':
    'prefix': 'ReadCharacter'
    'body': 'ReadCharacter(${1:#File})$2'
  'ReadConsoleData (*Buffer, Size) - Read data from the console input':
    'prefix': 'ReadConsoleData'
    'body': 'ReadConsoleData(${1:*Buffer})$2'
  'ReadData (#File, *MemoryBuffer, LengthToRead) - Read the content from the specified file inside the specified memory buffer.':
    'prefix': 'ReadData'
    'body': 'ReadData(${1:#File}, ${2:*MemoryBuffer})$3'
  'ReadDouble (#File) - Read a double (8 bytes) from the specified file.':
    'prefix': 'ReadDouble'
    'body': 'ReadDouble(${1:#File})$2'
  'ReadFile (#File, FileName$ [, Flags]) - Open an existing file for read only operations.':
    'prefix': 'ReadFile'
    'body': 'ReadFile(${1:#File})$2'
  'ReadFloat (#File) - Read a float (4 bytes) from the specified file.':
    'prefix': 'ReadFloat'
    'body': 'ReadFloat(${1:#File})$2'
  'ReadInteger (#File) - Read an integer from the specified file.':
    'prefix': 'ReadInteger'
    'body': 'ReadInteger(${1:#File})$2'
  'ReadLong (#File) - Read a long (4 bytes) from the specified file.':
    'prefix': 'ReadLong'
    'body': 'ReadLong(${1:#File})$2'
  'ReadPreferenceDouble (Key$, DefaultValue) - Read the double value associated to the keyword.':
    'prefix': 'ReadPreferenceDouble'
    'body': 'ReadPreferenceDouble(${1:Key.s})$2'
  'ReadPreferenceFloat (Key$, DefaultValue) - Read the value associated to the keyword.':
    'prefix': 'ReadPreferenceFloat'
    'body': 'ReadPreferenceFloat(${1:Key.s})$2'
  'ReadPreferenceInteger (Key$, DefaultValue) - Read the value associated to the keyword.':
    'prefix': 'ReadPreferenceInteger'
    'body': 'ReadPreferenceInteger(${1:Key.s})$2'
  'ReadPreferenceLong (Key$, DefaultValue) - Read the value associated to the keyword.':
    'prefix': 'ReadPreferenceLong'
    'body': 'ReadPreferenceLong(${1:Key.s})$2'
  'ReadPreferenceQuad (Key$, DefaultValue) - Read the quad value associated to the keyword.':
    'prefix': 'ReadPreferenceQuad'
    'body': 'ReadPreferenceQuad(${1:Key.s})$2'
  'ReadPreferenceString (Key$, DefaultValue$) - Read the value associated to the keyword.':
    'prefix': 'ReadPreferenceString'
    'body': 'ReadPreferenceString(${1:Key.s})$2'
  'ReadProgramData (Program, *Buffer, Size) - Read output of the program into a buffer':
    'prefix': 'ReadProgramData'
    'body': 'ReadProgramData(${1:Program}, ${2:*Buffer})$3'
  'ReadProgramError (Program [, Format]) - Read a line from the standard error output of the program':
    'prefix': 'ReadProgramError'
    'body': 'ReadProgramError(${1:Program})$2'
  'ReadProgramString (Program [, Format]) - Read a line from the standard output of the program':
    'prefix': 'ReadProgramString'
    'body': 'ReadProgramString(${1:Program})$2'
  'ReadQuad (#File) - Read a quad (8 bytes) from the specified file.':
    'prefix': 'ReadQuad'
    'body': 'ReadQuad(${1:#File})$2'
  'ReadSerialPortData (#SerialPort, *Buffer, Length) - Read an arbitrary amount of data from the #SerialPort.':
    'prefix': 'ReadSerialPortData'
    'body': 'ReadSerialPortData(${1:#SerialPort}, ${2:*Buffer})$3'
  'ReadString (#File [, Flags [, Length]]) - Read a string from the specified file.':
    'prefix': 'ReadString'
    'body': 'ReadString(${1:#File})$2'
  'ReadStringFormat (#File) - Try to detect the String format in the file from a BOM. (Byte Order Mark)':
    'prefix': 'ReadStringFormat'
    'body': 'ReadStringFormat(${1:#File})$2'
  'ReadUnicodeCharacter (#File) - Read one unicode character from the specified file.':
    'prefix': 'ReadUnicodeCharacter'
    'body': 'ReadUnicodeCharacter(${1:#File})$2'
  'ReadWord (#File) - Read a word (2 bytes) from the specified file.':
    'prefix': 'ReadWord'
    'body': 'ReadWord(${1:#File})$2'
  'ReAllocateMemory (Memory, Size [, Flags]) - ReAllocates a contiguous memory area according to the specified size.':
    'prefix': 'ReAllocateMemory'
    'body': 'ReAllocateMemory(${1:Memory})$2'
  'ReceiveFTPFile (#Ftp, RemoteFilename$, Filename$ [, Asynchronous]) - Receive a file from a FTP Server.':
    'prefix': 'ReceiveFTPFile'
    'body': 'ReceiveFTPFile(${1:#Ftp}, ${2:RemoteFilename.s})$3'
  'ReceiveHTTPFile (URL$, Filename$ [, Flags]) - Download a file from an URL.':
    'prefix': 'ReceiveHTTPFile'
    'body': 'ReceiveHTTPFile(${1:URL.s})$2'
  'ReceiveHTTPMemory (URL$ [, Flags]) - Download a file from an URL to a memory buffer.':
    'prefix': 'ReceiveHTTPMemory'
    'body': 'ReceiveHTTPMemory(${1:URL.s})$2'
  'ReceiveNetworkData (ClientID, *DataBuffer, DataBufferLength) - Receive a raw data from the specified client.':
    'prefix': 'ReceiveNetworkData'
    'body': 'ReceiveNetworkData(${1:ClientID}, ${2:*DataBuffer})$3'
  'Red (Color) - Returns the red component of the given color':
    'prefix': 'Red'
    'body': 'Red(${1:Color})$2'
  'RefreshDialog (#Dialog) - Recalculate the dialog dimension and adjust it if necessary.':
    'prefix': 'RefreshDialog'
    'body': 'RefreshDialog(${1:#Dialog})$2'
  'RegularExpressionError () - Return the last regular expression error.':
    'prefix': 'RegularExpressionError'
    'body': 'RegularExpressionError()$1'
  'RegularExpressionGroup (#RegularExpression, Group) - Get the content of a matching group.':
    'prefix': 'RegularExpressionGroup'
    'body': 'RegularExpressionGroup(${1:#RegularExpression})$2'
  'RegularExpressionGroupLength (#RegularExpression, Group) - Get the length of a matching group.':
    'prefix': 'RegularExpressionGroupLength'
    'body': 'RegularExpressionGroupLength(${1:#RegularExpression})$2'
  'RegularExpressionGroupPosition (#RegularExpression, Group) - Get the position of a matching group within the current match.':
    'prefix': 'RegularExpressionGroupPosition'
    'body': 'RegularExpressionGroupPosition(${1:#RegularExpression})$2'
  'RegularExpressionMatchLength (#RegularExpression) - Get the length of the current regular expression match.':
    'prefix': 'RegularExpressionMatchLength'
    'body': 'RegularExpressionMatchLength(${1:#RegularExpression})$2'
  'RegularExpressionMatchPosition (#RegularExpression) - Get the position in the string of the current regular expression match.':
    'prefix': 'RegularExpressionMatchPosition'
    'body': 'RegularExpressionMatchPosition(${1:#RegularExpression})$2'
  'RegularExpressionMatchString (#RegularExpression) - Get the matching string from the current regular expression match.':
    'prefix': 'RegularExpressionMatchString'
    'body': 'RegularExpressionMatchString(${1:#RegularExpression})$2'
  'RegularExpressionNamedGroup (#RegularExpression, GroupName$) - Get the content of a matching named group.':
    'prefix': 'RegularExpressionNamedGroup'
    'body': 'RegularExpressionNamedGroup(${1:#RegularExpression})$2'
  'RegularExpressionNamedGroupLength (#RegularExpression, GroupName$) - Get the length of a matching named group.':
    'prefix': 'RegularExpressionNamedGroupLength'
    'body': 'RegularExpressionNamedGroupLength(${1:#RegularExpression})$2'
  'RegularExpressionNamedGroupPosition (#RegularExpression, GroupName$) - Get the position of a matching named group within the current match.':
    'prefix': 'RegularExpressionNamedGroupPosition'
    'body': 'RegularExpressionNamedGroupPosition(${1:#RegularExpression})$2'
  'ReleaseMouse (State) - Releases or acquires the exclusive mouse access.':
    'prefix': 'ReleaseMouse'
    'body': 'ReleaseMouse(${1:State})$2'
  'ReloadMaterial (MaterialName$, Filename$, ParseScript) - Reload the specified material.':
    'prefix': 'ReloadMaterial'
    'body': 'ReloadMaterial(${1:MaterialName.s}, ${2:Filename.s})$3'
  'RemoveBillboard (#Billboard, #BillboardGroup) - Remove the specified #Billboard.':
    'prefix': 'RemoveBillboard'
    'body': 'RemoveBillboard(${1:#Billboard})$2'
  'RemoveEnvironmentVariable (Name$) - Remove the given variable from the environment':
    'prefix': 'RemoveEnvironmentVariable'
    'body': 'RemoveEnvironmentVariable(${1:Name.s})$2'
  'RemoveGadgetColumn (#Gadget, Column) - Remove a column to the specified #Gadget.':
    'prefix': 'RemoveGadgetColumn'
    'body': 'RemoveGadgetColumn(${1:#Gadget})$2'
  'RemoveGadgetItem (#Gadget, Position) - Remove an item of the specified #Gadget at the given Position.':
    'prefix': 'RemoveGadgetItem'
    'body': 'RemoveGadgetItem(${1:#Gadget})$2'
  'RemoveGadgetItem3D (#Gadget3D, Position) - Remove an item of the specified #Gadget3D at the given Position.':
    'prefix': 'RemoveGadgetItem3D'
    'body': 'RemoveGadgetItem3D(${1:#Gadget3D})$2'
  'RemoveJSONElement (*JSONValue, Index) - Remove an element from a JSON array':
    'prefix': 'RemoveJSONElement'
    'body': 'RemoveJSONElement(${1:*JSONValue})$2'
  'RemoveJSONMember (*JSONValue, Key$) - Remove a member from a JSON object':
    'prefix': 'RemoveJSONMember'
    'body': 'RemoveJSONMember(${1:*JSONValue})$2'
  'RemoveKeyboardShortcut (#Window, Key) - Remove a keyboard shortcut from the specified #Window.':
    'prefix': 'RemoveKeyboardShortcut'
    'body': 'RemoveKeyboardShortcut(${1:#Window})$2'
  'RemoveMailRecipient (#Mail [, Address$ [, Flags]]) - Remove a recipient to the speicifed #Mail.':
    'prefix': 'RemoveMailRecipient'
    'body': 'RemoveMailRecipient(${1:#Mail})$2'
  'RemoveMaterialLayer (#Material) - Remove the top most texture layer.':
    'prefix': 'RemoveMaterialLayer'
    'body': 'RemoveMaterialLayer(${1:#Material})$2'
  'RemovePreferenceGroup (GroupName$) - Remove the group and all keys from the file.':
    'prefix': 'RemovePreferenceGroup'
    'body': 'RemovePreferenceGroup(${1:GroupName.s})$2'
  'RemovePreferenceKey (Name$) - Remove the specified key from the current group.':
    'prefix': 'RemovePreferenceKey'
    'body': 'RemovePreferenceKey(${1:Name.s})$2'
  'RemoveString (String$, RemoveString$ [, Mode [, StartPosition [, NbOccurences]]]) - Finds occurrences of \'StringToRemove$\' into the given \'String$\' and removes them.':
    'prefix': 'RemoveString'
    'body': 'RemoveString(${1:String.s})$2'
  'RemoveSysTrayIcon (#SysTrayIcon) - Remove the icon from the Systray area.':
    'prefix': 'RemoveSysTrayIcon'
    'body': 'RemoveSysTrayIcon(${1:#SysTrayIcon})$2'
  'RemoveWindowTimer (#Window, Timer) - Remove the timer event from the window.':
    'prefix': 'RemoveWindowTimer'
    'body': 'RemoveWindowTimer(${1:#Window})$2'
  'RemoveXMLAttribute (Node, Attribute$) - Remove the attribute entry from the XML node':
    'prefix': 'RemoveXMLAttribute'
    'body': 'RemoveXMLAttribute(${1:Node})$2'
  'RenameFile (OldFileName$, NewFileName$) - Rename the old file to the new file.':
    'prefix': 'RenameFile'
    'body': 'RenameFile(${1:OldFileName.s})$2'
  'RenameFTPFile (#Ftp, Filename$, NewFilename$) - Rename or move a file on the FTP server.':
    'prefix': 'RenameFTPFile'
    'body': 'RenameFTPFile(${1:#Ftp}, ${2:Filename.s})$3'
  'RenderWorld ([ElapsedPhysicTime]) - Renders the 3D world on the screen.':
    'prefix': 'RenderWorld'
    'body': 'RenderWorld()$1'
  'ReplaceRegularExpression (#RegularExpression, String$, ReplaceString$) - Replace some strings according to the regular expression.':
    'prefix': 'ReplaceRegularExpression'
    'body': 'ReplaceRegularExpression(${1:#RegularExpression}, ${2:String.s})$3'
  'ReplaceString (String$, StringToFind$, StringToReplace$ [, Mode [, StartPosition [, NbOccurences]]]) - Replaces occurrences of \'StringToFind$\' with \'StringToReplace$\' in the given \'String$\'.':
    'prefix': 'ReplaceString'
    'body': 'ReplaceString(${1:String.s}, ${2:StringToFind.s})$3'
  'ResetCoordinates ([System]) - Reset the vector drawing coordinate system to the default':
    'prefix': 'ResetCoordinates'
    'body': 'ResetCoordinates()$1'
  'ResetGradientColors () - Clear all colors from the drawing gradient and reset it to BackColor->FrontColor.':
    'prefix': 'ResetGradientColors'
    'body': 'ResetGradientColors()$1'
  'ResetList (List()) - Resets the current list element to be before the first element.':
    'prefix': 'ResetList'
    'body': 'ResetList(${1:List()})$2'
  'ResetMap (Map()) - Resets the current map element before the first element.':
    'prefix': 'ResetMap'
    'body': 'ResetMap(${1:Map()})$2'
  'ResetMaterial (ObjectType) - Reload the materials for all the specified objects.':
    'prefix': 'ResetMaterial'
    'body': 'ResetMaterial(${1:ObjectType})$2'
  'ResetPath () - Clear the current vector drawing path':
    'prefix': 'ResetPath'
    'body': 'ResetPath()$1'
  'ResetProfiler () - Reset the line counts of the profiler.':
    'prefix': 'ResetProfiler'
    'body': 'ResetProfiler()$1'
  'ResizeBillboard (#Billboard, #BillboardGroup, Width, Height) - Change the #Billboard dimensions.':
    'prefix': 'ResizeBillboard'
    'body': 'ResizeBillboard(${1:#Billboard}, ${2:#BillboardGroup}, ${3:Width})$4'
  'ResizeCamera (#Camera, x, y, Width, Height) - Resize the #Camera. All the dimensions are in pourcents.':
    'prefix': 'ResizeCamera'
    'body': 'ResizeCamera(${1:#Camera}, ${2:x}, ${3:y}, ${4:Width})$5'
  'ResizeGadget (#Gadget, x, y, Width, Height) - Resize the specified #Gadget at the given position and dimension.':
    'prefix': 'ResizeGadget'
    'body': 'ResizeGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'ResizeGadget3D (#Gadget3D, x, y, Width, Height) - Resize the specified #Gadget3D at the given position and dimension.':
    'prefix': 'ResizeGadget3D'
    'body': 'ResizeGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5'
  'ResizeImage (#Image, Width, Height [, Mode]) - Resize the #Image to the given dimension.':
    'prefix': 'ResizeImage'
    'body': 'ResizeImage(${1:#Image}, ${2:Width})$3'
  'ResizeJSONElements (*JSONValue, Size) - Resize a JSON array':
    'prefix': 'ResizeJSONElements'
    'body': 'ResizeJSONElements(${1:*JSONValue})$2'
  'ResizeMovie (#Movie, x, y, Width, Height) - Resize and move the movie display area on the movie window.':
    'prefix': 'ResizeMovie'
    'body': 'ResizeMovie(${1:#Movie}, ${2:x}, ${3:y}, ${4:Width})$5'
  'ResizeParticleEmitter (#ParticleEmitter, x, y, z) - Resize the #ParticleEmitter.':
    'prefix': 'ResizeParticleEmitter'
    'body': 'ResizeParticleEmitter(${1:#ParticleEmitter}, ${2:x}, ${3:y})$4'
  'ResizeWindow (#Window, x, y, Width, Height) - Resize the specified window to the given dimensions.':
    'prefix': 'ResizeWindow'
    'body': 'ResizeWindow(${1:#Window}, ${2:x}, ${3:y}, ${4:Width})$5'
  'ResizeWindow3D (#Window3D, x, y, Width, Height) - Resize the specified window to the given dimensions.':
    'prefix': 'ResizeWindow3D'
    'body': 'ResizeWindow3D(${1:#Window3D}, ${2:x}, ${3:y}, ${4:Width})$5'
  'ResolveXMLAttributeName (Node, Attribute$ [, Separator$]) - Resolves all namespaces for the given node attribute':
    'prefix': 'ResolveXMLAttributeName'
    'body': 'ResolveXMLAttributeName(${1:Node})$2'
  'ResolveXMLNodeName (Node [, Separator$]) - Resolves all namespaces for the given node and returns a full node name':
    'prefix': 'ResolveXMLNodeName'
    'body': 'ResolveXMLNodeName(${1:Node})$2'
  'RestoreVectorState () - Restore the vector drawing state to the saved state':
    'prefix': 'RestoreVectorState'
    'body': 'RestoreVectorState()$1'
  'ResumeAudioCD () - Resume the AudioCD playback':
    'prefix': 'ResumeAudioCD'
    'body': 'ResumeAudioCD()$1'
  'ResumeMovie (#Movie) - Starts again to play the movie, after a PauseMovie() command.':
    'prefix': 'ResumeMovie'
    'body': 'ResumeMovie(${1:#Movie})$2'
  'ResumeSound (#Sound [, Channel]) - Resume the play of the specified sound (if it was paused).':
    'prefix': 'ResumeSound'
    'body': 'ResumeSound(${1:#Sound})$2'
  'ResumeThread (Thread) - Resume the thread execution.':
    'prefix': 'ResumeThread'
    'body': 'ResumeThread(${1:Thread})$2'
  'ReverseString (String$) - Reverse all the characters of the string.':
    'prefix': 'ReverseString'
    'body': 'ReverseString(${1:String.s})$2'
  'RGB (Red, Green, Blue) - Returns the 24 bits color corresponding to the given RGB parameters.':
    'prefix': 'RGB'
    'body': 'RGB(${1:Red}, ${2:Green})$3'
  'RGBA (Red, Green, Blue, Alpha) - Returns the 32 bits color corresponding to the given RGBA parameters.':
    'prefix': 'RGBA'
    'body': 'RGBA(${1:Red}, ${2:Green}, ${3:Blue})$4'
  'RibbonEffectColor (#Effect, ChainIndex, Color, FadeoutColor)':
    'prefix': 'RibbonEffectColor'
    'body': 'RibbonEffectColor(${1:#Effect}, ${2:ChainIndex}, ${3:Color})$4'
  'RibbonEffectWidth (#Effect, ChainIndex, Width, FadeoutWidth)':
    'prefix': 'RibbonEffectWidth'
    'body': 'RibbonEffectWidth(${1:#Effect}, ${2:ChainIndex}, ${3:Width})$4'
  'Right (String$, Length) - Returns the last \'Length\' number of characters from the right side of the string.':
    'prefix': 'Right'
    'body': 'Right(${1:String.s})$2'
  'Roll (ObjectID, Value.f, Mode) - Roll the specifed object.':
    'prefix': 'Roll'
    'body': 'Roll(${1:ObjectID}, ${2:Value.f})$3'
  'RootXMLNode (#XML) - Get the root-node of the XML tree':
    'prefix': 'RootXMLNode'
    'body': 'RootXMLNode(${1:#XML})$2'
  'RotateBillboardGroup (#BillboardGroup, x, y, z [, Mode]) - Rotate the #BillboardGroup.':
    'prefix': 'RotateBillboardGroup'
    'body': 'RotateBillboardGroup(${1:#BillboardGroup}, ${2:x}, ${3:y})$4'
  'RotateCamera (#Camera, x, y, z [, Mode]) - Rotate the #Camera.':
    'prefix': 'RotateCamera'
    'body': 'RotateCamera(${1:#Camera}, ${2:x}, ${3:y})$4'
  'RotateCoordinates (x.d, y.d, Angle.d [, System]) - Rotate the vector drawing coordinate system':
    'prefix': 'RotateCoordinates'
    'body': 'RotateCoordinates(${1:x.d}, ${2:y.d})$3'
  'RotateEntity (#Entity, x, y, z [, Mode]) - Rotate the #Entity.':
    'prefix': 'RotateEntity'
    'body': 'RotateEntity(${1:#Entity}, ${2:x}, ${3:y})$4'
  'RotateEntityBone (#Entity, Bone$, x, y, z , Mode) - Rotate the #Entity bone.':
    'prefix': 'RotateEntityBone'
    'body': 'RotateEntityBone(${1:#Entity}, ${2:Bone.s}, ${3:x}, ${4:y}, ${5:z})$6'
  'RotateLight (#Light, x, y, z [, Mode]) - Rotate the #Light.':
    'prefix': 'RotateLight'
    'body': 'RotateLight(${1:#Light}, ${2:x}, ${3:y})$4'
  'RotateMaterial (#Material, Angle, Mode [, Layer]) - Rotate the #Material texture.':
    'prefix': 'RotateMaterial'
    'body': 'RotateMaterial(${1:#Material}, ${2:Angle})$3'
  'RotateNode (#Node, x, y, z [, Mode]) - Rotate the #Node.':
    'prefix': 'RotateNode'
    'body': 'RotateNode(${1:#Node}, ${2:x}, ${3:y})$4'
  'RotateSprite (#Sprite, Angle, Mode) - Rotate the sprite. Angle varies from 0 to 360.':
    'prefix': 'RotateSprite'
    'body': 'RotateSprite(${1:#Sprite}, ${2:Angle})$3'
  'Round (Number, Mode) - Rounds the specified float number according to the given mode.':
    'prefix': 'Round'
    'body': 'Round(${1:Number})$2'
  'RoundBox (x, y, Width, Height, RoundX, RoundY [, Color]) - Draw a box with rounded edges on the current output.':
    'prefix': 'RoundBox'
    'body': 'RoundBox(${1:x}, ${2:y}, ${3:Width}, ${4:Height}, ${5:RoundX})$6'
  'RSet (String$, Length [, Character]) - Pads a string to the right, and adds \'space\' characters to fit the specified length.':
    'prefix': 'RSet'
    'body': 'RSet(${1:String.s})$2'
  'RTrim (String$ [, Character$]) - Removes all the \'space\' or given characters located at the end of a string.':
    'prefix': 'RTrim'
    'body': 'RTrim(${1:String.s})$2'
  'RunProgram (ProgramName$ [, Parameter$, WorkingDirectory$ [, Flags [, SenderProgram]]]) - Launch an external program.':
    'prefix': 'RunProgram'
    'body': 'RunProgram(${1:ProgramName.s})$2'
  'SaveDebugOutput (Filename$) - Save the content of the debug output window to a file.':
    'prefix': 'SaveDebugOutput'
    'body': 'SaveDebugOutput(${1:Filename.s})$2'
  'SaveFileRequester (Title$, DefaultFile$, Pattern$, PatternPosition) - Open the standard requester which allow to save a file.':
    'prefix': 'SaveFileRequester'
    'body': 'SaveFileRequester(${1:Title.s}, ${2:DefaultFile.s}, ${3:Pattern.s})$4'
  'SaveImage (#Image, FileName$ [, Format [, Flags [, Depth]]]) - Save the specified image.':
    'prefix': 'SaveImage'
    'body': 'SaveImage(${1:#Image})$2'
  'SaveJSON (#JSON, FileName$ [, Flags]) - Save JSON data to a file':
    'prefix': 'SaveJSON'
    'body': 'SaveJSON(${1:#JSON})$2'
  'SaveMesh (#Mesh, Filename$)':
    'prefix': 'SaveMesh'
    'body': 'SaveMesh(${1:#Mesh})$2'
  'SaveRenderTexture (#Texture, Filename$) - Save the specified #Texture.':
    'prefix': 'SaveRenderTexture'
    'body': 'SaveRenderTexture(${1:#Texture})$2'
  'SaveSprite (#Sprite, Filename$ [, Format [, Flags]]) - Save a #Sprite on file in various image format.':
    'prefix': 'SaveSprite'
    'body': 'SaveSprite(${1:#Sprite})$2'
  'SaveTerrain (#Terrain, ModifiedOnly) - Save the #Terrain on disk.':
    'prefix': 'SaveTerrain'
    'body': 'SaveTerrain(${1:#Terrain})$2'
  'SaveVectorState () - Save the current vector drawing state':
    'prefix': 'SaveVectorState'
    'body': 'SaveVectorState()$1'
  'SaveXML (#XML, FileName$ [, Flags]) - Save a XML tree to a file':
    'prefix': 'SaveXML'
    'body': 'SaveXML(${1:#XML})$2'
  'ScaleCoordinates (ScaleX.d, ScaleY.d [, System]) - Scale the vector drawing coordinate system':
    'prefix': 'ScaleCoordinates'
    'body': 'ScaleCoordinates(${1:ScaleX.d})$2'
  'ScaleEntity (#Entity, x, y, z [, Mode]) - Scale the #Entity.':
    'prefix': 'ScaleEntity'
    'body': 'ScaleEntity(${1:#Entity}, ${2:x}, ${3:y})$4'
  'ScaleMaterial (#Material, x, y [, Layer]) - Scale the #Material texture.':
    'prefix': 'ScaleMaterial'
    'body': 'ScaleMaterial(${1:#Material}, ${2:x})$3'
  'ScaleNode (#Node, x, y, z [, Mode]) - Scale the #Node.':
    'prefix': 'ScaleNode'
    'body': 'ScaleNode(${1:#Node}, ${2:x}, ${3:y})$4'
  'ScaleText3D (#Text3D, x, y, z [, Mode]) - Scale the #Text3D.':
    'prefix': 'ScaleText3D'
    'body': 'ScaleText3D(${1:#Text3D}, ${2:x}, ${3:y})$4'
  'ScintillaGadget (#Gadget, x, y, Width, Height, Callback) - Create Scintilla Gadget':
    'prefix': 'ScintillaGadget'
    'body': 'ScintillaGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'ScintillaSendMessage (#Gadget, Message [, Param [, lParam]]) - Scintilla Send Message':
    'prefix': 'ScintillaSendMessage'
    'body': 'ScintillaSendMessage(${1:#Gadget})$2'
  'ScreenDepth () - Get the screen depth.':
    'prefix': 'ScreenDepth'
    'body': 'ScreenDepth()$1'
  'ScreenHeight () - Get the screen height.':
    'prefix': 'ScreenHeight'
    'body': 'ScreenHeight()$1'
  'ScreenID ()':
    'prefix': 'ScreenID'
    'body': 'ScreenID()$1'
  'ScreenModeDepth () - Get the screen mode depth.':
    'prefix': 'ScreenModeDepth'
    'body': 'ScreenModeDepth()$1'
  'ScreenModeHeight () - Get the screen mode height.':
    'prefix': 'ScreenModeHeight'
    'body': 'ScreenModeHeight()$1'
  'ScreenModeRefreshRate () - Get the screen mode refreshrate.':
    'prefix': 'ScreenModeRefreshRate'
    'body': 'ScreenModeRefreshRate()$1'
  'ScreenModeWidth () - Get the screen mode width.':
    'prefix': 'ScreenModeWidth'
    'body': 'ScreenModeWidth()$1'
  'ScreenOutput () - Returns the OutputID of the currently used screen to perform 2D rendering operation on it.':
    'prefix': 'ScreenOutput'
    'body': 'ScreenOutput()$1'
  'ScreenWidth () - Get the screen width.':
    'prefix': 'ScreenWidth'
    'body': 'ScreenWidth()$1'
  'ScrollAreaGadget (#Gadget, x, y, Width, Height, ScrollAreaWidth, ScrollAreaHeight [, ScrollStep [, Flags]]) - Create a ScrollArea gadget in the current GadgetList.':
    'prefix': 'ScrollAreaGadget'
    'body': 'ScrollAreaGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:ScrollAreaWidth})$7'
  'ScrollAreaGadget3D (#Gadget3D, x, y, Width, Height, ScrollAreaWidth, ScrollAreaHeight, ScrollStep) - Create a ScrollArea gadget in the current GadgetList.':
    'prefix': 'ScrollAreaGadget3D'
    'body': 'ScrollAreaGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:ScrollAreaWidth}, ${7:ScrollAreaHeight})$8'
  'ScrollBarGadget (#Gadget, x, y, Width, Height, Min, Max, PageLength [, Flags]) - Create a ScrollBar gadget in the current GadgetList.':
    'prefix': 'ScrollBarGadget'
    'body': 'ScrollBarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Min}, ${7:Max})$8'
  'ScrollBarGadget3D (#Gadget3D, x, y, Width, Height, Min, Max, PageLength [, Flags]) - Create a ScrollBar gadget in the current GadgetList.':
    'prefix': 'ScrollBarGadget3D'
    'body': 'ScrollBarGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Min}, ${7:Max})$8'
  'ScrollMaterial (#Material, x, y, Mode [, Layer]) - Scroll the #Material texture.':
    'prefix': 'ScrollMaterial'
    'body': 'ScrollMaterial(${1:#Material}, ${2:x}, ${3:y})$4'
  'Second (Date) - Returns the second value of the specified date (between 0 and 59).':
    'prefix': 'Second'
    'body': 'Second(${1:Date})$2'
  'SecondWorldCollisionEntity () - Second entity of the current collision.':
    'prefix': 'SecondWorldCollisionEntity'
    'body': 'SecondWorldCollisionEntity()$1'
  'SelectedFilePattern () - Returns the selected pattern index choosen with OpenFileRequester() or SaveFileRequester().':
    'prefix': 'SelectedFilePattern'
    'body': 'SelectedFilePattern()$1'
  'SelectedFontColor () - Returns the RGB color of the font chosen by the user with the FontRequester() command.':
    'prefix': 'SelectedFontColor'
    'body': 'SelectedFontColor()$1'
  'SelectedFontName () - Returns the name of the font chosen by the user with the FontRequester() command.':
    'prefix': 'SelectedFontName'
    'body': 'SelectedFontName()$1'
  'SelectedFontSize () - Returns the size of the font chosen by the user with the FontRequester() command.':
    'prefix': 'SelectedFontSize'
    'body': 'SelectedFontSize()$1'
  'SelectedFontStyle () - Returns the style of the font chosen by the user with the FontRequester() command.':
    'prefix': 'SelectedFontStyle'
    'body': 'SelectedFontStyle()$1'
  'SelectElement (List(), Position) - Change the current list element to the element at the specified position.':
    'prefix': 'SelectElement'
    'body': 'SelectElement(${1:List()})$2'
  'SendFTPFile (#Ftp, Filename$, RemoteFilename$ [, Asynchronous]) - Send a file to a FTP Server.':
    'prefix': 'SendFTPFile'
    'body': 'SendFTPFile(${1:#Ftp}, ${2:Filename.s})$3'
  'SendMail (#Mail, Smtp$ [, Port [, Flags [, User$, Password$]]]) - Send the mail.':
    'prefix': 'SendMail'
    'body': 'SendMail(${1:#Mail})$2'
  'SendNetworkData (ClientID, *MemoryBuffer, Length) - Send raw data to the specified client.':
    'prefix': 'SendNetworkData'
    'body': 'SendNetworkData(${1:ClientID}, ${2:*MemoryBuffer})$3'
  'SendNetworkString (ClientID, String$ [, Format]) - Send a string to the specified client.':
    'prefix': 'SendNetworkString'
    'body': 'SendNetworkString(${1:ClientID})$2'
  'SerialPortError (#SerialPort) - Return the current error on the #SerialPort, if any.':
    'prefix': 'SerialPortError'
    'body': 'SerialPortError(${1:#SerialPort})$2'
  'SerialPortID (#SerialPort) - Return the unique ID which identifies the SerialPort in the operating system.':
    'prefix': 'SerialPortID'
    'body': 'SerialPortID(${1:#SerialPort})$2'
  'SerialPortTimeouts (#SerialPort, RIT, RTTC, RTTM, WTTC, WTTM) - Change the default timeouts.':
    'prefix': 'SerialPortTimeouts'
    'body': 'SerialPortTimeouts(${1:#SerialPort}, ${2:RIT}, ${3:RTTC}, ${4:RTTM}, ${5:WTTC})$6'
  'ServerID (#Server) - Return the server system identifier.':
    'prefix': 'ServerID'
    'body': 'ServerID(${1:#Server})$2'
  'SetActiveGadget (#Gadget) - Set the focus on the specified Gadget':
    'prefix': 'SetActiveGadget'
    'body': 'SetActiveGadget(${1:#Gadget})$2'
  'SetActiveGadget3D (#Gadget3D) - Set the focus on the specified Gadget':
    'prefix': 'SetActiveGadget3D'
    'body': 'SetActiveGadget3D(${1:#Gadget3D})$2'
  'SetActiveWindow (#Window) - Activate the specified window, this means than focus has been put on this window.':
    'prefix': 'SetActiveWindow'
    'body': 'SetActiveWindow(${1:#Window})$2'
  'SetActiveWindow3D (#Window3D) - Activate the specified window, this means than focus has been put on this window.':
    'prefix': 'SetActiveWindow3D'
    'body': 'SetActiveWindow3D(${1:#Window3D})$2'
  'SetBundleCurrentDirectory ()':
    'prefix': 'SetBundleCurrentDirectory'
    'body': 'SetBundleCurrentDirectory()$1'
  'SetClipboardImage (#Image) - Set the specified #Image in the clipboard':
    'prefix': 'SetClipboardImage'
    'body': 'SetClipboardImage(${1:#Image})$2'
  'SetClipboardText (Text$) - Pastes the specified Text$ into the clipboard.':
    'prefix': 'SetClipboardText'
    'body': 'SetClipboardText(${1:Text.s})$2'
  'SetCurrentDirectory (Path$) - Change the path of the current directory to the specified one.':
    'prefix': 'SetCurrentDirectory'
    'body': 'SetCurrentDirectory(${1:Path.s})$2'
  'SetDatabaseBlob (#Database, StatementIndex, *Buffer, BufferLength) - Set a blob as a bind variable for the next DatabaseQuery() or DatabaseUpdate()':
    'prefix': 'SetDatabaseBlob'
    'body': 'SetDatabaseBlob(${1:#Database}, ${2:StatementIndex}, ${3:*Buffer})$4'
  'SetDatabaseDouble (#Database, StatementIndex, Value.d) - Set a double as a bind variable for the next DatabaseQuery() or DatabaseUpdate()':
    'prefix': 'SetDatabaseDouble'
    'body': 'SetDatabaseDouble(${1:#Database}, ${2:StatementIndex})$3'
  'SetDatabaseFloat (#Database, StatementIndex, Value.f) - Set a float as a bind variable for the next DatabaseQuery() or DatabaseUpdate()':
    'prefix': 'SetDatabaseFloat'
    'body': 'SetDatabaseFloat(${1:#Database}, ${2:StatementIndex})$3'
  'SetDatabaseLong (#Database, StatementIndex, Value) - Set a number as a bind variable for the next DatabaseQuery() or DatabaseUpdate()':
    'prefix': 'SetDatabaseLong'
    'body': 'SetDatabaseLong(${1:#Database}, ${2:StatementIndex})$3'
  'SetDatabaseNull (#Database, StatementIndex) - Set a NULL value as a bind variable for the next DatabaseQuery() or DatabaseUpdate()':
    'prefix': 'SetDatabaseNull'
    'body': 'SetDatabaseNull(${1:#Database})$2'
  'SetDatabaseQuad (#Database, StatementIndex, Value.q) - Set a quad number as a bind variable for the next DatabaseQuery() or DatabaseUpdate()':
    'prefix': 'SetDatabaseQuad'
    'body': 'SetDatabaseQuad(${1:#Database}, ${2:StatementIndex})$3'
  'SetDatabaseString (#Database, StatementIndex, Value$) - Set a string as a bind variable for the next DatabaseQuery() or DatabaseUpdate()':
    'prefix': 'SetDatabaseString'
    'body': 'SetDatabaseString(${1:#Database}, ${2:StatementIndex})$3'
  'SetDragCallback (@ProcedureName()) - Set a callback to provide feedback while draging.':
    'prefix': 'SetDragCallback'
    'body': 'SetDragCallback(${1:@ProcedureName()})$2'
  'SetDropCallback (@ProcedureName()) - Set a callback to provide feedback while dropping.':
    'prefix': 'SetDropCallback'
    'body': 'SetDropCallback(${1:@ProcedureName()})$2'
  'SetEntityAnimationLength (#Entity, Animation$, Length) - Set the #Entity animation length.':
    'prefix': 'SetEntityAnimationLength'
    'body': 'SetEntityAnimationLength(${1:#Entity}, ${2:Animation.s})$3'
  'SetEntityAnimationTime (#Entity, Animation$, Time) - Set the current #Entity animation time.':
    'prefix': 'SetEntityAnimationTime'
    'body': 'SetEntityAnimationTime(${1:#Entity}, ${2:Animation.s})$3'
  'SetEntityAnimationWeight (#Entity, Animation$, Weight) - Set the #Entity animation weight.':
    'prefix': 'SetEntityAnimationWeight'
    'body': 'SetEntityAnimationWeight(${1:#Entity}, ${2:Animation.s})$3'
  'SetEntityAttribute (#Entity, Attribute, Value) - Set an #Entity attribute value.':
    'prefix': 'SetEntityAttribute'
    'body': 'SetEntityAttribute(${1:#Entity}, ${2:Attribute})$3'
  'SetEntityCollisionFilter (#Entity, Group, Mask) - Set the entity collision group and mask.':
    'prefix': 'SetEntityCollisionFilter'
    'body': 'SetEntityCollisionFilter(${1:#Entity}, ${2:Group})$3'
  'SetEntityMaterial (#Entity, MaterialID [, SubEntity]) - Set the #Entity material.':
    'prefix': 'SetEntityMaterial'
    'body': 'SetEntityMaterial(${1:#Entity})$2'
  'SetEnvironmentVariable (Name$, Value$) - Assign the given Value$ to the environment variable':
    'prefix': 'SetEnvironmentVariable'
    'body': 'SetEnvironmentVariable(${1:Name.s})$2'
  'SetFileAttributes (FileName$, Attributes) - Changes the attributes of the specified file.':
    'prefix': 'SetFileAttributes'
    'body': 'SetFileAttributes(${1:FileName.s})$2'
  'SetFileDate (FileName$, Type, Date) - Changes the modified/created/accessed date of the specified file.':
    'prefix': 'SetFileDate'
    'body': 'SetFileDate(${1:FileName.s}, ${2:Type})$3'
  'SetFrameRate (FrameRate) - Set the frame rate (in frames per second) for the current screen.':
    'prefix': 'SetFrameRate'
    'body': 'SetFrameRate(${1:FrameRate})$2'
  'SetFTPDirectory (#Ftp, Directory$) - Change the current directory.':
    'prefix': 'SetFTPDirectory'
    'body': 'SetFTPDirectory(${1:#Ftp})$2'
  'SetGadgetAttribute (#Gadget, Attribute, Value) - Change the specified #Gadget attribute.':
    'prefix': 'SetGadgetAttribute'
    'body': 'SetGadgetAttribute(${1:#Gadget}, ${2:Attribute})$3'
  'SetGadgetAttribute3D (#Gadget3D, Attribute, Value) - Change the specified #Gadget3D attribute.':
    'prefix': 'SetGadgetAttribute3D'
    'body': 'SetGadgetAttribute3D(${1:#Gadget3D}, ${2:Attribute})$3'
  'SetGadgetColor (#Gadget, ColorType, Color) - Change a color in the Gadget':
    'prefix': 'SetGadgetColor'
    'body': 'SetGadgetColor(${1:#Gadget}, ${2:ColorType})$3'
  'SetGadgetData (#Gadget, Value) - Stores a value for the Gadget.':
    'prefix': 'SetGadgetData'
    'body': 'SetGadgetData(${1:#Gadget})$2'
  'SetGadgetData3D (#Gadget3D, Value) - Stores a value for the Gadget.':
    'prefix': 'SetGadgetData3D'
    'body': 'SetGadgetData3D(${1:#Gadget3D})$2'
  'SetGadgetFont (#Gadget, FontID()) - Change the font which will be used by newly created gadgets.':
    'prefix': 'SetGadgetFont'
    'body': 'SetGadgetFont(${1:#Gadget})$2'
  'SetGadgetItemAttribute (#Gadget, Item, Attribute, Value [, Column]) - Change the specified #Gadget item attribute.':
    'prefix': 'SetGadgetItemAttribute'
    'body': 'SetGadgetItemAttribute(${1:#Gadget}, ${2:Item}, ${3:Attribute})$4'
  'SetGadgetItemColor (#Gadget, Item, ColorType, Color [, Column]) - Change a color in the Gadget item':
    'prefix': 'SetGadgetItemColor'
    'body': 'SetGadgetItemColor(${1:#Gadget}, ${2:Item}, ${3:ColorType})$4'
  'SetGadgetItemData (#Gadget, Item, Value) - Stores a Long value with this Gadget item':
    'prefix': 'SetGadgetItemData'
    'body': 'SetGadgetItemData(${1:#Gadget}, ${2:Item})$3'
  'SetGadgetItemData3D (#Gadget3D, Item, Value) - Stores a Long value with this Gadget item':
    'prefix': 'SetGadgetItemData3D'
    'body': 'SetGadgetItemData3D(${1:#Gadget3D}, ${2:Item})$3'
  'SetGadgetItemImage (#Gadget, Item, ImageID) - Change the image of the speicified gadget item.':
    'prefix': 'SetGadgetItemImage'
    'body': 'SetGadgetItemImage(${1:#Gadget}, ${2:Item})$3'
  'SetGadgetItemState (#Gadget, Position, State) - Change the #Gadget item state.':
    'prefix': 'SetGadgetItemState'
    'body': 'SetGadgetItemState(${1:#Gadget}, ${2:Position})$3'
  'SetGadgetItemState3D (#Gadget3D, Position, State) - Change the #Gadget3D item state.':
    'prefix': 'SetGadgetItemState3D'
    'body': 'SetGadgetItemState3D(${1:#Gadget3D}, ${2:Position})$3'
  'SetGadgetItemText (#Gadget, Position, Text$ [, Column]) - Change the #Gadget item text content.':
    'prefix': 'SetGadgetItemText'
    'body': 'SetGadgetItemText(${1:#Gadget}, ${2:Position})$3'
  'SetGadgetItemText3D (#Gadget3D, Position, Text$ [, Column]) - Change the #Gadget3D item text content.':
    'prefix': 'SetGadgetItemText3D'
    'body': 'SetGadgetItemText3D(${1:#Gadget3D}, ${2:Position})$3'
  'SetGadgetState (#Gadget, State) - Change the #Gadget current state.':
    'prefix': 'SetGadgetState'
    'body': 'SetGadgetState(${1:#Gadget})$2'
  'SetGadgetState3D (#Gadget3D, State) - Change the #Gadget3D current state.':
    'prefix': 'SetGadgetState3D'
    'body': 'SetGadgetState3D(${1:#Gadget3D})$2'
  'SetGadgetText (#Gadget, Text$) - Change the gadget text content of the specified #Gadget.':
    'prefix': 'SetGadgetText'
    'body': 'SetGadgetText(${1:#Gadget})$2'
  'SetGadgetText3D (#Gadget3D, Text$) - Change the gadget text content of the specified #Gadget3D.':
    'prefix': 'SetGadgetText3D'
    'body': 'SetGadgetText3D(${1:#Gadget3D})$2'
  'SetGUITheme3D (ThemeName$, FontName$) - Sets the 3D GUI theme.':
    'prefix': 'SetGUITheme3D'
    'body': 'SetGUITheme3D(${1:ThemeName.s})$2'
  'SetJointAttribute (#Joint, Attribute, Value)':
    'prefix': 'SetJointAttribute'
    'body': 'SetJointAttribute(${1:#Joint}, ${2:Attribute})$3'
  'SetJSONArray (*JSONValue) - Set a JSON value to contain an (empty) array':
    'prefix': 'SetJSONArray'
    'body': 'SetJSONArray(${1:*JSONValue})$2'
  'SetJSONBoolean (*JSONValue, Value) - Set a JSON value to contain a boolean':
    'prefix': 'SetJSONBoolean'
    'body': 'SetJSONBoolean(${1:*JSONValue})$2'
  'SetJSONDouble (*JSONValue, Value.d) - Set a JSON value to contain a double':
    'prefix': 'SetJSONDouble'
    'body': 'SetJSONDouble(${1:*JSONValue})$2'
  'SetJSONFloat (*JSONValue, Value.f) - Set a JSON value to contain a float':
    'prefix': 'SetJSONFloat'
    'body': 'SetJSONFloat(${1:*JSONValue})$2'
  'SetJSONInteger (*JSONValue, Value) - Set a JSON value to contain an integer':
    'prefix': 'SetJSONInteger'
    'body': 'SetJSONInteger(${1:*JSONValue})$2'
  'SetJSONNull (*JSONValue) - Set a JSON value to contain a null':
    'prefix': 'SetJSONNull'
    'body': 'SetJSONNull(${1:*JSONValue})$2'
  'SetJSONObject (*JSONValue) - Set a JSON value to contain an (empty) object':
    'prefix': 'SetJSONObject'
    'body': 'SetJSONObject(${1:*JSONValue})$2'
  'SetJSONQuad (*JSONValue, Value.q) - Set a JSON value to contain a quad':
    'prefix': 'SetJSONQuad'
    'body': 'SetJSONQuad(${1:*JSONValue})$2'
  'SetJSONString (*JSONValue, String$) - Set a JSON value to contain a string':
    'prefix': 'SetJSONString'
    'body': 'SetJSONString(${1:*JSONValue})$2'
  'SetLightColor (#Light, Type, Color) - Change the #Light color value.':
    'prefix': 'SetLightColor'
    'body': 'SetLightColor(${1:#Light}, ${2:Type})$3'
  'SetMailAttribute (#Mail, Attribute, Value$) - Change the specified #Mail attribute':
    'prefix': 'SetMailAttribute'
    'body': 'SetMailAttribute(${1:#Mail}, ${2:Attribute})$3'
  'SetMailBody (#Mail, Body$) - Changes the mail body.':
    'prefix': 'SetMailBody'
    'body': 'SetMailBody(${1:#Mail})$2'
  'SetMaterialAttribute (#Material, Attribute, Value) - Get the specified #Material attribute.':
    'prefix': 'SetMaterialAttribute'
    'body': 'SetMaterialAttribute(${1:#Material}, ${2:Attribute})$3'
  'SetMaterialColor (#Material, Type, Color) - Change the specified #Material color.':
    'prefix': 'SetMaterialColor'
    'body': 'SetMaterialColor(${1:#Material}, ${2:Type})$3'
  'SetMenuItemState (#Menu, MenuItem, State) - Change the specified #Menu item state.':
    'prefix': 'SetMenuItemState'
    'body': 'SetMenuItemState(${1:#Menu}, ${2:MenuItem})$3'
  'SetMenuItemText (#Menu, MenuItem, Text$) - Change the specified #Menu item text.':
    'prefix': 'SetMenuItemText'
    'body': 'SetMenuItemText(${1:#Menu}, ${2:MenuItem})$3'
  'SetMenuTitleText (#Menu, Index, Text$) - Change the specified #Menu title text.':
    'prefix': 'SetMenuTitleText'
    'body': 'SetMenuTitleText(${1:#Menu}, ${2:Index})$3'
  'SetMeshData (#Mesh, SubMesh, DataArray(), Flags, FirstIndex, LastIndex)':
    'prefix': 'SetMeshData'
    'body': 'SetMeshData(${1:#Mesh}, ${2:SubMesh}, ${3:DataArray()}, ${4:Flags}, ${5:FirstIndex})$6'
  'SetMeshMaterial (#Mesh, MaterialID [, SubMesh])':
    'prefix': 'SetMeshMaterial'
    'body': 'SetMeshMaterial(${1:#Mesh})$2'
  'SetMusicPosition (#Music, Position) - Change the current pattern position of the playing module to the new one.':
    'prefix': 'SetMusicPosition'
    'body': 'SetMusicPosition(${1:#Music})$2'
  'SetNodeAnimationKeyFramePosition (#NodeAnimation, KeyFrame, x, y, z) - Set the keyframe position for the #NodeAnimation.':
    'prefix': 'SetNodeAnimationKeyFramePosition'
    'body': 'SetNodeAnimationKeyFramePosition(${1:#NodeAnimation}, ${2:KeyFrame}, ${3:x}, ${4:y})$5'
  'SetNodeAnimationKeyFrameRotation (#NodeAnimation, KeyFrame, Pitch, Yaw, Roll) - Set the keyframe position for the #NodeAnimation.':
    'prefix': 'SetNodeAnimationKeyFrameRotation'
    'body': 'SetNodeAnimationKeyFrameRotation(${1:#NodeAnimation}, ${2:KeyFrame}, ${3:Pitch}, ${4:Yaw})$5'
  'SetNodeAnimationKeyFrameScale (#NodeAnimation, KeyFrame, ScaleX, ScaleY, ScaleZ) - Set the keyframe scale for the #NodeAnimation.':
    'prefix': 'SetNodeAnimationKeyFrameScale'
    'body': 'SetNodeAnimationKeyFrameScale(${1:#NodeAnimation}, ${2:KeyFrame}, ${3:ScaleX}, ${4:ScaleY})$5'
  'SetNodeAnimationLength (#NodeAnimation, Length) - Set the #NodeAnimation length.':
    'prefix': 'SetNodeAnimationLength'
    'body': 'SetNodeAnimationLength(${1:#NodeAnimation})$2'
  'SetNodeAnimationTime (#NodeAnimation, Time) - Set the current #NodeAnimation time.':
    'prefix': 'SetNodeAnimationTime'
    'body': 'SetNodeAnimationTime(${1:#NodeAnimation})$2'
  'SetNodeAnimationWeight (#NodeAnimation, Weight) - Set the #NodeAnimation weight.':
    'prefix': 'SetNodeAnimationWeight'
    'body': 'SetNodeAnimationWeight(${1:#NodeAnimation})$2'
  'SetOrientation (ObjectID, x, y, z, w) - Sets the orientation for the specified object.':
    'prefix': 'SetOrientation'
    'body': 'SetOrientation(${1:ObjectID}, ${2:x}, ${3:y}, ${4:z})$5'
  'SetOrigin (x, y) - Set the coordinate origin for drawing operations':
    'prefix': 'SetOrigin'
    'body': 'SetOrigin(${1:x})$2'
  'SetRenderQueue (ObjectID, Queue [, Priority]) - Change the object order render.':
    'prefix': 'SetRenderQueue'
    'body': 'SetRenderQueue(${1:ObjectID})$2'
  'SetRuntimeDouble (Name, Value) - Change the runtime item value.':
    'prefix': 'SetRuntimeDouble'
    'body': 'SetRuntimeDouble(${1:Name})$2'
  'SetRuntimeInteger (Name, Value) - Change the runtime item value.':
    'prefix': 'SetRuntimeInteger'
    'body': 'SetRuntimeInteger(${1:Name})$2'
  'SetRuntimeString (Name, String$) - Change the runtime item string.':
    'prefix': 'SetRuntimeString'
    'body': 'SetRuntimeString(${1:Name})$2'
  'SetSerialPortStatus (#SerialPort, Attribute, Value) - Change the #SerialPort status.':
    'prefix': 'SetSerialPortStatus'
    'body': 'SetSerialPortStatus(${1:#SerialPort}, ${2:Attribute})$3'
  'SetSoundFrequency (#Sound, Frequency [, Channel]) - Set the new frequency for the #Sound. Values are from 1000 to 100000 hz.':
    'prefix': 'SetSoundFrequency'
    'body': 'SetSoundFrequency(${1:#Sound})$2'
  'SetSoundPosition (#Sound, Position [, Mode [, Channel]]) - Set the current playing position for the #Sound.':
    'prefix': 'SetSoundPosition'
    'body': 'SetSoundPosition(${1:#Sound})$2'
  'SetTerrainTileHeightAtPoint (#Terrain, TileX, TileY, x, y, Height) - Set the height of the #Terrain tile at the specified position.':
    'prefix': 'SetTerrainTileHeightAtPoint'
    'body': 'SetTerrainTileHeightAtPoint(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x}, ${5:y})$6'
  'SetTerrainTileLayerBlend (#Terrain, TileX, TileY, Layer, x, y, Value) - Set the #Terrain tile layer blend value.':
    'prefix': 'SetTerrainTileLayerBlend'
    'body': 'SetTerrainTileLayerBlend(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:Layer}, ${5:x}, ${6:y})$7'
  'SetToolBarButtonState (#ToolBar, ButtonID, State) - Change the state of the specified button':
    'prefix': 'SetToolBarButtonState'
    'body': 'SetToolBarButtonState(${1:#ToolBar}, ${2:ButtonID})$3'
  'SetupTerrains (LigthID, CompositeMapDistance, Flags) - Setup the default options for all terrains.':
    'prefix': 'SetupTerrains'
    'body': 'SetupTerrains(${1:LigthID}, ${2:CompositeMapDistance})$3'
  'SetURLPart (URL$, Parameter$, Value$) - Set the specific part of an URL.':
    'prefix': 'SetURLPart'
    'body': 'SetURLPart(${1:URL.s}, ${2:Parameter.s})$3'
  'SetWindowColor (#Window, Color) - Set the background color of the window.':
    'prefix': 'SetWindowColor'
    'body': 'SetWindowColor(${1:#Window})$2'
  'SetWindowData (#Window, Value) - Stores a value for the window':
    'prefix': 'SetWindowData'
    'body': 'SetWindowData(${1:#Window})$2'
  'SetWindowState (#Window, State) - Set the minimized/maximized state of the window.':
    'prefix': 'SetWindowState'
    'body': 'SetWindowState(${1:#Window})$2'
  'SetWindowTitle (#Window, Title$) - Changes the current #Window title.':
    'prefix': 'SetWindowTitle'
    'body': 'SetWindowTitle(${1:#Window})$2'
  'SetWindowTitle3D (#Window3D, Title$) - Changes the current #Window3D title.':
    'prefix': 'SetWindowTitle3D'
    'body': 'SetWindowTitle3D(${1:#Window3D})$2'
  'SetXMLAttribute (Node, Attribute$, Value$) - Set the value of the given attribute of the XML node (creates the attribute if needed)':
    'prefix': 'SetXMLAttribute'
    'body': 'SetXMLAttribute(${1:Node}, ${2:Attribute.s})$3'
  'SetXMLEncoding (#XML, Encoding) - Set the encoding used to export/save the XML tree':
    'prefix': 'SetXMLEncoding'
    'body': 'SetXMLEncoding(${1:#XML})$2'
  'SetXMLNodeName (Node, Name$) - Set the (tag-)name of the given XML node':
    'prefix': 'SetXMLNodeName'
    'body': 'SetXMLNodeName(${1:Node})$2'
  'SetXMLNodeOffset (Node, Offset) - Set the number of characters of text between this node and the previous one in the tree':
    'prefix': 'SetXMLNodeOffset'
    'body': 'SetXMLNodeOffset(${1:Node})$2'
  'SetXMLNodeText (Node, Text$) - Set the text content of the given XML node':
    'prefix': 'SetXMLNodeText'
    'body': 'SetXMLNodeText(${1:Node})$2'
  'SetXMLStandalone (#XML, Standalone) - Set the standalone mode of the XML document':
    'prefix': 'SetXMLStandalone'
    'body': 'SetXMLStandalone(${1:#XML})$2'
  'ShortcutGadget (#Gadget, x, y, Width, Height, Shortcut) - Creates a Gadget to select a keyboard shortcut in the current GadgetList.':
    'prefix': 'ShortcutGadget'
    'body': 'ShortcutGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'ShowAssemblyViewer () - Show the assembly viewer window.':
    'prefix': 'ShowAssemblyViewer'
    'body': 'ShowAssemblyViewer()$1'
  'ShowCallstack () - Show the callstack window.':
    'prefix': 'ShowCallstack'
    'body': 'ShowCallstack()$1'
  'ShowDebugOutput () - Open the debug output window.':
    'prefix': 'ShowDebugOutput'
    'body': 'ShowDebugOutput()$1'
  'ShowGUI (Intensity, ShowMouseCursor [, #Camera, Enable]) - Shows or hides the GUI':
    'prefix': 'ShowGUI'
    'body': 'ShowGUI(${1:Intensity})$2'
  'ShowLibraryViewer ([Library$ [, Object]]) - Show the library viewer, optionally displaying an object from a library.':
    'prefix': 'ShowLibraryViewer'
    'body': 'ShowLibraryViewer()$1'
  'ShowMemoryViewer ([*Buffer, Length]) - Show the memory viewer, with an optional memory buffer to display.':
    'prefix': 'ShowMemoryViewer'
    'body': 'ShowMemoryViewer()$1'
  'ShowProfiler () - Show the profiler window.':
    'prefix': 'ShowProfiler'
    'body': 'ShowProfiler()$1'
  'ShowVariableViewer () - Show the variable viewer window.':
    'prefix': 'ShowVariableViewer'
    'body': 'ShowVariableViewer()$1'
  'ShowWatchlist () - Show the waicthlist window.':
    'prefix': 'ShowWatchlist'
    'body': 'ShowWatchlist()$1'
  'Sign (Number) - Returns 1, 0 or -1 depending on the sign of the given number.':
    'prefix': 'Sign'
    'body': 'Sign(${1:Number})$2'
  'SignalSemaphore (Semaphore) - Signal the semaphore object once (increment the count by 1).':
    'prefix': 'SignalSemaphore'
    'body': 'SignalSemaphore(${1:Semaphore})$2'
  'Sin (Angle) - Returns the sinus of the specified angle, in radian.':
    'prefix': 'Sin'
    'body': 'Sin(${1:Angle})$2'
  'SinH (Angle) - Returns the hyperbolic sine of the specified angle.':
    'prefix': 'SinH'
    'body': 'SinH(${1:Angle})$2'
  'SkewCoordinates (AngleX.d, AngleY.d [, System]) - Skew the vector drawing coordinate system':
    'prefix': 'SkewCoordinates'
    'body': 'SkewCoordinates(${1:AngleX.d})$2'
  'SkyBox (Filename$ [, FogColor, FogIntensity, FogStartDistance, FogEndDistance]) - Creates a 6 faces textured cube to simulate a closed world.':
    'prefix': 'SkyBox'
    'body': 'SkyBox(${1:Filename.s})$2'
  'SkyDome (Filename$, Curve [, FogColor, FogIntensity, FogStartDistance, FogEndDistance]) - Creates an artificial sky dome.':
    'prefix': 'SkyDome'
    'body': 'SkyDome(${1:Filename.s})$2'
  'SliderJoint (#Joint, EntityID, FxA, FyA, FzA, EntityID2, FxB, FyB, FzB)':
    'prefix': 'SliderJoint'
    'body': 'SliderJoint(${1:#Joint}, ${2:EntityID}, ${3:FxA}, ${4:FyA}, ${5:FzA}, ${6:EntityID2}, ${7:FxB}, ${8:FyB})$9'
  'SmartWindowRefresh (#Window, State) - Activate or deactivate the smart window refresh.':
    'prefix': 'SmartWindowRefresh'
    'body': 'SmartWindowRefresh(${1:#Window})$2'
  'SortArray (Array(), Options [, Start, End]) - Sort the specified array according to the given options and range.':
    'prefix': 'SortArray'
    'body': 'SortArray(${1:Array()})$2'
  'SortList (List(), Options [, Start, End]) - Sort the specified list according to the given options and range.':
    'prefix': 'SortList'
    'body': 'SortList(${1:List()})$2'
  'SortStructuredArray (Array(), Options, Offset, Type [, Start, End]) - Sort the specified array according to the given options and range.':
    'prefix': 'SortStructuredArray'
    'body': 'SortStructuredArray(${1:Array()}, ${2:Options}, ${3:Offset})$4'
  'SortStructuredList (List(), Options, Offset, Type [, Start, End]) - Sort the specified list according to the given options and range.':
    'prefix': 'SortStructuredList'
    'body': 'SortStructuredList(${1:List()}, ${2:Options}, ${3:Offset})$4'
  'SoundCone3D (#Sound3D, InnerCone, OuterCode, OuterGain) - Specify the sound cone':
    'prefix': 'SoundCone3D'
    'body': 'SoundCone3D(${1:#Sound3D}, ${2:InnerCone}, ${3:OuterCode})$4'
  'SoundID3D (#Sound3D) - Returns the unique systeme identifiant for the sound.':
    'prefix': 'SoundID3D'
    'body': 'SoundID3D(${1:#Sound3D})$2'
  'SoundLength (#Sound [, Mode]) - Returns the length of the #Sound.':
    'prefix': 'SoundLength'
    'body': 'SoundLength(${1:#Sound})$2'
  'SoundListenerLocate (x, y, z) - Change the sound listener position in the world.':
    'prefix': 'SoundListenerLocate'
    'body': 'SoundListenerLocate(${1:x}, ${2:y})$3'
  'SoundPan (#Sound, Pan [, Channel]) - Set the new pan for the #Sound. Values are from -100 to 100.':
    'prefix': 'SoundPan'
    'body': 'SoundPan(${1:#Sound})$2'
  'SoundRange3D (#Sound3D, Minimum, Maximum) - Set the range for the #Sound3D.':
    'prefix': 'SoundRange3D'
    'body': 'SoundRange3D(${1:#Sound3D}, ${2:Minimum})$3'
  'SoundStatus (#Sound [, Channel]) - Get the specified #Sound status.':
    'prefix': 'SoundStatus'
    'body': 'SoundStatus(${1:#Sound})$2'
  'SoundVolume (#Sound, Volume [, Channel]) - Set the new volume for the #Sound. Values are from 0 to 100.':
    'prefix': 'SoundVolume'
    'body': 'SoundVolume(${1:#Sound})$2'
  'SoundVolume3D (#Sound3D, Volume) - Set the new volume for the #Sound3D. Values are from 0 to 100.':
    'prefix': 'SoundVolume3D'
    'body': 'SoundVolume3D(${1:#Sound3D})$2'
  'Space (Length) - Create an empty string of the given \'Length\' filled with \'space\' characters.':
    'prefix': 'Space'
    'body': 'Space(${1:Length})$2'
  'SpinGadget (#Gadget, x, y, Width, Height, Minimum, Maximum [, Flags]) - Create a Spin gadget in the current GadgetList.':
    'prefix': 'SpinGadget'
    'body': 'SpinGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7'
  'SpinGadget3D (#Gadget3D, x, y, Width, Height, Minimum, Maximum) - Create a Spin gadget in the current GadgetList.':
    'prefix': 'SpinGadget3D'
    'body': 'SpinGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7'
  'SplinePointX (#Spline, Index) - Return the x position of the #Spline point.':
    'prefix': 'SplinePointX'
    'body': 'SplinePointX(${1:#Spline})$2'
  'SplinePointY (#Spline, Index) - Return the y position of the #Spline point.':
    'prefix': 'SplinePointY'
    'body': 'SplinePointY(${1:#Spline})$2'
  'SplinePointZ (#Spline, Index) - Return the z position of the #Spline point.':
    'prefix': 'SplinePointZ'
    'body': 'SplinePointZ(${1:#Spline})$2'
  'SplineX (#Spline) - Return the x position of the #Spline.':
    'prefix': 'SplineX'
    'body': 'SplineX(${1:#Spline})$2'
  'SplineY (#Spline) - Return the y position of the #Spline.':
    'prefix': 'SplineY'
    'body': 'SplineY(${1:#Spline})$2'
  'SplineZ (#Spline) - Return the z position of the #Spline.':
    'prefix': 'SplineZ'
    'body': 'SplineZ(${1:#Spline})$2'
  'SplitList (List(), DestinationList() [, KeepCurrent]) - Split List() into List() and DestinationList().':
    'prefix': 'SplitList'
    'body': 'SplitList(${1:List()})$2'
  'SplitterGadget (#Gadget, x, y, Width, Height, #Gadget1, #Gadget2 [, Flags]) - Create a Splitter gadget in the current GadgetList.':
    'prefix': 'SplitterGadget'
    'body': 'SplitterGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:#Gadget1})$7'
  'SpotLightRange (#Light, InnerAngle, OutterAngle [, FallOff])':
    'prefix': 'SpotLightRange'
    'body': 'SpotLightRange(${1:#Light}, ${2:InnerAngle})$3'
  'SpriteBlendingMode (SourceOperation, DestinationOperation) - Changes the realtime blending mode':
    'prefix': 'SpriteBlendingMode'
    'body': 'SpriteBlendingMode(${1:SourceOperation})$2'
  'SpriteCollision (#Sprite1, x1, y1, #Sprite2, x2, y2) - Test if the two sprites are overlapped.':
    'prefix': 'SpriteCollision'
    'body': 'SpriteCollision(${1:#Sprite1}, ${2:x1}, ${3:y1}, ${4:#Sprite2}, ${5:x2})$6'
  'SpriteDepth (#Sprite) - Return the depth of the specified sprite.':
    'prefix': 'SpriteDepth'
    'body': 'SpriteDepth(${1:#Sprite})$2'
  'SpriteHeight (#Sprite) - Return the height in pixel of the specified sprite.':
    'prefix': 'SpriteHeight'
    'body': 'SpriteHeight(${1:#Sprite})$2'
  'SpriteID (#Sprite) - Returns the unique ID which identifies the sprite in the operating system.':
    'prefix': 'SpriteID'
    'body': 'SpriteID(${1:#Sprite})$2'
  'SpriteOutput (#Sprite) - Return the output to the sprite, to be used with StartDrawing()':
    'prefix': 'SpriteOutput'
    'body': 'SpriteOutput(${1:#Sprite})$2'
  'SpritePixelCollision (#Sprite1, x1, y1, #Sprite2, x2, y2) - Test if the two sprites are overlapped.':
    'prefix': 'SpritePixelCollision'
    'body': 'SpritePixelCollision(${1:#Sprite1}, ${2:x1}, ${3:y1}, ${4:#Sprite2}, ${5:x2})$6'
  'SpriteQuality (Quality) - Set the level of rendering. 0=Lowest quality, 1=Bilinear filtering':
    'prefix': 'SpriteQuality'
    'body': 'SpriteQuality(${1:Quality})$2'
  'SpriteWidth (#Sprite) - Return the width in pixel of the specified sprite.':
    'prefix': 'SpriteWidth'
    'body': 'SpriteWidth(${1:#Sprite})$2'
  'Sqr (Value) - Returns the square root of the specified number.':
    'prefix': 'Sqr'
    'body': 'Sqr(${1:Value})$2'
  'StartAESCipher (#Cipher, *Key, KeyBits, *InitializationVector, Mode) - Create a new streaming cipher.':
    'prefix': 'StartAESCipher'
    'body': 'StartAESCipher(${1:#Cipher}, ${2:*Key}, ${3:KeyBits}, ${4:*InitializationVector})$5'
  'StartDrawing (Output) - Change the current drawing output to the specified output.':
    'prefix': 'StartDrawing'
    'body': 'StartDrawing(${1:Output})$2'
  'StartEntityAnimation (#Entity, Animation$ [, Flags]) - Start the specified #Entity animation.':
    'prefix': 'StartEntityAnimation'
    'body': 'StartEntityAnimation(${1:#Entity})$2'
  'StartFingerprint (#Fingerprint, Plugin [, Bits]) - Start a step by step fingerprint calculation.':
    'prefix': 'StartFingerprint'
    'body': 'StartFingerprint(${1:#Fingerprint})$2'
  'StartNodeAnimation (#NodeAnimation [, Flags]) - Start the specified #NodeAnimation.':
    'prefix': 'StartNodeAnimation'
    'body': 'StartNodeAnimation(${1:#NodeAnimation})$2'
  'StartPrinting (JobName$) - Initialize the printer and start a new print job.':
    'prefix': 'StartPrinting'
    'body': 'StartPrinting(${1:JobName.s})$2'
  'StartProfiler () - Start the profiler.':
    'prefix': 'StartProfiler'
    'body': 'StartProfiler()$1'
  'StartVectorDrawing (Output) - Start vector drawing on the specified output':
    'prefix': 'StartVectorDrawing'
    'body': 'StartVectorDrawing(${1:Output})$2'
  'StatusBarHeight (#StatusBar) - Returns the height of the statusbar.':
    'prefix': 'StatusBarHeight'
    'body': 'StatusBarHeight(${1:#StatusBar})$2'
  'StatusBarID (#StatusBar) - Returns the unique ID which identifies the statusbar in the operating system.':
    'prefix': 'StatusBarID'
    'body': 'StatusBarID(${1:#StatusBar})$2'
  'StatusBarImage (#StatusBar, Field, ImageID [, Appearance]) - Set an image to display in the specified statusbar field.':
    'prefix': 'StatusBarImage'
    'body': 'StatusBarImage(${1:#StatusBar}, ${2:Field})$3'
  'StatusBarProgress (#StatusBar, Field, Value [, Appearance [, Min, Max]]) - Set the specified \'Field\' to display a progressbar.':
    'prefix': 'StatusBarProgress'
    'body': 'StatusBarProgress(${1:#StatusBar}, ${2:Field})$3'
  'StatusBarText (#StatusBar, Field, Text$ [, Appearance]) - Change the text of the specified \'Field\' in the given \'#StatusBar\'.':
    'prefix': 'StatusBarText'
    'body': 'StatusBarText(${1:#StatusBar}, ${2:Field})$3'
  'StickyWindow (#Window, State) - Make the window stay in front of all other windows.':
    'prefix': 'StickyWindow'
    'body': 'StickyWindow(${1:#Window})$2'
  'StopAudioCD () - Stop the current CD-Audio playback.':
    'prefix': 'StopAudioCD'
    'body': 'StopAudioCD()$1'
  'StopDrawing () - Must be called after a StartDrawing(), when all graphics operations are finished.':
    'prefix': 'StopDrawing'
    'body': 'StopDrawing()$1'
  'StopEntityAnimation (#Entity, Animation$) - Stop the specified #Entity animation.':
    'prefix': 'StopEntityAnimation'
    'body': 'StopEntityAnimation(${1:#Entity})$2'
  'StopMovie (#Movie) - Stop to play the movie.':
    'prefix': 'StopMovie'
    'body': 'StopMovie(${1:#Movie})$2'
  'StopMusic (#Music) - Stop the current module (if it was playing).':
    'prefix': 'StopMusic'
    'body': 'StopMusic(${1:#Music})$2'
  'StopNodeAnimation (#NodeAnimation) - Stop the specified #NodeAnimation.':
    'prefix': 'StopNodeAnimation'
    'body': 'StopNodeAnimation(${1:#NodeAnimation})$2'
  'StopPrinting () - Finish the print session and send all the data to the printer.':
    'prefix': 'StopPrinting'
    'body': 'StopPrinting()$1'
  'StopProfiler () - Stop the profiler.':
    'prefix': 'StopProfiler'
    'body': 'StopProfiler()$1'
  'StopSound (#Sound [, Channel]) - Stop the specified sound (if it was playing).':
    'prefix': 'StopSound'
    'body': 'StopSound(${1:#Sound})$2'
  'StopSound3D (#Sound3D) - Stop the specified sound (if it was playing).':
    'prefix': 'StopSound3D'
    'body': 'StopSound3D(${1:#Sound3D})$2'
  'StopVectorDrawing () - Stop vector drawing on the current output':
    'prefix': 'StopVectorDrawing'
    'body': 'StopVectorDrawing()$1'
  'Str (Value) - Convert a signed integer number into a string.':
    'prefix': 'Str'
    'body': 'Str(${1:Value})$2'
  'StrD (Value [, NbDecimals]) - Convert a double number into a string.':
    'prefix': 'StrD'
    'body': 'StrD(${1:Value})$2'
  'StrF (Value [, NbDecimals]) - Convert a float number into a string.':
    'prefix': 'StrF'
    'body': 'StrF(${1:Value})$2'
  'StringByteLength (String$ [, Format]) - Get the length in bytes needed to store the string in the given format.':
    'prefix': 'StringByteLength'
    'body': 'StringByteLength(${1:String.s})$2'
  'StringField (String$, Index, Separator$) - Returns the string field at the specified index.':
    'prefix': 'StringField'
    'body': 'StringField(${1:String.s}, ${2:Index})$3'
  'StringFingerprint (String, Plugin [, Bits [, Format]]) - Returns the fingerprint of the specified string.':
    'prefix': 'StringFingerprint'
    'body': 'StringFingerprint(${1:String})$2'
  'StringGadget (#Gadget, x, y, Width, Height, Content$ [, Flags]) - Creates a String gadget in the current GadgetList.':
    'prefix': 'StringGadget'
    'body': 'StringGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'StringGadget3D (#Gadget3D, x, y, Width, Height, Content$ [, Flags]) - Creates a String gadget in the current GadgetList.':
    'prefix': 'StringGadget3D'
    'body': 'StringGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'StrokePath (Width.d [, Flags]) - Draw a line along the vector drawing path':
    'prefix': 'StrokePath'
    'body': 'StrokePath(${1:Width.d})$2'
  'StrU (Value [, Type]) - Convert a value into unsigned form.':
    'prefix': 'StrU'
    'body': 'StrU(${1:Value})$2'
  'SubMeshCount (#Mesh)':
    'prefix': 'SubMeshCount'
    'body': 'SubMeshCount(${1:#Mesh})$2'
  'Sun (x, y, z, Color) - Changes the sun attributes.':
    'prefix': 'Sun'
    'body': 'Sun(${1:x}, ${2:y}, ${3:z})$4'
  'SwapElements (List(), *FirstElement, *SecondElement) - Swap the position of the specified elements.':
    'prefix': 'SwapElements'
    'body': 'SwapElements(${1:List()}, ${2:*FirstElement})$3'
  'SwitchCamera (#Camera, #NewCamera) - Change the active #Camera with the #NewCamera.':
    'prefix': 'SwitchCamera'
    'body': 'SwitchCamera(${1:#Camera})$2'
  'SysTrayIconToolTip (#SysTrayIcon, Text$) - Associate a tooltip text to the specified icon.':
    'prefix': 'SysTrayIconToolTip'
    'body': 'SysTrayIconToolTip(${1:#SysTrayIcon})$2'
  'Tan (Angle) - Returns the tangent of the specified angle, in radian.':
    'prefix': 'Tan'
    'body': 'Tan(${1:Angle})$2'
  'Bool (Expression) - Test the expression and return #True or #False.':
    'prefix': 'Bool'
    'body': 'Bool(${1:Expression})$2'
  'ClearStructure (*Address, Structure) - Clear the structure at the given *Address.':
    'prefix': 'ClearStructure'
    'body': 'ClearStructure(${1:*Address})$2'
  'CopyStructure (*Source, *Destination, Structure) - Copy the structure at the given *Address.':
    'prefix': 'CopyStructure'
    'body': 'CopyStructure(${1:*Source}, ${2:*Destination})$3'
  'Defined (Name, Type) - Returns 1 if the object is defined, or 0 if not.':
    'prefix': 'Defined'
    'body': 'Defined(${1:Name})$2'
  'OffsetOf (Structure\Field) - Returns the offset of the specified structure field.':
    'prefix': 'OffsetOf'
    'body': 'OffsetOf(${1:Structure\Field})$2'
  'SizeOf (Structure) - Returns the size of the given structure.':
    'prefix': 'SizeOf'
    'body': 'SizeOf(${1:Structure})$2'
  'TanH (Angle) - Returns the hyperbolic tangent of the specified angle.':
    'prefix': 'TanH'
    'body': 'TanH(${1:Angle})$2'
  'TerrainHeight (#Terrain, x, z) - Return the height of the #Terrain at the specified coordinates.':
    'prefix': 'TerrainHeight'
    'body': 'TerrainHeight(${1:#Terrain}, ${2:x})$3'
  'TerrainLocate (#Terrain, x, y, z) - Change the #Terrain location.':
    'prefix': 'TerrainLocate'
    'body': 'TerrainLocate(${1:#Terrain}, ${2:x}, ${3:y})$4'
  'TerrainMousePick (#Terrain, CameraID, x, y) - Perform a mouse picking on the #Terrain.':
    'prefix': 'TerrainMousePick'
    'body': 'TerrainMousePick(${1:#Terrain}, ${2:CameraID}, ${3:x})$4'
  'TerrainRenderMode (#Terrain, Flags) - Change the #Terrain render mode.':
    'prefix': 'TerrainRenderMode'
    'body': 'TerrainRenderMode(${1:#Terrain})$2'
  'TerrainTileHeightAtPosition (#Terrain, TileX, TileY, Layer, x, y) - Return the height of the #Terrain tile.':
    'prefix': 'TerrainTileHeightAtPosition'
    'body': 'TerrainTileHeightAtPosition(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:Layer}, ${5:x})$6'
  'TerrainTileLayerMapSize (#Terrain, TileX, TileY) - Return the #Terrain tile layer map size.':
    'prefix': 'TerrainTileLayerMapSize'
    'body': 'TerrainTileLayerMapSize(${1:#Terrain}, ${2:TileX})$3'
  'TerrainTilePointX (#Terrain, TileX, TileY, x, y, z) - Return the x position in the #Terrain tile of the point.':
    'prefix': 'TerrainTilePointX'
    'body': 'TerrainTilePointX(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x}, ${5:y})$6'
  'TerrainTilePointY (#Terrain, TileX, TileY, x, y, z) - Return the y position in the #Terrain tile of the point.':
    'prefix': 'TerrainTilePointY'
    'body': 'TerrainTilePointY(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x}, ${5:y})$6'
  'TerrainTileSize (#Terrain, TileX, TileY) - Return the size of the #Terrain tile.':
    'prefix': 'TerrainTileSize'
    'body': 'TerrainTileSize(${1:#Terrain}, ${2:TileX})$3'
  'Text3DAlignment (#Text3D, Alignment)':
    'prefix': 'Text3DAlignment'
    'body': 'Text3DAlignment(${1:#Text3D})$2'
  'Text3DCaption (#Text3D, Caption$)':
    'prefix': 'Text3DCaption'
    'body': 'Text3DCaption(${1:#Text3D})$2'
  'Text3DColor (#Text3D, Color)':
    'prefix': 'Text3DColor'
    'body': 'Text3DColor(${1:#Text3D})$2'
  'Text3DID (#Text3D) - Return the unique #Text3D ID.':
    'prefix': 'Text3DID'
    'body': 'Text3DID(${1:#Text3D})$2'
  'Text3DX (#Text3D) - Return the x position of the #Text3D.':
    'prefix': 'Text3DX'
    'body': 'Text3DX(${1:#Text3D})$2'
  'Text3DY (#Text3D) - Return the y position of the #Text3D.':
    'prefix': 'Text3DY'
    'body': 'Text3DY(${1:#Text3D})$2'
  'Text3DZ (#Text3D) - Return the z position of the #Text3D.':
    'prefix': 'Text3DZ'
    'body': 'Text3DZ(${1:#Text3D})$2'
  'TextGadget (#Gadget, x, y, Width, Height, Text$ [, Flags]) - Creates a Text gadget in the current GadgetList.':
    'prefix': 'TextGadget'
    'body': 'TextGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'TextGadget3D (#Gadget3D, x, y, Width, Height, Text$) - Creates a Text gadget in the current GadgetList.':
    'prefix': 'TextGadget3D'
    'body': 'TextGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6'
  'TextHeight (Text$) - Return the height (in pixel) of the given string in the current output using the current font.':
    'prefix': 'TextHeight'
    'body': 'TextHeight(${1:Text.s})$2'
  'TextureHeight (#Texture) - Returns the height in pixel of the #Texture.':
    'prefix': 'TextureHeight'
    'body': 'TextureHeight(${1:#Texture})$2'
  'TextureID (#Texture) - Returns the #Texture unique ID.':
    'prefix': 'TextureID'
    'body': 'TextureID(${1:#Texture})$2'
  'TextureOutput (#Texture) - Returns the OutputID of the #Texture to perform 2D rendering operation on it.':
    'prefix': 'TextureOutput'
    'body': 'TextureOutput(${1:#Texture})$2'
  'TextureWidth (#Texture) - Returns the width in pixel of the #Texture.':
    'prefix': 'TextureWidth'
    'body': 'TextureWidth(${1:#Texture})$2'
  'TextWidth (Text$) - Return the length (in pixel) of the given string in the current output using the current font.':
    'prefix': 'TextWidth'
    'body': 'TextWidth(${1:Text.s})$2'
  'ThreadID (Thread) - Get the OS handle for the thread.':
    'prefix': 'ThreadID'
    'body': 'ThreadID(${1:Thread})$2'
  'ThreadPriority (Thread, Priority) - Change the thread priority and returns the old priority.':
    'prefix': 'ThreadPriority'
    'body': 'ThreadPriority(${1:Thread})$2'
  'ToolBarHeight (#ToolBar) - Returns the height of the specified #ToolBar.':
    'prefix': 'ToolBarHeight'
    'body': 'ToolBarHeight(${1:#ToolBar})$2'
  'ToolBarID (#ToolBar) - Returns the unique ID which identifies the toolbar in the operating system.':
    'prefix': 'ToolBarID'
    'body': 'ToolBarID(${1:#ToolBar})$2'
  'ToolBarImageButton (#ButtonID, ImageID [, Mode]) - Add an image button to the toolbar being constructed.':
    'prefix': 'ToolBarImageButton'
    'body': 'ToolBarImageButton(${1:#ButtonID})$2'
  'ToolBarSeparator () - Add a vertical separator to toolbar being constructed.':
    'prefix': 'ToolBarSeparator'
    'body': 'ToolBarSeparator()$1'
  'ToolBarStandardButton (#ButtonID, #ButtonIcon [, Mode]) - Add a standard button to the toolbar being constructed.':
    'prefix': 'ToolBarStandardButton'
    'body': 'ToolBarStandardButton(${1:#ButtonID})$2'
  'ToolBarToolTip (#ToolBar, ButtonID, Text$) - Associates the specified Text$ to the current ToolBar #ButtonID.':
    'prefix': 'ToolBarToolTip'
    'body': 'ToolBarToolTip(${1:#ToolBar}, ${2:ButtonID})$3'
  'TrackBarGadget (#Gadget, x, y, Width, Height, Minimum, Maximum [, Flags]) - Create a TrackBar gadget in the current GadgetList.':
    'prefix': 'TrackBarGadget'
    'body': 'TrackBarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7'
  'TransformMesh (#Mesh, x, y, z, ScaleX, ScaleY, ScaleZ, RotateX, RotateY, RotateZ [, SubMesh])':
    'prefix': 'TransformMesh'
    'body': 'TransformMesh(${1:#Mesh}, ${2:x}, ${3:y}, ${4:z}, ${5:ScaleX}, ${6:ScaleY}, ${7:ScaleZ}, ${8:RotateX}, ${9:RotateY})$10'
  'TransformSprite (#Sprite, x1, y1 [, z1], x2, y2 [, z2], x3, y3 [, z3], x4, y4 [, z4]) - Transform the sprite to the new given dimensions.':
    'prefix': 'TransformSprite'
    'body': 'TransformSprite(${1:#Sprite}, ${2:x1})$3'
  'TranslateCoordinates (x.d, y.d [, System]) - Move the origin of the vector drawing coordinate system':
    'prefix': 'TranslateCoordinates'
    'body': 'TranslateCoordinates(${1:x.d})$2'
  'TransparentSpriteColor (#Sprite, Color) - Change the sprite transparent color (when displayed with DisplayTransparentSprite).':
    'prefix': 'TransparentSpriteColor'
    'body': 'TransparentSpriteColor(${1:#Sprite})$2'
  'TreeGadget (#Gadget, x, y, Width, Height [, Flags]) - Create a Tree gadget in the current GadgetList.':
    'prefix': 'TreeGadget'
    'body': 'TreeGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5'
  'TreeGadget3D (#Gadget3D, x, y, Width, Height [, Flags]) - Create a Tree gadget in the current GadgetList.':
    'prefix': 'TreeGadget3D'
    'body': 'TreeGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5'
  'Trim (String$ [, Character$]) - Removes all the \'space\' or given characters located at the beginning and at the end of a string.':
    'prefix': 'Trim'
    'body': 'Trim(${1:String.s})$2'
  'TruncateFile (#File) - End the file at the current position and cut all following data.':
    'prefix': 'TruncateFile'
    'body': 'TruncateFile(${1:#File})$2'
  'TryLockMutex (Mutex) - Try to get ownership of the mutex object. Returns 0 if unsucessfull.':
    'prefix': 'TryLockMutex'
    'body': 'TryLockMutex(${1:Mutex})$2'
  'TrySemaphore (Semaphore) - Decrement the semaphore count only if it is above 0, else return 0.':
    'prefix': 'TrySemaphore'
    'body': 'TrySemaphore(${1:Semaphore})$2'
  'TypeOf (Object) - Returns the type of the given object.':
    'prefix': 'TypeOf'
    'body': 'TypeOf(${1:Object})$2'
  'Subsystem (Name) - Check if a subsystem is in use.':
    'prefix': 'Subsystem'
    'body': 'Subsystem(${1:Name})$2'
  'InitializeStructure (*Address, Structure) - Initialize the structure at the given *Address.':
    'prefix': 'InitializeStructure'
    'body': 'InitializeStructure(${1:*Address})$2'
  'UCase (String$) - Returns the original string converted into upper case characters.':
    'prefix': 'UCase'
    'body': 'UCase(${1:String.s})$2'
  'UnbindEvent (Event, @Callback() [, Window [, Object [, EventType]]]) - Unbind an event callback.':
    'prefix': 'UnbindEvent'
    'body': 'UnbindEvent(${1:Event})$2'
  'UnbindGadgetEvent (#Gadget, @Callback() [, EventType]) - Unbind a gadget event callback.':
    'prefix': 'UnbindGadgetEvent'
    'body': 'UnbindGadgetEvent(${1:#Gadget})$2'
  'UnbindMenuEvent (#Menu, MenuItem, @Callback()) - Unbind a menu item event callback.':
    'prefix': 'UnbindMenuEvent'
    'body': 'UnbindMenuEvent(${1:#Menu}, ${2:MenuItem})$3'
  'UnclipOutput () - Remove any clipping from the drawing output':
    'prefix': 'UnclipOutput'
    'body': 'UnclipOutput()$1'
  'UncompressMemory (*Buffer, Size, *Output, OutputSize [, PluginID]) - Uncompress the content of the *Buffer into *Output.':
    'prefix': 'UncompressMemory'
    'body': 'UncompressMemory(${1:*Buffer}, ${2:Size}, ${3:*Output})$4'
  'UncompressPackFile (#Pack, Filename$ [, PackedFilename$]) - Uncompress the current or the specified filename in the archive to the specified file.':
    'prefix': 'UncompressPackFile'
    'body': 'UncompressPackFile(${1:#Pack})$2'
  'UncompressPackMemory (#Pack, *Buffer, Size [, PackedFilename$]) - Uncompress the current or the specified filename in the archive to memory.':
    'prefix': 'UncompressPackMemory'
    'body': 'UncompressPackMemory(${1:#Pack}, ${2:*Buffer})$3'
  'UnescapeString (String [, Flags]) - Returns the unescaped string.':
    'prefix': 'UnescapeString'
    'body': 'UnescapeString(${1:String})$2'
  'UnlockMutex (Mutex) - Release ownership of the mutex object':
    'prefix': 'UnlockMutex'
    'body': 'UnlockMutex(${1:Mutex})$2'
  'UpdateEntityAnimation (#Entity, Animation$) - Update the specified #Entity animation.':
    'prefix': 'UpdateEntityAnimation'
    'body': 'UpdateEntityAnimation(${1:#Entity})$2'
  'UpdateMesh (#Mesh, Index)':
    'prefix': 'UpdateMesh'
    'body': 'UpdateMesh(${1:#Mesh})$2'
  'UpdateMeshBoundingBox (#Mesh)':
    'prefix': 'UpdateMeshBoundingBox'
    'body': 'UpdateMeshBoundingBox(${1:#Mesh})$2'
  'UpdateRenderTexture (#Texture) - Update the #Texture content with the camera view.':
    'prefix': 'UpdateRenderTexture'
    'body': 'UpdateRenderTexture(${1:#Texture})$2'
  'UpdateSplinePoint (#Spline, Index, x, y, z) - Update the specified #Spline point.':
    'prefix': 'UpdateSplinePoint'
    'body': 'UpdateSplinePoint(${1:#Spline}, ${2:Index}, ${3:x}, ${4:y})$5'
  'UpdateTerrain (#Terrain) - Update the whole #Terrain.':
    'prefix': 'UpdateTerrain'
    'body': 'UpdateTerrain(${1:#Terrain})$2'
  'UpdateTerrainTileLayerBlend (#Terrain, TileX, TileY, Layer) - Update the #Terrain tile blend value.':
    'prefix': 'UpdateTerrainTileLayerBlend'
    'body': 'UpdateTerrainTileLayerBlend(${1:#Terrain}, ${2:TileX}, ${3:TileY})$4'
  'UpdateVertexPoseReference (#Mesh, Animation$, Track, Index, PoseIndex, Influence) - Update a new vertex pose reference to the #Mesh track.':
    'prefix': 'UpdateVertexPoseReference'
    'body': 'UpdateVertexPoseReference(${1:#Mesh}, ${2:Animation.s}, ${3:Track}, ${4:Index}, ${5:PoseIndex})$6'
  'URLDecoder (URL$ [, Format]) - Returns the decoded URL$.':
    'prefix': 'URLDecoder'
    'body': 'URLDecoder(${1:URL.s})$2'
  'URLEncoder (URL$ [, Format]) - Returns the URL$ encoded to HTTP format.':
    'prefix': 'URLEncoder'
    'body': 'URLEncoder(${1:URL.s})$2'
  'UseAudioCD (AudioCDDrive) - Change the current AudioCD drive.':
    'prefix': 'UseAudioCD'
    'body': 'UseAudioCD(${1:AudioCDDrive})$2'
  'UseBriefLZPacker () - Add BriefLZ support to the packer commandset.':
    'prefix': 'UseBriefLZPacker'
    'body': 'UseBriefLZPacker()$1'
  'UseCRC32Fingerprint () - Add CRC32 fingerprint support to the cipher commandset.':
    'prefix': 'UseCRC32Fingerprint'
    'body': 'UseCRC32Fingerprint()$1'
  'UseFLACSoundDecoder () - Enables the FLAC support for CatchSound(), LoadSound().':
    'prefix': 'UseFLACSoundDecoder'
    'body': 'UseFLACSoundDecoder()$1'
  'UseGadgetList (WindowID) - Make the specified WindowID the current gadget list to add gadgets on it.':
    'prefix': 'UseGadgetList'
    'body': 'UseGadgetList(${1:WindowID})$2'
  'UseJCALG1Packer () - Add JCALG1 decompression support to the packer commandset.':
    'prefix': 'UseJCALG1Packer'
    'body': 'UseJCALG1Packer()$1'
  'UseJPEG2000ImageDecoder () - Enables the JPEG 2000 support for CatchImage(), LoadImage(), CatchSprite() and LoadSprite().':
    'prefix': 'UseJPEG2000ImageDecoder'
    'body': 'UseJPEG2000ImageDecoder()$1'
  'UseJPEG2000ImageEncoder () - Enables the JPEG 2000 support for SaveImage() and SaveSprite().':
    'prefix': 'UseJPEG2000ImageEncoder'
    'body': 'UseJPEG2000ImageEncoder()$1'
  'UseJPEGImageDecoder () - Enables the JPEG support for CatchImage(), LoadImage(), CatchSprite() and LoadSprite().':
    'prefix': 'UseJPEGImageDecoder'
    'body': 'UseJPEGImageDecoder()$1'
  'UseJPEGImageEncoder () - Enables the JPEG support for SaveImage() and SaveSprite().':
    'prefix': 'UseJPEGImageEncoder'
    'body': 'UseJPEGImageEncoder()$1'
  'UseLZMAPacker () - Add LZMA support to the packer commandset.':
    'prefix': 'UseLZMAPacker'
    'body': 'UseLZMAPacker()$1'
  'UseMD5Fingerprint () - Add SHA1 fingerprint support to the cipher commandset.':
    'prefix': 'UseMD5Fingerprint'
    'body': 'UseMD5Fingerprint()$1'
  'UseODBCDatabase () - Add ODBC support to the database commandset.':
    'prefix': 'UseODBCDatabase'
    'body': 'UseODBCDatabase()$1'
  'UseOGGSoundDecoder () - Enables the OGG support for CatchSound(), LoadSound().':
    'prefix': 'UseOGGSoundDecoder'
    'body': 'UseOGGSoundDecoder()$1'
  'UsePNGImageDecoder () - Enables the PNG support for CatchImage(), LoadImage(), CatchSprite() and LoadSprite().':
    'prefix': 'UsePNGImageDecoder'
    'body': 'UsePNGImageDecoder()$1'
  'UsePNGImageEncoder () - Enables the PNG support for SaveImage() and SaveSprite().':
    'prefix': 'UsePNGImageEncoder'
    'body': 'UsePNGImageEncoder()$1'
  'UsePostgreSQLDatabase () - Add PostgreSQL support to the database commandset.':
    'prefix': 'UsePostgreSQLDatabase'
    'body': 'UsePostgreSQLDatabase()$1'
  'UserName () - Returns the name of the currently logged in user':
    'prefix': 'UserName'
    'body': 'UserName()$1'
  'UseSHA1Fingerprint () - Add SHA-1 fingerprint support to the cipher commandset.':
    'prefix': 'UseSHA1Fingerprint'
    'body': 'UseSHA1Fingerprint()$1'
  'UseSHA2Fingerprint () - Add SHA-2 fingerprint support to the cipher commandset.':
    'prefix': 'UseSHA2Fingerprint'
    'body': 'UseSHA2Fingerprint()$1'
  'UseSHA3Fingerprint () - Add SHA-3 fingerprint support to the cipher commandset.':
    'prefix': 'UseSHA3Fingerprint'
    'body': 'UseSHA3Fingerprint()$1'
  'UseSQLiteDatabase () - Add SQLite support to the database commandset.':
    'prefix': 'UseSQLiteDatabase'
    'body': 'UseSQLiteDatabase()$1'
  'UseTARPacker () - Add TAR support to the packer commandset.':
    'prefix': 'UseTARPacker'
    'body': 'UseTARPacker()$1'
  'UseTGAImageDecoder () - Enables the TGA support for CatchImage(), LoadImage(), CatchSprite() and LoadSprite().':
    'prefix': 'UseTGAImageDecoder'
    'body': 'UseTGAImageDecoder()$1'
  'UseTIFFImageDecoder () - Enables the TIFF support for CatchImage(), LoadImage(), CatchSprite() and LoadSprite().':
    'prefix': 'UseTIFFImageDecoder'
    'body': 'UseTIFFImageDecoder()$1'
  'UseZipPacker () - Add ZIP support to the packer commandset.':
    'prefix': 'UseZipPacker'
    'body': 'UseZipPacker()$1'
  'Val (String$) - Transform a string into a numeric value.':
    'prefix': 'Val'
    'body': 'Val(${1:String.s})$2'
  'ValD (String$) - Convert a String into a double number.':
    'prefix': 'ValD'
    'body': 'ValD(${1:String.s})$2'
  'ValF (String$) - Convert a String into a float number.':
    'prefix': 'ValF'
    'body': 'ValF(${1:String.s})$2'
  'VectorFont (FontID [, Size.d]) - Set the font to use for vector drawing':
    'prefix': 'VectorFont'
    'body': 'VectorFont(${1:FontID})$2'
  'VectorOutputHeight () - Returns the height of the current vector output':
    'prefix': 'VectorOutputHeight'
    'body': 'VectorOutputHeight()$1'
  'VectorOutputWidth () - Returns the width of the current vector output':
    'prefix': 'VectorOutputWidth'
    'body': 'VectorOutputWidth()$1'
  'VectorParagraphHeight (Text$, Width.d, Height.d) - Calculate the height of a text paragraph for vector drawing':
    'prefix': 'VectorParagraphHeight'
    'body': 'VectorParagraphHeight(${1:Text.s}, ${2:Width.d})$3'
  'VectorResolutionX () - Returns horizontal resolution (in DPI) of the vector drawing output':
    'prefix': 'VectorResolutionX'
    'body': 'VectorResolutionX()$1'
  'VectorResolutionY () - Returns vertical resolution (in DPI) of the vector drawing output':
    'prefix': 'VectorResolutionY'
    'body': 'VectorResolutionY()$1'
  'VectorSourceCircularGradient (x.d, y.d, Radius.d, [CenterX.d, CenterY.d]) - Set a circular gradient for vector drawing':
    'prefix': 'VectorSourceCircularGradient'
    'body': 'VectorSourceCircularGradient(${1:x.d}, ${2:y.d}, ${3:Radius.d})$4'
  'VectorSourceColor (Color) - Set the color for vector drawing':
    'prefix': 'VectorSourceColor'
    'body': 'VectorSourceColor(${1:Color})$2'
  'VectorSourceGradientColor (Color, Position.d) - Add a color to the vector drawing gradient':
    'prefix': 'VectorSourceGradientColor'
    'body': 'VectorSourceGradientColor(${1:Color})$2'
  'VectorSourceImage (ImageID [, Alpha [, Width.d, Height.d [, Flags]]]) - Set an image as the vector drawing source':
    'prefix': 'VectorSourceImage'
    'body': 'VectorSourceImage(${1:ImageID})$2'
  'VectorSourceLinearGradient (x1.d, y1.d, x2.d, y2.d) - Set a linear gradient for vector drawing':
    'prefix': 'VectorSourceLinearGradient'
    'body': 'VectorSourceLinearGradient(${1:x1.d}, ${2:y1.d}, ${3:x2.d})$4'
  'VectorTextHeight (Text$ [, Flags]) - Calculate the text height for vector drawing':
    'prefix': 'VectorTextHeight'
    'body': 'VectorTextHeight(${1:Text.s})$2'
  'VectorTextWidth (Text$ [, Flags]) - Calculate the text width for vector drawing':
    'prefix': 'VectorTextWidth'
    'body': 'VectorTextWidth(${1:Text.s})$2'
  'VectorUnit () - Returns the unit of measurement used by the vector drawing output':
    'prefix': 'VectorUnit'
    'body': 'VectorUnit()$1'
  'VertexPoseReferenceCount (#Mesh, Animation$, Track, Index) - Return the vertex pose reference size of the specified #Mesh track.':
    'prefix': 'VertexPoseReferenceCount'
    'body': 'VertexPoseReferenceCount(${1:#Mesh}, ${2:Animation.s}, ${3:Track})$4'
  'WaitFastCGIRequest () - Wait for FastCGI request to process.':
    'prefix': 'WaitFastCGIRequest'
    'body': 'WaitFastCGIRequest()$1'
  'WaitProgram (Program [, Timeout]) - Wait for the specified program to end':
    'prefix': 'WaitProgram'
    'body': 'WaitProgram(${1:Program})$2'
  'WaitSemaphore (Semaphore) - Wait for the semaphore object once (decrement the count by 1).':
    'prefix': 'WaitSemaphore'
    'body': 'WaitSemaphore(${1:Semaphore})$2'
  'WaitThread (Thread [, Timeout]) - Wait until the thread ends.':
    'prefix': 'WaitThread'
    'body': 'WaitThread(${1:Thread})$2'
  'WaitWindowEvent ([Timeout]) - Waits until an event has occurs on any of the opened windows.':
    'prefix': 'WaitWindowEvent'
    'body': 'WaitWindowEvent()$1'
  'WaterColor (#Camera, Color) - Create a water plane at the given position':
    'prefix': 'WaterColor'
    'body': 'WaterColor(${1:#Camera})$2'
  'WaterHeight (#Camera, x, y) - Get the Y position of the water at the given coordinates':
    'prefix': 'WaterHeight'
    'body': 'WaterHeight(${1:#Camera}, ${2:x})$3'
  'WebGadget (#Gadget, x, y, Width, Heigth, URL$) - Create a Web gadget in the current GadgetList.':
    'prefix': 'WebGadget'
    'body': 'WebGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Heigth})$6'
  'WindowBounds (#Window, MinimumWidth, MinimumHeight, MaximumWidth, MaximumHeight) - Set the #Window bounds.':
    'prefix': 'WindowBounds'
    'body': 'WindowBounds(${1:#Window}, ${2:MinimumWidth}, ${3:MinimumHeight}, ${4:MaximumWidth})$5'
  'WindowEvent () - Check if an event has occured on any of the opened windows.':
    'prefix': 'WindowEvent'
    'body': 'WindowEvent()$1'
  'WindowEvent3D () - Check if an event has occured on any of the opened windows.':
    'prefix': 'WindowEvent3D'
    'body': 'WindowEvent3D()$1'
  'WindowHeight (#Window [, Flags]) - Returns the height, in pixels, of the specified window.':
    'prefix': 'WindowHeight'
    'body': 'WindowHeight(${1:#Window})$2'
  'WindowHeight3D (#Window3D) - Returns the height, in pixels, of the specified window.':
    'prefix': 'WindowHeight3D'
    'body': 'WindowHeight3D(${1:#Window3D})$2'
  'WindowID (#Window) - Returns the unique ID which identifies the window in the operating system.':
    'prefix': 'WindowID'
    'body': 'WindowID(${1:#Window})$2'
  'WindowID3D (#Window3D) - Returns the unique ID which identifies the window in the operating system.':
    'prefix': 'WindowID3D'
    'body': 'WindowID3D(${1:#Window3D})$2'
  'WindowMouseX (#Window) - Returns the mouse position relative to the left of the specified window.':
    'prefix': 'WindowMouseX'
    'body': 'WindowMouseX(${1:#Window})$2'
  'WindowMouseY (#Window) - Returns the mouse position relative to the top of the specified window.':
    'prefix': 'WindowMouseY'
    'body': 'WindowMouseY(${1:#Window})$2'
  'WindowOutput (#Window) - Returns the OutputID of the specified window to perform 2D rendering operation on it.':
    'prefix': 'WindowOutput'
    'body': 'WindowOutput(${1:#Window})$2'
  'WindowVectorOutput (#Window [, Unit]) - Returns the OutputID of the specified window to vector drawing on it.':
    'prefix': 'WindowVectorOutput'
    'body': 'WindowVectorOutput(${1:#Window})$2'
  'WindowWidth (#Window [, Flags]) - Return the width, in pixels, of the specified window.':
    'prefix': 'WindowWidth'
    'body': 'WindowWidth(${1:#Window})$2'
  'WindowWidth3D (#Window3D) - Return the width, in pixels, of the specified window.':
    'prefix': 'WindowWidth3D'
    'body': 'WindowWidth3D(${1:#Window3D})$2'
  'WindowX (#Window [, Mode]) - Returns the left position, in pixels, of the specified window.':
    'prefix': 'WindowX'
    'body': 'WindowX(${1:#Window})$2'
  'WindowX3D (#Window3D) - Returns the left position, in pixels, of the specified window.':
    'prefix': 'WindowX3D'
    'body': 'WindowX3D(${1:#Window3D})$2'
  'WindowY (#Window [, Mode]) - Returns the top position, in pixels, of the specified window.':
    'prefix': 'WindowY'
    'body': 'WindowY(${1:#Window})$2'
  'WindowY3D (#Window3D) - Returns the top position, in pixels, of the specified window.':
    'prefix': 'WindowY3D'
    'body': 'WindowY3D(${1:#Window3D})$2'
  'WorldCollisionAppliedImpulse () - Get applied impulse vector of the current collison.':
    'prefix': 'WorldCollisionAppliedImpulse'
    'body': 'WorldCollisionAppliedImpulse()$1'
  'WorldCollisionContact () - Get the contact vector of the current collison.':
    'prefix': 'WorldCollisionContact'
    'body': 'WorldCollisionContact()$1'
  'WorldCollisionNormal () - Get the normal vector of the current collison.':
    'prefix': 'WorldCollisionNormal'
    'body': 'WorldCollisionNormal()$1'
  'WorldDebug (Mode) - Change the debug mode for the whole world.':
    'prefix': 'WorldDebug'
    'body': 'WorldDebug(${1:Mode})$2'
  'WorldGravity (Gravity) - Change the gravity in the world.':
    'prefix': 'WorldGravity'
    'body': 'WorldGravity(${1:Gravity})$2'
  'WorldShadows (ShadowType [, Distance [, Color [, TextureSize]]]) - Change the shadow handling in this world.':
    'prefix': 'WorldShadows'
    'body': 'WorldShadows(${1:ShadowType})$2'
  'WriteAsciiCharacter (#File, Number) - Write an ascii character to the specified file.':
    'prefix': 'WriteAsciiCharacter'
    'body': 'WriteAsciiCharacter(${1:#File})$2'
  'WriteByte (#File, Number) - Write a byte sized number to the specified file.':
    'prefix': 'WriteByte'
    'body': 'WriteByte(${1:#File})$2'
  'WriteCGIData (*Buffer, Size) - Write binary data to CGI output.':
    'prefix': 'WriteCGIData'
    'body': 'WriteCGIData(${1:*Buffer})$2'
  'WriteCGIFile (Filename$) - Write a whole file to CGI output.':
    'prefix': 'WriteCGIFile'
    'body': 'WriteCGIFile(${1:Filename.s})$2'
  'WriteCGIHeader (Name$, Value$ [, Flags]) - Add a new header to the answer.':
    'prefix': 'WriteCGIHeader'
    'body': 'WriteCGIHeader(${1:Name.s})$2'
  'WriteCGIString (String$ [, Encoding]) - Write a string to the CGI output.':
    'prefix': 'WriteCGIString'
    'body': 'WriteCGIString(${1:String.s})$2'
  'WriteCGIStringN (String$ [, Encoding]) - Write a string to the CGI output including a carriage return.':
    'prefix': 'WriteCGIStringN'
    'body': 'WriteCGIStringN(${1:String.s})$2'
  'WriteCharacter (#File, Number [, Format]) - Write a character to the specified file.':
    'prefix': 'WriteCharacter'
    'body': 'WriteCharacter(${1:#File})$2'
  'WriteConsoleData (*Buffer, Size) - Write data to the console output':
    'prefix': 'WriteConsoleData'
    'body': 'WriteConsoleData(${1:*Buffer})$2'
  'WriteData (#File, *MemoryBuffer, LengthToWrite) - Write the content of the specified memory buffer to the specified file.':
    'prefix': 'WriteData'
    'body': 'WriteData(${1:#File}, ${2:*MemoryBuffer})$3'
  'WriteDouble (#File, Number) - Write a double number to the specified file.':
    'prefix': 'WriteDouble'
    'body': 'WriteDouble(${1:#File})$2'
  'WriteFloat (#File, Number) - Write a float number to the specified file.':
    'prefix': 'WriteFloat'
    'body': 'WriteFloat(${1:#File})$2'
  'WriteInteger (#File, Number) - Write an integer to the specified file.':
    'prefix': 'WriteInteger'
    'body': 'WriteInteger(${1:#File})$2'
  'WriteLong (#File, Number) - Write a long number to the specified file.':
    'prefix': 'WriteLong'
    'body': 'WriteLong(${1:#File})$2'
  'WritePreferenceDouble (Key$, Value) - Write the keyword and its associated double value.':
    'prefix': 'WritePreferenceDouble'
    'body': 'WritePreferenceDouble(${1:Key.s})$2'
  'WritePreferenceFloat (Key$, Value) - Write the keyword and its associated value.':
    'prefix': 'WritePreferenceFloat'
    'body': 'WritePreferenceFloat(${1:Key.s})$2'
  'WritePreferenceInteger (Key$, Value) - Write the keyword and its associated value.':
    'prefix': 'WritePreferenceInteger'
    'body': 'WritePreferenceInteger(${1:Key.s})$2'
  'WritePreferenceLong (Key$, Value) - Write the keyword and its associated value.':
    'prefix': 'WritePreferenceLong'
    'body': 'WritePreferenceLong(${1:Key.s})$2'
  'WritePreferenceQuad (Key$, Value) - Write the keyword and its associated quad value.':
    'prefix': 'WritePreferenceQuad'
    'body': 'WritePreferenceQuad(${1:Key.s})$2'
  'WritePreferenceString (Key$, Value$) - Write the keyword and its associated value.':
    'prefix': 'WritePreferenceString'
    'body': 'WritePreferenceString(${1:Key.s})$2'
  'WriteProgramData (Program, *Buffer, Size) - Write data to the standard input of the program':
    'prefix': 'WriteProgramData'
    'body': 'WriteProgramData(${1:Program}, ${2:*Buffer})$3'
  'WriteProgramString (Program, String$ [, Format]) - Write the string to the standard input of the program':
    'prefix': 'WriteProgramString'
    'body': 'WriteProgramString(${1:Program})$2'
  'WriteProgramStringN (Program, String$ [, Format]) - Write the string to the standard input of the program including a newline':
    'prefix': 'WriteProgramStringN'
    'body': 'WriteProgramStringN(${1:Program})$2'
  'WriteQuad (#File, Number) - Write a quad number to the specified file.':
    'prefix': 'WriteQuad'
    'body': 'WriteQuad(${1:#File})$2'
  'WriteSerialPortData (#SerialPort, *Buffer, Length) - Write an arbitrary amount of data to the #SerialPort.':
    'prefix': 'WriteSerialPortData'
    'body': 'WriteSerialPortData(${1:#SerialPort}, ${2:*Buffer})$3'
  'WriteSerialPortString (#SerialPort, String$ [, Format]) - Write a string to the #SerialPort.':
    'prefix': 'WriteSerialPortString'
    'body': 'WriteSerialPortString(${1:#SerialPort})$2'
  'WriteString (#File, Text$ [, Format]) - Write a string to the specified file.':
    'prefix': 'WriteString'
    'body': 'WriteString(${1:#File})$2'
  'WriteStringFormat (#File, Format) - Write a BOM (Byte Order Mark) to identify the string format used in the file.':
    'prefix': 'WriteStringFormat'
    'body': 'WriteStringFormat(${1:#File})$2'
  'WriteStringN (#File, Text$ [, Format]) - Write a string to the specified file and add the \'end of line\' character.':
    'prefix': 'WriteStringN'
    'body': 'WriteStringN(${1:#File})$2'
  'WriteUnicodeCharacter (#File, Number) - Write an unicode character to the specified file.':
    'prefix': 'WriteUnicodeCharacter'
    'body': 'WriteUnicodeCharacter(${1:#File})$2'
  'WriteWord (#File, Number) - Write a word number to the specified file.':
    'prefix': 'WriteWord'
    'body': 'WriteWord(${1:#File})$2'
  'XMLAttributeName (Node) - Get the name of the current examined attribute in the XML node':
    'prefix': 'XMLAttributeName'
    'body': 'XMLAttributeName(${1:Node})$2'
  'XMLAttributeValue (Node) - Get the value of the current examined attribute in the XML node':
    'prefix': 'XMLAttributeValue'
    'body': 'XMLAttributeValue(${1:Node})$2'
  'XMLChildCount (Node) - Get the number of children that the given XML node has':
    'prefix': 'XMLChildCount'
    'body': 'XMLChildCount(${1:Node})$2'
  'XMLError (#XML) - Get a string description for an error during XML parsing':
    'prefix': 'XMLError'
    'body': 'XMLError(${1:#XML})$2'
  'XMLErrorLine (#XML) - Get the input line where a parsing error occoured':
    'prefix': 'XMLErrorLine'
    'body': 'XMLErrorLine(${1:#XML})$2'
  'XMLErrorPosition (#XML) - Get the input column where a parsing error occoured':
    'prefix': 'XMLErrorPosition'
    'body': 'XMLErrorPosition(${1:#XML})$2'
  'XMLNodeFromID (#XML, ID$) - Get a node in the XML tree from its ID-tag':
    'prefix': 'XMLNodeFromID'
    'body': 'XMLNodeFromID(${1:#XML})$2'
  'XMLNodeFromPath (ParentNode, Path$) - Get a node in the XML tree from a path string':
    'prefix': 'XMLNodeFromPath'
    'body': 'XMLNodeFromPath(${1:ParentNode})$2'
  'XMLNodePath (Node [, ParentNode]) - Get the path string that represents the given XML node in the document (or relative to ParentNode)':
    'prefix': 'XMLNodePath'
    'body': 'XMLNodePath(${1:Node})$2'
  'XMLNodeType (Node) - Get the type of the given XML node':
    'prefix': 'XMLNodeType'
    'body': 'XMLNodeType(${1:Node})$2'
  'XMLStatus (#XML) - Get the status (or error code) of the XML parsing':
    'prefix': 'XMLStatus'
    'body': 'XMLStatus(${1:#XML})$2'
  'Yaw (ObjectID, Value.f, Mode) - Yaw the specifed object.':
    'prefix': 'Yaw'
    'body': 'Yaw(${1:ObjectID}, ${2:Value.f})$3'
  'Year (Date) - Returns the year value of the specified date (between 1970 and 2034).':
    'prefix': 'Year'
    'body': 'Year(${1:Date})$2'
  'ZoomSprite (#Sprite, Width, Height) - Zoom the sprite to the new given dimensions.':
    'prefix': 'ZoomSprite'
    'body': 'ZoomSprite(${1:#Sprite}, ${2:Width})$3'
